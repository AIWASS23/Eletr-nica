

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Aug 06 18:47:08 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.41
    18                           ; Generated 25/01/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F45K20 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	idataCOMRAM
    53  007CC0                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _password
    57  007CC0  00                 	db	0
    58  007CC1  01                 	db	1
    59  007CC2  02                 	db	2
    60  007CC3  03                 	db	3
    61  0000                     _TRISD	set	3989
    62  0000                     _TRISC	set	3988
    63  0000                     _PORTCbits	set	3970
    64  0000                     _PORTDbits	set	3971
    65                           
    66                           ; #config settings
    67                           
    68                           	psect	cinit
    69  007CEA                     __pcinit:
    70                           	opt stack 0
    71  007CEA                     start_initialization:
    72                           	opt stack 0
    73  007CEA                     __initialization:
    74                           	opt stack 0
    75                           
    76                           ; Initialize objects allocated to COMRAM (4 bytes)
    77                           ; load TBLPTR registers with __pidataCOMRAM
    78  007CEA  0EC0               	movlw	low __pidataCOMRAM
    79  007CEC  6EF6               	movwf	tblptrl,c
    80  007CEE  0E7C               	movlw	high __pidataCOMRAM
    81  007CF0  6EF7               	movwf	tblptrh,c
    82  007CF2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    83  007CF4  6EF8               	movwf	tblptru,c
    84  007CF6  EE00  F014         	lfsr	0,__pdataCOMRAM
    85  007CFA  EE10 F004          	lfsr	1,4
    86  007CFE                     copy_data0:
    87  007CFE  0009               	tblrd		*+
    88  007D00  CFF5 FFEE          	movff	tablat,postinc0
    89  007D04  50E5               	movf	postdec1,w,c
    90  007D06  50E1               	movf	fsr1l,w,c
    91  007D08  E1FA               	bnz	copy_data0
    92                           
    93                           ; Clear objects allocated to COMRAM (6 bytes)
    94  007D0A  6A13               	clrf	(__pbssCOMRAM+5)& (0+255),c
    95  007D0C  6A12               	clrf	(__pbssCOMRAM+4)& (0+255),c
    96  007D0E  6A11               	clrf	(__pbssCOMRAM+3)& (0+255),c
    97  007D10  6A10               	clrf	(__pbssCOMRAM+2)& (0+255),c
    98  007D12  6A0F               	clrf	(__pbssCOMRAM+1)& (0+255),c
    99  007D14  6A0E               	clrf	__pbssCOMRAM& (0+255),c
   100  007D16                     end_of_initialization:
   101                           	opt stack 0
   102  007D16                     __end_of__initialization:
   103                           	opt stack 0
   104  007D16  0100               	movlb	0
   105  007D18  EFC4  F03E         	goto	_main	;jump to C main() function
   106                           tblptru	equ	0xFF8
   107                           tblptrh	equ	0xFF7
   108                           tblptrl	equ	0xFF6
   109                           tablat	equ	0xFF5
   110                           postinc0	equ	0xFEE
   111                           postdec1	equ	0xFE5
   112                           fsr1l	equ	0xFE1
   113                           
   114                           	psect	bssCOMRAM
   115  00000E                     __pbssCOMRAM:
   116                           	opt stack 0
   117  00000E                     _i:
   118                           	opt stack 0
   119  00000E                     	ds	2
   120  000010                     _entry:
   121                           	opt stack 0
   122  000010                     	ds	4
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           tblptrl	equ	0xFF6
   126                           tablat	equ	0xFF5
   127                           postinc0	equ	0xFEE
   128                           postdec1	equ	0xFE5
   129                           fsr1l	equ	0xFE1
   130                           
   131                           	psect	dataCOMRAM
   132  000014                     __pdataCOMRAM:
   133                           	opt stack 0
   134  000014                     _password:
   135                           	opt stack 0
   136  000014                     	ds	4
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           postdec1	equ	0xFE5
   143                           fsr1l	equ	0xFE1
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	opt stack 0
   148  000001                     ?_memcmp:
   149                           	opt stack 0
   150  000001                     ?_key_pressed:
   151                           	opt stack 0
   152  000001                     memcmp@s1:
   153                           	opt stack 0
   154                           
   155                           ; 2 bytes @ 0x0
   156  000001                     	ds	2
   157  000003                     ??_key_pressed:
   158  000003                     memcmp@s2:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x2
   162  000003                     	ds	2
   163  000005                     ?_get_key:
   164                           	opt stack 0
   165  000005                     memcmp@n:
   166                           	opt stack 0
   167                           
   168                           ; 2 bytes @ 0x4
   169  000005                     	ds	2
   170  000007                     ??_memcmp:
   171  000007                     get_key@key:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x6
   175  000007                     	ds	3
   176  00000A                     ??_main:
   177                           
   178                           ; 1 bytes @ 0x9
   179  00000A                     	ds	2
   180  00000C                     main@key:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xB
   184  00000C                     	ds	2
   185                           tblptru	equ	0xFF8
   186                           tblptrh	equ	0xFF7
   187                           tblptrl	equ	0xFF6
   188                           tablat	equ	0xFF5
   189                           postinc0	equ	0xFEE
   190                           postdec1	equ	0xFE5
   191                           fsr1l	equ	0xFE1
   192                           
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 52 in file "main.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;  key             2   11[COMRAM] int 
   203 ;; Return value:  Size  Location     Type
   204 ;;                  1    wreg      void 
   205 ;; Registers used:
   206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 0/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   212 ;;      Params:         0       0       0       0       0       0       0
   213 ;;      Locals:         2       0       0       0       0       0       0
   214 ;;      Temps:          2       0       0       0       0       0       0
   215 ;;      Totals:         4       0       0       0       0       0       0
   216 ;;Total ram usage:        4 bytes
   217 ;; Hardware stack levels required when called:    2
   218 ;; This function calls:
   219 ;;		_get_key
   220 ;;		_memcmp
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           	psect	text0
   227  007D88                     __ptext0:
   228                           	opt stack 0
   229  007D88                     _main:
   230                           	opt stack 29
   231                           
   232                           ;main.c: 53: TRISC=0b11111111;
   233                           
   234                           ;incstack = 0
   235  007D88  6894               	setf	3988,c	;volatile
   236                           
   237                           ;main.c: 54: TRISD=0b00000000;
   238  007D8A  0E00               	movlw	0
   239  007D8C  6E95               	movwf	3989,c	;volatile
   240  007D8E                     l906:
   241                           
   242                           ;main.c: 56: if(i>3)i=0;
   243  007D8E  BE0F               	btfsc	_i+1,7,c
   244  007D90  D00A               	goto	l910
   245  007D92  500F               	movf	_i+1,w,c
   246  007D94  E104               	bnz	u350
   247  007D96  0E04               	movlw	4
   248  007D98  5C0E               	subwf	_i,w,c
   249  007D9A  A0D8               	btfss	status,0,c
   250  007D9C  D004               	goto	l910
   251  007D9E                     u350:
   252  007D9E  0E00               	movlw	0
   253  007DA0  6E0F               	movwf	_i+1,c
   254  007DA2  0E00               	movlw	0
   255  007DA4  6E0E               	movwf	_i,c
   256  007DA6                     l910:
   257                           
   258                           ;main.c: 57: int key=get_key();
   259  007DA6  EC62  F03E         	call	_get_key	;wreg free
   260  007DAA  C005  F00C         	movff	?_get_key,main@key
   261  007DAE  C006  F00D         	movff	?_get_key+1,main@key+1
   262                           
   263                           ;main.c: 58: if(key==12){
   264  007DB2  0E0C               	movlw	12
   265  007DB4  180C               	xorwf	main@key,w,c
   266  007DB6  100D               	iorwf	main@key+1,w,c
   267  007DB8  A4D8               	btfss	status,2,c
   268  007DBA  D02B               	goto	l932
   269                           
   270                           ;main.c: 59: if(memcmp(entry,password,sizeof(entry))==0){
   271  007DBC  0E10               	movlw	low _entry
   272  007DBE  6E01               	movwf	memcmp@s1,c
   273  007DC0  0E00               	movlw	high _entry
   274  007DC2  6E02               	movwf	memcmp@s1+1,c
   275  007DC4  0E14               	movlw	low _password
   276  007DC6  6E03               	movwf	memcmp@s2,c
   277  007DC8  0E00               	movlw	high _password
   278  007DCA  6E04               	movwf	memcmp@s2+1,c
   279  007DCC  0E00               	movlw	0
   280  007DCE  6E06               	movwf	memcmp@n+1,c
   281  007DD0  0E04               	movlw	4
   282  007DD2  6E05               	movwf	memcmp@n,c
   283  007DD4  EC8E  F03E         	call	_memcmp	;wreg free
   284  007DD8  5001               	movf	?_memcmp,w,c
   285  007DDA  1002               	iorwf	?_memcmp+1,w,c
   286  007DDC  A4D8               	btfss	status,2,c
   287  007DDE  D7D7               	goto	l906
   288                           
   289                           ;main.c: 60: PORTDbits.RD7=1;
   290  007DE0  8E83               	bsf	3971,7,c	;volatile
   291                           
   292                           ;main.c: 61: _delay((unsigned long)((2000)*(4000000/4000.0)));
   293  007DE2  0E0B               	movlw	11
   294  007DE4  6E0B               	movwf	(??_main+1)& (0+255),c
   295  007DE6  0E26               	movlw	38
   296  007DE8  6E0A               	movwf	??_main& (0+255),c
   297  007DEA  0E5E               	movlw	94
   298  007DEC                     u397:
   299  007DEC  2EE8               	decfsz	wreg,f,c
   300  007DEE  D7FE               	bra	u397
   301  007DF0  2E0A               	decfsz	??_main& (0+255),f,c
   302  007DF2  D7FC               	bra	u397
   303  007DF4  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   304  007DF6  D7FA               	bra	u397
   305                           
   306                           ;main.c: 62: PORTDbits.RD7=0;
   307  007DF8  9E83               	bcf	3971,7,c	;volatile
   308  007DFA  D010               	goto	l934
   309  007DFC                     l924:
   310                           
   311                           ;main.c: 65: entry[1]=0;
   312  007DFC  0E00               	movlw	0
   313  007DFE  6E11               	movwf	_entry+1,c
   314                           
   315                           ;main.c: 66: entry[2]=0;
   316  007E00  0E00               	movlw	0
   317  007E02  6E12               	movwf	_entry+2,c
   318                           
   319                           ;main.c: 67: entry[3]=0;
   320  007E04  0E00               	movlw	0
   321  007E06  6E13               	movwf	_entry+3,c
   322                           
   323                           ;main.c: 68: i=0;
   324  007E08  0E00               	movlw	0
   325  007E0A  6E0F               	movwf	_i+1,c
   326  007E0C  0E00               	movlw	0
   327  007E0E  6E0E               	movwf	_i,c
   328                           
   329                           ;main.c: 69: }
   330                           ;main.c: 70: }
   331  007E10  D7BE               	goto	l906
   332  007E12                     l932:
   333                           
   334                           ;main.c: 71: else if(key==11){
   335  007E12  0E0B               	movlw	11
   336  007E14  180C               	xorwf	main@key,w,c
   337  007E16  100D               	iorwf	main@key+1,w,c
   338  007E18  A4D8               	btfss	status,2,c
   339  007E1A  D003               	goto	l936
   340  007E1C                     l934:
   341                           
   342                           ;main.c: 72: entry[0]=0;
   343  007E1C  0E00               	movlw	0
   344  007E1E  6E10               	movwf	_entry,c
   345  007E20  D7ED               	goto	l924
   346  007E22                     l936:
   347                           
   348                           ;main.c: 78: else{
   349                           ;main.c: 79: entry[i++]=key;
   350  007E22  0E10               	movlw	low _entry
   351  007E24  240E               	addwf	_i,w,c
   352  007E26  6ED9               	movwf	fsr2l,c
   353  007E28  0E00               	movlw	high _entry
   354  007E2A  200F               	addwfc	_i+1,w,c
   355  007E2C  6EDA               	movwf	fsr2h,c
   356  007E2E  C00C  FFDF         	movff	main@key,indf2
   357  007E32  4A0E               	infsnz	_i,f,c
   358  007E34  2A0F               	incf	_i+1,f,c
   359  007E36  D7AB               	goto	l906
   360  007E38                     __end_of_main:
   361                           	opt stack 0
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           indf2	equ	0xFDF
   371                           fsr2h	equ	0xFDA
   372                           fsr2l	equ	0xFD9
   373                           status	equ	0xFD8
   374                           
   375 ;; *************** function _memcmp *****************
   376 ;; Defined at:
   377 ;;		line 3 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\memcmp.c"
   378 ;; Parameters:    Size  Location     Type
   379 ;;  s1              2    0[COMRAM] PTR const void 
   380 ;;		 -> entry(4), 
   381 ;;  s2              2    2[COMRAM] PTR const void 
   382 ;;		 -> password(4), 
   383 ;;  n               2    4[COMRAM] unsigned int 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  2    0[COMRAM] int 
   388 ;; Registers used:
   389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   395 ;;      Params:         6       0       0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0       0       0
   397 ;;      Temps:          3       0       0       0       0       0       0
   398 ;;      Totals:         9       0       0       0       0       0       0
   399 ;;Total ram usage:        9 bytes
   400 ;; Hardware stack levels used:    1
   401 ;; This function calls:
   402 ;;		Nothing
   403 ;; This function is called by:
   404 ;;		_main
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           	psect	text1
   409  007D1C                     __ptext1:
   410                           	opt stack 0
   411  007D1C                     _memcmp:
   412                           	opt stack 30
   413                           
   414                           ;incstack = 0
   415  007D1C  D028               	goto	l896
   416  007D1E                     l888:
   417  007D1E  C003  FFD9         	movff	memcmp@s2,fsr2l
   418  007D22  C004  FFDA         	movff	memcmp@s2+1,fsr2h
   419  007D26  C001  FFE1         	movff	memcmp@s1,fsr1l
   420  007D2A  C002  FFE2         	movff	memcmp@s1+1,fsr1h
   421  007D2E  50DE               	movf	postinc2,w,c
   422  007D30  18E6               	xorwf	postinc1,w,c
   423  007D32  B4D8               	btfsc	status,2,c
   424  007D34  D018               	goto	l894
   425  007D36  C003  FFD9         	movff	memcmp@s2,fsr2l
   426  007D3A  C004  FFDA         	movff	memcmp@s2+1,fsr2h
   427  007D3E  50DF               	movf	indf2,w,c
   428  007D40  6E07               	movwf	??_memcmp& (0+255),c
   429  007D42  6A08               	clrf	(??_memcmp+1)& (0+255),c
   430  007D44  1E07               	comf	??_memcmp,f,c
   431  007D46  1E08               	comf	??_memcmp+1,f,c
   432  007D48  4A07               	infsnz	??_memcmp,f,c
   433  007D4A  2A08               	incf	??_memcmp+1,f,c
   434  007D4C  C001  FFD9         	movff	memcmp@s1,fsr2l
   435  007D50  C002  FFDA         	movff	memcmp@s1+1,fsr2h
   436  007D54  50DF               	movf	indf2,w,c
   437  007D56  6E09               	movwf	(??_memcmp+2)& (0+255),c
   438  007D58  5009               	movf	??_memcmp+2,w,c
   439  007D5A  2407               	addwf	??_memcmp,w,c
   440  007D5C  6E01               	movwf	?_memcmp,c
   441  007D5E  0E00               	movlw	0
   442  007D60  2008               	addwfc	??_memcmp+1,w,c
   443  007D62  6E02               	movwf	?_memcmp+1,c
   444  007D64  0012               	return	
   445  007D66                     l894:
   446  007D66  4A01               	infsnz	memcmp@s1,f,c
   447  007D68  2A02               	incf	memcmp@s1+1,f,c
   448  007D6A  4A03               	infsnz	memcmp@s2,f,c
   449  007D6C  2A04               	incf	memcmp@s2+1,f,c
   450  007D6E                     l896:
   451  007D6E  0605               	decf	memcmp@n,f,c
   452  007D70  A0D8               	btfss	status,0,c
   453  007D72  0606               	decf	memcmp@n+1,f,c
   454  007D74  2805               	incf	memcmp@n,w,c
   455  007D76  E1D3               	bnz	l888
   456  007D78  2806               	incf	memcmp@n+1,w,c
   457  007D7A  A4D8               	btfss	status,2,c
   458  007D7C  D7D0               	goto	l888
   459  007D7E  0E00               	movlw	0
   460  007D80  6E02               	movwf	?_memcmp+1,c
   461  007D82  0E00               	movlw	0
   462  007D84  6E01               	movwf	?_memcmp,c
   463  007D86  0012               	return	
   464  007D88                     __end_of_memcmp:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postinc1	equ	0xFE6
   473                           postdec1	equ	0xFE5
   474                           fsr1h	equ	0xFE2
   475                           fsr1l	equ	0xFE1
   476                           indf2	equ	0xFDF
   477                           postinc2	equ	0xFDE
   478                           fsr2h	equ	0xFDA
   479                           fsr2l	equ	0xFD9
   480                           status	equ	0xFD8
   481                           
   482 ;; *************** function _get_key *****************
   483 ;; Defined at:
   484 ;;		line 46 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  key             2    6[COMRAM] int 
   489 ;; Return value:  Size  Location     Type
   490 ;;                  2    4[COMRAM] int 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   498 ;;      Params:         2       0       0       0       0       0       0
   499 ;;      Locals:         2       0       0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0       0       0
   501 ;;      Totals:         4       0       0       0       0       0       0
   502 ;;Total ram usage:        4 bytes
   503 ;; Hardware stack levels used:    1
   504 ;; Hardware stack levels required when called:    1
   505 ;; This function calls:
   506 ;;		_key_pressed
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text2
   513  007CC4                     __ptext2:
   514                           	opt stack 0
   515  007CC4                     _get_key:
   516                           	opt stack 29
   517                           
   518                           ;main.c: 47: int key=-1;
   519                           
   520                           ;incstack = 0
   521  007CC4  6807               	setf	get_key@key,c
   522  007CC6  6808               	setf	get_key@key+1,c
   523                           
   524                           ;main.c: 48: while(key==-1)key=key_pressed();
   525  007CC8  D006               	goto	l884
   526  007CCA                     l882:
   527  007CCA  EC1C  F03F         	call	_key_pressed	;wreg free
   528  007CCE  C001  F007         	movff	?_key_pressed,get_key@key
   529  007CD2  C002  F008         	movff	?_key_pressed+1,get_key@key+1
   530  007CD6                     l884:
   531  007CD6  2807               	incf	get_key@key,w,c
   532  007CD8  E103               	bnz	u320
   533  007CDA  2808               	incf	get_key@key+1,w,c
   534  007CDC  B4D8               	btfsc	status,2,c
   535  007CDE  D7F5               	goto	l882
   536  007CE0                     u320:
   537                           
   538                           ;main.c: 49: return key;
   539  007CE0  C007  F005         	movff	get_key@key,?_get_key
   540  007CE4  C008  F006         	movff	get_key@key+1,?_get_key+1
   541  007CE8  0012               	return		;funcret
   542  007CEA                     __end_of_get_key:
   543                           	opt stack 0
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           postinc0	equ	0xFEE
   549                           wreg	equ	0xFE8
   550                           postinc1	equ	0xFE6
   551                           postdec1	equ	0xFE5
   552                           fsr1h	equ	0xFE2
   553                           fsr1l	equ	0xFE1
   554                           indf2	equ	0xFDF
   555                           postinc2	equ	0xFDE
   556                           fsr2h	equ	0xFDA
   557                           fsr2l	equ	0xFD9
   558                           status	equ	0xFD8
   559                           
   560 ;; *************** function _key_pressed *****************
   561 ;; Defined at:
   562 ;;		line 21 in file "main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  2    0[COMRAM] int 
   569 ;; Registers used:
   570 ;;		wreg, status,2
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   576 ;;      Params:         2       0       0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0       0       0
   578 ;;      Temps:          2       0       0       0       0       0       0
   579 ;;      Totals:         4       0       0       0       0       0       0
   580 ;;Total ram usage:        4 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; This function calls:
   583 ;;		Nothing
   584 ;; This function is called by:
   585 ;;		_get_key
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text3
   590  007E38                     __ptext3:
   591                           	opt stack 0
   592  007E38                     _key_pressed:
   593                           	opt stack 29
   594                           
   595                           ;main.c: 23: PORTDbits.RD3=0;PORTDbits.RD2=1;PORTDbits.RD1=1;
   596                           
   597                           ;incstack = 0
   598  007E38  9683               	bcf	3971,3,c	;volatile
   599  007E3A  8483               	bsf	3971,2,c	;volatile
   600  007E3C  8283               	bsf	3971,1,c	;volatile
   601                           
   602                           ;main.c: 24: if(PORTCbits.RC2==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           1;}
   603  007E3E  B482               	btfsc	3970,2,c	;volatile
   604  007E40  D010               	goto	l21
   605  007E42  0E02               	movlw	2
   606  007E44  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   607  007E46  0E45               	movlw	69
   608  007E48  6E03               	movwf	??_key_pressed& (0+255),c
   609  007E4A  0EAA               	movlw	170
   610  007E4C                     u407:
   611  007E4C  2EE8               	decfsz	wreg,f,c
   612  007E4E  D7FE               	bra	u407
   613  007E50  2E03               	decfsz	??_key_pressed& (0+255),f,c
   614  007E52  D7FC               	bra	u407
   615  007E54  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   616  007E56  D7FA               	bra	u407
   617  007E58  0E00               	movlw	0
   618  007E5A  6E02               	movwf	?_key_pressed+1,c
   619  007E5C  0E01               	movlw	1
   620  007E5E  6E01               	movwf	?_key_pressed,c
   621  007E60  0012               	return	
   622  007E62                     l21:
   623                           
   624                           ;main.c: 25: if(PORTCbits.RC3==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           4;}
   625  007E62  B682               	btfsc	3970,3,c	;volatile
   626  007E64  D010               	goto	l23
   627  007E66  0E02               	movlw	2
   628  007E68  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   629  007E6A  0E45               	movlw	69
   630  007E6C  6E03               	movwf	??_key_pressed& (0+255),c
   631  007E6E  0EAA               	movlw	170
   632  007E70                     u417:
   633  007E70  2EE8               	decfsz	wreg,f,c
   634  007E72  D7FE               	bra	u417
   635  007E74  2E03               	decfsz	??_key_pressed& (0+255),f,c
   636  007E76  D7FC               	bra	u417
   637  007E78  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   638  007E7A  D7FA               	bra	u417
   639  007E7C  0E00               	movlw	0
   640  007E7E  6E02               	movwf	?_key_pressed+1,c
   641  007E80  0E04               	movlw	4
   642  007E82  6E01               	movwf	?_key_pressed,c
   643  007E84  0012               	return	
   644  007E86                     l23:
   645                           
   646                           ;main.c: 26: if(PORTCbits.RC4==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           7;}
   647  007E86  B882               	btfsc	3970,4,c	;volatile
   648  007E88  D010               	goto	l24
   649  007E8A  0E02               	movlw	2
   650  007E8C  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   651  007E8E  0E45               	movlw	69
   652  007E90  6E03               	movwf	??_key_pressed& (0+255),c
   653  007E92  0EAA               	movlw	170
   654  007E94                     u427:
   655  007E94  2EE8               	decfsz	wreg,f,c
   656  007E96  D7FE               	bra	u427
   657  007E98  2E03               	decfsz	??_key_pressed& (0+255),f,c
   658  007E9A  D7FC               	bra	u427
   659  007E9C  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   660  007E9E  D7FA               	bra	u427
   661  007EA0  0E00               	movlw	0
   662  007EA2  6E02               	movwf	?_key_pressed+1,c
   663  007EA4  0E07               	movlw	7
   664  007EA6  6E01               	movwf	?_key_pressed,c
   665  007EA8  0012               	return	
   666  007EAA                     l24:
   667                           
   668                           ;main.c: 27: if(PORTCbits.RC5==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           11;}
   669  007EAA  BA82               	btfsc	3970,5,c	;volatile
   670  007EAC  D010               	goto	l25
   671  007EAE  0E02               	movlw	2
   672  007EB0  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   673  007EB2  0E45               	movlw	69
   674  007EB4  6E03               	movwf	??_key_pressed& (0+255),c
   675  007EB6  0EAA               	movlw	170
   676  007EB8                     u437:
   677  007EB8  2EE8               	decfsz	wreg,f,c
   678  007EBA  D7FE               	bra	u437
   679  007EBC  2E03               	decfsz	??_key_pressed& (0+255),f,c
   680  007EBE  D7FC               	bra	u437
   681  007EC0  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   682  007EC2  D7FA               	bra	u437
   683  007EC4  0E00               	movlw	0
   684  007EC6  6E02               	movwf	?_key_pressed+1,c
   685  007EC8  0E0B               	movlw	11
   686  007ECA  6E01               	movwf	?_key_pressed,c
   687  007ECC  0012               	return	
   688  007ECE                     l25:
   689                           
   690                           ;main.c: 30: PORTDbits.RD3=1;PORTDbits.RD2=0;PORTDbits.RD1=1;
   691  007ECE  8683               	bsf	3971,3,c	;volatile
   692  007ED0  9483               	bcf	3971,2,c	;volatile
   693  007ED2  8283               	bsf	3971,1,c	;volatile
   694                           
   695                           ;main.c: 31: if(PORTCbits.RC2==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           2;}
   696  007ED4  B482               	btfsc	3970,2,c	;volatile
   697  007ED6  D010               	goto	l26
   698  007ED8  0E02               	movlw	2
   699  007EDA  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   700  007EDC  0E45               	movlw	69
   701  007EDE  6E03               	movwf	??_key_pressed& (0+255),c
   702  007EE0  0EAA               	movlw	170
   703  007EE2                     u447:
   704  007EE2  2EE8               	decfsz	wreg,f,c
   705  007EE4  D7FE               	bra	u447
   706  007EE6  2E03               	decfsz	??_key_pressed& (0+255),f,c
   707  007EE8  D7FC               	bra	u447
   708  007EEA  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   709  007EEC  D7FA               	bra	u447
   710  007EEE  0E00               	movlw	0
   711  007EF0  6E02               	movwf	?_key_pressed+1,c
   712  007EF2  0E02               	movlw	2
   713  007EF4  6E01               	movwf	?_key_pressed,c
   714  007EF6  0012               	return	
   715  007EF8                     l26:
   716                           
   717                           ;main.c: 32: if(PORTCbits.RC3==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           5;}
   718  007EF8  B682               	btfsc	3970,3,c	;volatile
   719  007EFA  D010               	goto	l27
   720  007EFC  0E02               	movlw	2
   721  007EFE  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   722  007F00  0E45               	movlw	69
   723  007F02  6E03               	movwf	??_key_pressed& (0+255),c
   724  007F04  0EAA               	movlw	170
   725  007F06                     u457:
   726  007F06  2EE8               	decfsz	wreg,f,c
   727  007F08  D7FE               	bra	u457
   728  007F0A  2E03               	decfsz	??_key_pressed& (0+255),f,c
   729  007F0C  D7FC               	bra	u457
   730  007F0E  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   731  007F10  D7FA               	bra	u457
   732  007F12  0E00               	movlw	0
   733  007F14  6E02               	movwf	?_key_pressed+1,c
   734  007F16  0E05               	movlw	5
   735  007F18  6E01               	movwf	?_key_pressed,c
   736  007F1A  0012               	return	
   737  007F1C                     l27:
   738                           
   739                           ;main.c: 33: if(PORTCbits.RC4==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           8;}
   740  007F1C  B882               	btfsc	3970,4,c	;volatile
   741  007F1E  D010               	goto	l28
   742  007F20  0E02               	movlw	2
   743  007F22  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   744  007F24  0E45               	movlw	69
   745  007F26  6E03               	movwf	??_key_pressed& (0+255),c
   746  007F28  0EAA               	movlw	170
   747  007F2A                     u467:
   748  007F2A  2EE8               	decfsz	wreg,f,c
   749  007F2C  D7FE               	bra	u467
   750  007F2E  2E03               	decfsz	??_key_pressed& (0+255),f,c
   751  007F30  D7FC               	bra	u467
   752  007F32  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   753  007F34  D7FA               	bra	u467
   754  007F36  0E00               	movlw	0
   755  007F38  6E02               	movwf	?_key_pressed+1,c
   756  007F3A  0E08               	movlw	8
   757  007F3C  6E01               	movwf	?_key_pressed,c
   758  007F3E  0012               	return	
   759  007F40                     l28:
   760                           
   761                           ;main.c: 34: if(PORTCbits.RC5==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           0;}
   762  007F40  BA82               	btfsc	3970,5,c	;volatile
   763  007F42  D010               	goto	l29
   764  007F44  0E02               	movlw	2
   765  007F46  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   766  007F48  0E45               	movlw	69
   767  007F4A  6E03               	movwf	??_key_pressed& (0+255),c
   768  007F4C  0EAA               	movlw	170
   769  007F4E                     u477:
   770  007F4E  2EE8               	decfsz	wreg,f,c
   771  007F50  D7FE               	bra	u477
   772  007F52  2E03               	decfsz	??_key_pressed& (0+255),f,c
   773  007F54  D7FC               	bra	u477
   774  007F56  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   775  007F58  D7FA               	bra	u477
   776  007F5A  0E00               	movlw	0
   777  007F5C  6E02               	movwf	?_key_pressed+1,c
   778  007F5E  0E00               	movlw	0
   779  007F60  6E01               	movwf	?_key_pressed,c
   780  007F62  0012               	return	
   781  007F64                     l29:
   782                           
   783                           ;main.c: 37: PORTDbits.RD3=1;PORTDbits.RD2=1;PORTDbits.RD1=0;
   784  007F64  8683               	bsf	3971,3,c	;volatile
   785  007F66  8483               	bsf	3971,2,c	;volatile
   786  007F68  9283               	bcf	3971,1,c	;volatile
   787                           
   788                           ;main.c: 38: if(PORTCbits.RC2==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           3;}
   789  007F6A  B482               	btfsc	3970,2,c	;volatile
   790  007F6C  D010               	goto	l30
   791  007F6E  0E02               	movlw	2
   792  007F70  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   793  007F72  0E45               	movlw	69
   794  007F74  6E03               	movwf	??_key_pressed& (0+255),c
   795  007F76  0EAA               	movlw	170
   796  007F78                     u487:
   797  007F78  2EE8               	decfsz	wreg,f,c
   798  007F7A  D7FE               	bra	u487
   799  007F7C  2E03               	decfsz	??_key_pressed& (0+255),f,c
   800  007F7E  D7FC               	bra	u487
   801  007F80  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   802  007F82  D7FA               	bra	u487
   803  007F84  0E00               	movlw	0
   804  007F86  6E02               	movwf	?_key_pressed+1,c
   805  007F88  0E03               	movlw	3
   806  007F8A  6E01               	movwf	?_key_pressed,c
   807  007F8C  0012               	return	
   808  007F8E                     l30:
   809                           
   810                           ;main.c: 39: if(PORTCbits.RC3==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           6;}
   811  007F8E  B682               	btfsc	3970,3,c	;volatile
   812  007F90  D010               	goto	l31
   813  007F92  0E02               	movlw	2
   814  007F94  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   815  007F96  0E45               	movlw	69
   816  007F98  6E03               	movwf	??_key_pressed& (0+255),c
   817  007F9A  0EAA               	movlw	170
   818  007F9C                     u497:
   819  007F9C  2EE8               	decfsz	wreg,f,c
   820  007F9E  D7FE               	bra	u497
   821  007FA0  2E03               	decfsz	??_key_pressed& (0+255),f,c
   822  007FA2  D7FC               	bra	u497
   823  007FA4  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   824  007FA6  D7FA               	bra	u497
   825  007FA8  0E00               	movlw	0
   826  007FAA  6E02               	movwf	?_key_pressed+1,c
   827  007FAC  0E06               	movlw	6
   828  007FAE  6E01               	movwf	?_key_pressed,c
   829  007FB0  0012               	return	
   830  007FB2                     l31:
   831                           
   832                           ;main.c: 40: if(PORTCbits.RC4==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           9;}
   833  007FB2  B882               	btfsc	3970,4,c	;volatile
   834  007FB4  D010               	goto	l32
   835  007FB6  0E02               	movlw	2
   836  007FB8  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   837  007FBA  0E45               	movlw	69
   838  007FBC  6E03               	movwf	??_key_pressed& (0+255),c
   839  007FBE  0EAA               	movlw	170
   840  007FC0                     u507:
   841  007FC0  2EE8               	decfsz	wreg,f,c
   842  007FC2  D7FE               	bra	u507
   843  007FC4  2E03               	decfsz	??_key_pressed& (0+255),f,c
   844  007FC6  D7FC               	bra	u507
   845  007FC8  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   846  007FCA  D7FA               	bra	u507
   847  007FCC  0E00               	movlw	0
   848  007FCE  6E02               	movwf	?_key_pressed+1,c
   849  007FD0  0E09               	movlw	9
   850  007FD2  6E01               	movwf	?_key_pressed,c
   851  007FD4  0012               	return	
   852  007FD6                     l32:
   853                           
   854                           ;main.c: 41: if(PORTCbits.RC5==0){_delay((unsigned long)((250)*(4000000/4000.0)));return
      +                           12;}
   855  007FD6  BA82               	btfsc	3970,5,c	;volatile
   856  007FD8  D010               	goto	l33
   857  007FDA  0E02               	movlw	2
   858  007FDC  6E04               	movwf	(??_key_pressed+1)& (0+255),c
   859  007FDE  0E45               	movlw	69
   860  007FE0  6E03               	movwf	??_key_pressed& (0+255),c
   861  007FE2  0EAA               	movlw	170
   862  007FE4                     u517:
   863  007FE4  2EE8               	decfsz	wreg,f,c
   864  007FE6  D7FE               	bra	u517
   865  007FE8  2E03               	decfsz	??_key_pressed& (0+255),f,c
   866  007FEA  D7FC               	bra	u517
   867  007FEC  2E04               	decfsz	(??_key_pressed+1)& (0+255),f,c
   868  007FEE  D7FA               	bra	u517
   869  007FF0  0E00               	movlw	0
   870  007FF2  6E02               	movwf	?_key_pressed+1,c
   871  007FF4  0E0C               	movlw	12
   872  007FF6  6E01               	movwf	?_key_pressed,c
   873  007FF8  0012               	return	
   874  007FFA                     l33:
   875                           
   876                           ;main.c: 44: return -1;
   877  007FFA  6801               	setf	?_key_pressed,c
   878  007FFC  6802               	setf	?_key_pressed+1,c
   879  007FFE  0012               	return		;funcret
   880  008000                     __end_of_key_pressed:
   881                           	opt stack 0
   882  0000                     tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postinc1	equ	0xFE6
   889                           postdec1	equ	0xFE5
   890                           fsr1h	equ	0xFE2
   891                           fsr1l	equ	0xFE1
   892                           indf2	equ	0xFDF
   893                           postinc2	equ	0xFDE
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           postinc1	equ	0xFE6
   904                           postdec1	equ	0xFE5
   905                           fsr1h	equ	0xFE2
   906                           fsr1l	equ	0xFE1
   907                           indf2	equ	0xFDF
   908                           postinc2	equ	0xFDE
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913                           	psect	rparam
   914  0000                     tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postinc1	equ	0xFE6
   921                           postdec1	equ	0xFE5
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           indf2	equ	0xFDF
   925                           postinc2	equ	0xFDE
   926                           fsr2h	equ	0xFDA
   927                           fsr2l	equ	0xFD9
   928                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memcmp@s2	PTR const void  size(2) Largest target is 4
		 -> password(COMRAM[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 4
		 -> entry(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_memcmp
    _get_key->_key_pressed

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     417
                                              9 COMRAM     4     4      0
                            _get_key
                             _memcmp
 ---------------------------------------------------------------------------------
 (1) _memcmp                                               9     3      6     304
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_key                                              4     2      2      46
                                              4 COMRAM     4     2      2
                        _key_pressed
 ---------------------------------------------------------------------------------
 (2) _key_pressed                                          4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _get_key
     _key_pressed
   _memcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D      17       1       24.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      17      15        0.0%
DATA                 0      0      17       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Aug 06 18:47:08 2020

                      _i 000E                       l21 7E62                       l30 7F8E  
                     l31 7FB2                       l23 7E86                       l32 7FD6  
                     l24 7EAA                       l33 7FFA                       l25 7ECE  
                     l26 7EF8                       l27 7F1C                       l28 7F40  
                     l29 7F64                      l910 7DA6                      l906 7D8E  
                    l924 7DFC                      l932 7E12                      l934 7E1C  
                    l936 7E22                      l882 7CCA                      l884 7CD6  
                    l894 7D66                      l888 7D1E                      l896 7D6E  
                    u320 7CE0                      u350 7D9E                      u407 7E4C  
                    u417 7E70                      u507 7FC0                      u427 7E94  
                    u517 7FE4                      u437 7EB8                      u447 7EE2  
                    u457 7F06                      u467 7F2A                      u477 7F4E  
                    u397 7DEC                      u487 7F78                      u497 7F9C  
                    wreg 000FE8                     _main 7D88                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     start 0000             ___param_bank 000000  
                  ?_main 0001                    _TRISC 000F94                    _TRISD 000F95  
           ?_key_pressed 0001          __end_of_get_key 7CEA                    _entry 0010  
                  tablat 000FF5                    status 000FD8          __initialization 7CEA  
           __end_of_main 7E38                   ??_main 000A            __activetblptr 000000  
                 _memcmp 7D1C                ??_get_key 0007             __pdataCOMRAM 0014  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 7D16            ___rparam_used 000001  
         __pcstackCOMRAM 0001     __size_of_key_pressed 01C8                  ?_memcmp 0001  
                __Hparam 0000                  __Lparam 0000                  __pcinit 7CEA  
        __size_of_memcmp 006C                  __ramtop 0600                  __ptext0 7D88  
                __ptext1 7D1C                  __ptext2 7CC4                  __ptext3 7E38  
                _get_key 7CC4                  main@key 000C     end_of_initialization 7D16  
                memcmp@n 0005                  postdec1 000FE5                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE                _PORTCbits 000F82  
              _PORTDbits 000F83               get_key@key 0007            __pidataCOMRAM 7CC0  
         __end_of_memcmp 7D88      start_initialization 7CEA                 ??_memcmp 0007  
          ??_key_pressed 0003              __pbssCOMRAM 000E                 ?_get_key 0005  
    __end_of_key_pressed 8000                copy_data0 7CFE                 __Hrparam 0000  
               __Lrparam 0000         __size_of_get_key 0026              _key_pressed 7E38  
          __size_of_main 00B0                 _password 0014                 memcmp@s1 0001  
               memcmp@s2 0003  

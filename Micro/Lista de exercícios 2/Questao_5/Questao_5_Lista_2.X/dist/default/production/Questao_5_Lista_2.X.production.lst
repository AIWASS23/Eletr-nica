

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 03 20:48:05 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F45K20 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISB	set	3987
    75  0000                     _T2CONbits	set	4042
    76  0000                     _TRISCbits	set	3988
    77  0000                     _CCP1CONbits	set	4029
    78  0000                     _PR2	set	4043
    79  0000                     _CCPR1L	set	4030
    80  0000                     _PORTBbits	set	3969
    81  0000                     _PORTD	set	3971
    82  0000                     _PORTCbits	set	3970
    83  0000                     _INTCON3bits	set	4080
    84  0000                     _INTCONbits	set	4082
    85                           
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt stack 0
    89  000600  00                 	db	0
    90  000601                     STR_1:
    91  000601  00                 	db	0
    92                           
    93                           ; #config settings
    94  000602  00                 	db	0	; dummy byte at the end
    95  0000                     
    96                           	psect	cinit
    97  001068                     __pcinit:
    98                           	opt stack 0
    99  001068                     start_initialization:
   100                           	opt stack 0
   101  001068                     __initialization:
   102                           	opt stack 0
   103                           
   104                           ; Clear objects allocated to BANK0 (99 bytes)
   105  001068  EE00  F060         	lfsr	0,__pbssBANK0
   106  00106C  0E63               	movlw	99
   107  00106E                     clear_0:
   108  00106E  6AEE               	clrf	postinc0,c
   109  001070  06E8               	decf	wreg,f,c
   110  001072  E1FD               	bnz	clear_0
   111                           
   112                           ; Clear objects allocated to COMRAM (1 bytes)
   113  001074  6A35               	clrf	__pbssCOMRAM& (0+255),c
   114  001076                     end_of_initialization:
   115                           	opt stack 0
   116  001076                     __end_of__initialization:
   117                           	opt stack 0
   118  001076  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   119  001078  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   120  00107A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   121  00107C  6EF8               	movwf	tblptru,c
   122  00107E  0100               	movlb	0
   123  001080  EFFF  F006         	goto	_main	;jump to C main() function
   124                           tblptru	equ	0xFF8
   125                           postinc0	equ	0xFEE
   126                           wreg	equ	0xFE8
   127                           
   128                           	psect	bssCOMRAM
   129  000035                     __pbssCOMRAM:
   130                           	opt stack 0
   131  000035                     _command:
   132                           	opt stack 0
   133  000035                     	ds	1
   134                           tblptru	equ	0xFF8
   135                           postinc0	equ	0xFEE
   136                           wreg	equ	0xFE8
   137                           
   138                           	psect	bssBANK0
   139  000060                     __pbssBANK0:
   140                           	opt stack 0
   141  000060                     _angle:
   142                           	opt stack 0
   143  000060                     	ds	99
   144                           tblptru	equ	0xFF8
   145                           postinc0	equ	0xFEE
   146                           wreg	equ	0xFE8
   147                           
   148                           	psect	cstackBANK0
   149  0000C3                     __pcstackBANK0:
   150                           	opt stack 0
   151  0000C3                     Delay_LCD@i:
   152                           	opt stack 0
   153  0000C3                     Delay_inicializacao_LCD@i:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x0
   157  0000C3                     	ds	2
   158  0000C5                     Envia_Comando_Lcd@comando:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0x2
   162  0000C5                     	ds	1
   163  0000C6                     tblptru	equ	0xFF8
   164                           postinc0	equ	0xFEE
   165                           wreg	equ	0xFE8
   166                           
   167                           ; 1 bytes @ 0x3
   168                           
   169                           	psect	cstackCOMRAM
   170  000001                     __pcstackCOMRAM:
   171                           	opt stack 0
   172  000001                     ??_isdigit:
   173  000001                     ?_strlen:
   174                           	opt stack 0
   175  000001                     ?___wmul:
   176                           	opt stack 0
   177  000001                     ?___ftpack:
   178                           	opt stack 0
   179  000001                     ?___fttol:
   180                           	opt stack 0
   181  000001                     getChar@col:
   182                           	opt stack 0
   183  000001                     ___wmul@multiplier:
   184                           	opt stack 0
   185  000001                     strcpy@to:
   186                           	opt stack 0
   187  000001                     strlen@s:
   188                           	opt stack 0
   189  000001                     i2Delay_LCD@i:
   190                           	opt stack 0
   191  000001                     ___ftpack@arg:
   192                           	opt stack 0
   193  000001                     ___fttol@f1:
   194                           	opt stack 0
   195                           
   196                           ; 3 bytes @ 0x0
   197  000001                     	ds	1
   198  000002                     _isdigit$779:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x1
   202  000002                     	ds	1
   203  000003                     ??_getChar:
   204  000003                     ??_strlen:
   205  000003                     Envia_Dado_Lcd@dado:
   206                           	opt stack 0
   207  000003                     isdigit@c:
   208                           	opt stack 0
   209  000003                     i2Envia_Comando_Lcd@comando:
   210                           	opt stack 0
   211  000003                     ___wmul@multiplicand:
   212                           	opt stack 0
   213  000003                     strcpy@from:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x2
   217  000003                     	ds	1
   218  000004                     ___ftpack@exp:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x3
   222  000004                     	ds	1
   223  000005                     ??___fttol:
   224  000005                     ___ftpack@sign:
   225                           	opt stack 0
   226  000005                     ___wmul@product:
   227                           	opt stack 0
   228  000005                     strcpy@cp:
   229                           	opt stack 0
   230  000005                     strlen@cp:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x4
   234  000005                     	ds	1
   235  000006                     ??___ftpack:
   236                           
   237                           ; 1 bytes @ 0x5
   238  000006                     	ds	1
   239  000007                     ?_atoi:
   240                           	opt stack 0
   241  000007                     append@s:
   242                           	opt stack 0
   243  000007                     atoi@s:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x6
   247  000007                     	ds	2
   248  000009                     ??_atoi:
   249  000009                     ?___ftmul:
   250                           	opt stack 0
   251  000009                     append@c:
   252                           	opt stack 0
   253  000009                     ___ftmul@f1:
   254                           	opt stack 0
   255                           
   256                           ; 3 bytes @ 0x8
   257  000009                     	ds	1
   258  00000A                     ??_append:
   259  00000A                     ___fttol@sign1:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x9
   263  00000A                     	ds	1
   264  00000B                     atoi@sign:
   265                           	opt stack 0
   266  00000B                     ___fttol@lval:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0xA
   270  00000B                     	ds	1
   271  00000C                     append@len:
   272                           	opt stack 0
   273  00000C                     atoi@a:
   274                           	opt stack 0
   275  00000C                     ___ftmul@f2:
   276                           	opt stack 0
   277                           
   278                           ; 3 bytes @ 0xB
   279  00000C                     	ds	2
   280  00000E                     ?___awtoft:
   281                           	opt stack 0
   282  00000E                     ___awtoft@c:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xD
   286  00000E                     	ds	1
   287  00000F                     ??___ftmul:
   288  00000F                     ___fttol@exp1:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0xE
   292  00000F                     	ds	2
   293  000011                     ___awtoft@sign:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x10
   297  000011                     	ds	1
   298  000012                     ___ftmul@exp:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x11
   302  000012                     	ds	1
   303  000013                     ___ftmul@f3_as_product:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x12
   307  000013                     	ds	3
   308  000016                     ___ftmul@cntr:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x15
   312  000016                     	ds	1
   313  000017                     ___ftmul@sign:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x16
   317  000017                     	ds	1
   318  000018                     ?___ftadd:
   319                           	opt stack 0
   320  000018                     ___ftadd@f1:
   321                           	opt stack 0
   322                           
   323                           ; 3 bytes @ 0x17
   324  000018                     	ds	3
   325  00001B                     ___ftadd@f2:
   326                           	opt stack 0
   327                           
   328                           ; 3 bytes @ 0x1A
   329  00001B                     	ds	3
   330  00001E                     ??___ftadd:
   331                           
   332                           ; 1 bytes @ 0x1D
   333  00001E                     	ds	3
   334  000021                     ___ftadd@sign:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x20
   338  000021                     	ds	1
   339  000022                     ___ftadd@exp2:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x21
   343  000022                     	ds	1
   344  000023                     ___ftadd@exp1:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x22
   348  000023                     	ds	1
   349  000024                     writeToLCD@angle_servo:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0x23
   353  000024                     	ds	3
   354  000027                     ??_ISR:
   355                           
   356                           ; 1 bytes @ 0x26
   357  000027                     	ds	14
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362 ;;
   363 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   364 ;;
   365 ;; *************** function _main *****************
   366 ;; Defined at:
   367 ;;		line 302 in file "main.c"
   368 ;; Parameters:    Size  Location     Type
   369 ;;		None
   370 ;; Auto vars:     Size  Location     Type
   371 ;;		None
   372 ;; Return value:  Size  Location     Type
   373 ;;                  1    wreg      void 
   374 ;; Registers used:
   375 ;;		wreg, status,2, status,0, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : 0/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   381 ;;      Params:         0       0       0       0       0       0       0
   382 ;;      Locals:         0       0       0       0       0       0       0
   383 ;;      Temps:          0       0       0       0       0       0       0
   384 ;;      Totals:         0       0       0       0       0       0       0
   385 ;;Total ram usage:        0 bytes
   386 ;; Hardware stack levels required when called:    7
   387 ;; This function calls:
   388 ;;		_Inicializa_Lcd
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           	psect	text0
   395  000DFE                     __ptext0:
   396                           	opt stack 0
   397  000DFE                     _main:
   398                           	opt stack 24
   399                           
   400                           ;main.c: 304: PR2=255;
   401                           
   402                           ;incstack = 0
   403  000DFE  68CB               	setf	4043,c	;volatile
   404                           
   405                           ;main.c: 305: CCPR1L=18;
   406  000E00  0E12               	movlw	18
   407  000E02  6EBE               	movwf	4030,c	;volatile
   408                           
   409                           ;main.c: 306: CCP1CONbits.DC1B1=0;
   410  000E04  9ABD               	bcf	4029,5,c	;volatile
   411                           
   412                           ;main.c: 307: CCP1CONbits.DC1B0=0;
   413  000E06  98BD               	bcf	4029,4,c	;volatile
   414                           
   415                           ;main.c: 309: TRISCbits.RC2=0;
   416  000E08  9494               	bcf	3988,2,c	;volatile
   417                           
   418                           ;main.c: 311: T2CONbits.T2CKPS1=1;
   419  000E0A  82CA               	bsf	4042,1,c	;volatile
   420                           
   421                           ;main.c: 312: T2CONbits.T2CKPS0=1;
   422  000E0C  80CA               	bsf	4042,0,c	;volatile
   423                           
   424                           ;main.c: 314: T2CONbits.TMR2ON=1;
   425  000E0E  84CA               	bsf	4042,2,c	;volatile
   426                           
   427                           ;main.c: 316: CCP1CONbits.CCP1M3=1;
   428  000E10  86BD               	bsf	4029,3,c	;volatile
   429                           
   430                           ;main.c: 317: CCP1CONbits.CCP1M2=1;
   431  000E12  84BD               	bsf	4029,2,c	;volatile
   432                           
   433                           ;main.c: 318: CCP1CONbits.CCP1M1=0;
   434  000E14  92BD               	bcf	4029,1,c	;volatile
   435                           
   436                           ;main.c: 319: CCP1CONbits.CCP1M0=0;
   437  000E16  90BD               	bcf	4029,0,c	;volatile
   438                           
   439                           ;main.c: 321: TRISB=0b10000111;
   440  000E18  0E87               	movlw	135
   441  000E1A  6E93               	movwf	3987,c	;volatile
   442                           
   443                           ;main.c: 322: TRISC=0b11111000;
   444  000E1C  0EF8               	movlw	248
   445  000E1E  6E94               	movwf	3988,c	;volatile
   446                           
   447                           ;main.c: 323: TRISD=0b00000000;
   448  000E20  0E00               	movlw	0
   449  000E22  6E95               	movwf	3989,c	;volatile
   450                           
   451                           ;main.c: 325: Inicializa_Lcd ();
   452  000E24  EC07  F008         	call	_Inicializa_Lcd	;wreg free
   453                           
   454                           ;main.c: 328: INTCON2bits.RBPU=0;
   455  000E28  9EF1               	bcf	intcon2,7,c	;volatile
   456                           
   457                           ;main.c: 331: INTCONbits.INT0IF=0;
   458  000E2A  92F2               	bcf	intcon,1,c	;volatile
   459                           
   460                           ;main.c: 332: INTCONbits.INT0IE=1;
   461  000E2C  88F2               	bsf	intcon,4,c	;volatile
   462                           
   463                           ;main.c: 335: INTCON3bits.INT1IF=0;
   464  000E2E  90F0               	bcf	intcon3,0,c	;volatile
   465                           
   466                           ;main.c: 336: INTCON3bits.INT1IE=1;
   467  000E30  86F0               	bsf	intcon3,3,c	;volatile
   468                           
   469                           ;main.c: 339: INTCON3bits.INT2IF=0;
   470  000E32  92F0               	bcf	intcon3,1,c	;volatile
   471                           
   472                           ;main.c: 340: INTCON3bits.INT2IE=1;
   473  000E34  88F0               	bsf	intcon3,4,c	;volatile
   474                           
   475                           ;main.c: 343: INTCON2bits.INTEDG0=0;
   476  000E36  9CF1               	bcf	intcon2,6,c	;volatile
   477                           
   478                           ;main.c: 344: INTCON2bits.INTEDG1=0;
   479  000E38  9AF1               	bcf	intcon2,5,c	;volatile
   480                           
   481                           ;main.c: 345: INTCON2bits.INTEDG2=0;
   482  000E3A  98F1               	bcf	intcon2,4,c	;volatile
   483                           
   484                           ;main.c: 347: INTCONbits.GIE=1;
   485  000E3C  8EF2               	bsf	intcon,7,c	;volatile
   486                           
   487                           ;main.c: 349: PORTBbits.RB3=0;
   488  000E3E  9681               	bcf	3969,3,c	;volatile
   489                           
   490                           ;main.c: 350: PORTBbits.RB4=0;
   491  000E40  9881               	bcf	3969,4,c	;volatile
   492                           
   493                           ;main.c: 351: PORTBbits.RB5=0;
   494  000E42  9A81               	bcf	3969,5,c	;volatile
   495                           
   496                           ;main.c: 352: PORTBbits.RB6=0;
   497  000E44  9C81               	bcf	3969,6,c	;volatile
   498  000E46                     l109:
   499                           
   500                           ;main.c: 355: {
   501  000E46  D7FF               	goto	l109
   502  000E48                     __end_of_main:
   503                           	opt stack 0
   504                           tblptru	equ	0xFF8
   505                           intcon	equ	0xFF2
   506                           intcon2	equ	0xFF1
   507                           intcon3	equ	0xFF0
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           
   511 ;; *************** function _Inicializa_Lcd *****************
   512 ;; Defined at:
   513 ;;		line 94 in file "main.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   527 ;;      Params:         0       0       0       0       0       0       0
   528 ;;      Locals:         0       0       0       0       0       0       0
   529 ;;      Temps:          0       0       0       0       0       0       0
   530 ;;      Totals:         0       0       0       0       0       0       0
   531 ;;Total ram usage:        0 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    6
   534 ;; This function calls:
   535 ;;		_Delay_inicializacao_LCD
   536 ;;		_Envia_Comando_Lcd
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text1
   543  00100E                     __ptext1:
   544                           	opt stack 0
   545  00100E                     _Inicializa_Lcd:
   546                           	opt stack 24
   547                           
   548                           ;main.c: 96: Delay_inicializacao_LCD ();
   549                           
   550                           ;incstack = 0
   551  00100E  ECBE  F007         	call	_Delay_inicializacao_LCD	;wreg free
   552                           
   553                           ;main.c: 97: Envia_Comando_Lcd (0b000000010);
   554  001012  0E02               	movlw	2
   555  001014  EC96  F007         	call	_Envia_Comando_Lcd
   556                           
   557                           ;main.c: 98: Envia_Comando_Lcd (0b001001000);
   558  001018  0E48               	movlw	72
   559  00101A  EC96  F007         	call	_Envia_Comando_Lcd
   560                           
   561                           ;main.c: 99: Envia_Comando_Lcd (0b000001110);
   562  00101E  0E0E               	movlw	14
   563  001020  EC96  F007         	call	_Envia_Comando_Lcd
   564                           
   565                           ;main.c: 100: Envia_Comando_Lcd (0b000000001);
   566  001024  0E01               	movlw	1
   567  001026  EC96  F007         	call	_Envia_Comando_Lcd
   568  00102A  0012               	return		;funcret
   569  00102C                     __end_of_Inicializa_Lcd:
   570                           	opt stack 0
   571                           tblptru	equ	0xFF8
   572                           intcon	equ	0xFF2
   573                           intcon2	equ	0xFF1
   574                           intcon3	equ	0xFF0
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           
   578 ;; *************** function _Envia_Comando_Lcd *****************
   579 ;; Defined at:
   580 ;;		line 60 in file "main.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  comando         1    wreg     unsigned char 
   583 ;; Auto vars:     Size  Location     Type
   584 ;;  comando         1    2[BANK0 ] unsigned char 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  1    wreg      void 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   594 ;;      Params:         0       0       0       0       0       0       0
   595 ;;      Locals:         0       1       0       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0       0       0
   597 ;;      Totals:         0       1       0       0       0       0       0
   598 ;;Total ram usage:        1 bytes
   599 ;; Hardware stack levels used:    1
   600 ;; Hardware stack levels required when called:    5
   601 ;; This function calls:
   602 ;;		_Delay_LCD
   603 ;; This function is called by:
   604 ;;		_Inicializa_Lcd
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text2
   609  000F2C                     __ptext2:
   610                           	opt stack 0
   611  000F2C                     _Envia_Comando_Lcd:
   612                           	opt stack 24
   613                           
   614                           ;incstack = 0
   615                           ;Envia_Comando_Lcd@comando stored from wreg
   616  000F2C  0100               	movlb	0	; () banked
   617  000F2E  6FC5               	movwf	Envia_Comando_Lcd@comando& (0+255),b
   618                           
   619                           ;main.c: 62: PORTCbits.RC1=0;
   620  000F30  9282               	bcf	3970,1,c	;volatile
   621                           
   622                           ;main.c: 63: PORTCbits.RC0=0;
   623  000F32  9082               	bcf	3970,0,c	;volatile
   624                           
   625                           ;main.c: 65: PORTCbits.RC1=1;
   626  000F34  8282               	bsf	3970,1,c	;volatile
   627                           
   628                           ;main.c: 66: PORTD=comando;
   629  000F36  C0C5  FF83         	movff	Envia_Comando_Lcd@comando,3971	;volatile
   630                           
   631                           ;main.c: 67: PORTCbits.RC1=0;
   632  000F3A  9282               	bcf	3970,1,c	;volatile
   633                           
   634                           ;main.c: 69: PORTCbits.RC1=1;
   635  000F3C  8282               	bsf	3970,1,c	;volatile
   636                           
   637                           ;main.c: 70: comando = comando<<4;
   638  000F3E  0100               	movlb	0	; () banked
   639  000F40  39C5               	swapf	Envia_Comando_Lcd@comando& (0+255),w,b
   640  000F42  0BF0               	andlw	240
   641  000F44  0100               	movlb	0	; () banked
   642  000F46  6FC5               	movwf	Envia_Comando_Lcd@comando& (0+255),b
   643                           
   644                           ; BSR set to: 0
   645                           ;main.c: 71: PORTD = comando;
   646  000F48  C0C5  FF83         	movff	Envia_Comando_Lcd@comando,3971	;volatile
   647                           
   648                           ; BSR set to: 0
   649                           ;main.c: 72: PORTCbits.RC1=0;
   650  000F4C  9282               	bcf	3970,1,c	;volatile
   651                           
   652                           ; BSR set to: 0
   653                           ;main.c: 74: Delay_LCD();
   654  000F4E  ECAA  F007         	call	_Delay_LCD	;wreg free
   655  000F52  0012               	return		;funcret
   656  000F54                     __end_of_Envia_Comando_Lcd:
   657                           	opt stack 0
   658                           tblptru	equ	0xFF8
   659                           intcon	equ	0xFF2
   660                           intcon2	equ	0xFF1
   661                           intcon3	equ	0xFF0
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;; *************** function _Delay_LCD *****************
   666 ;; Defined at:
   667 ;;		line 55 in file "main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  i               2    0[BANK0 ] int 
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, status,2, status,0
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   681 ;;      Params:         0       0       0       0       0       0       0
   682 ;;      Locals:         0       2       0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0       0       0
   684 ;;      Totals:         0       2       0       0       0       0       0
   685 ;;Total ram usage:        2 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    4
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_Envia_Comando_Lcd
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text3
   696  000F54                     __ptext3:
   697                           	opt stack 0
   698  000F54                     _Delay_LCD:
   699                           	opt stack 24
   700                           
   701                           ;main.c: 57: int i;
   702                           ;main.c: 58: for (i=0;i<400;i++){}
   703                           
   704                           ;incstack = 0
   705  000F54  0E00               	movlw	0
   706  000F56  0100               	movlb	0	; () banked
   707  000F58  6FC4               	movwf	(Delay_LCD@i+1)& (0+255),b
   708  000F5A  0E00               	movlw	0
   709  000F5C  6FC3               	movwf	Delay_LCD@i& (0+255),b
   710  000F5E                     l1472:
   711                           
   712                           ; BSR set to: 0
   713  000F5E  0100               	movlb	0	; () banked
   714  000F60  BFC4               	btfsc	(Delay_LCD@i+1)& (0+255),7,b
   715  000F62  D008               	goto	l1476
   716  000F64  0E90               	movlw	144
   717  000F66  0100               	movlb	0	; () banked
   718  000F68  5DC3               	subwf	Delay_LCD@i& (0+255),w,b
   719  000F6A  0E01               	movlw	1
   720  000F6C  0100               	movlb	0	; () banked
   721  000F6E  59C4               	subwfb	(Delay_LCD@i+1)& (0+255),w,b
   722  000F70  B0D8               	btfsc	status,0,c
   723  000F72  0012               	return	
   724  000F74                     l1476:
   725                           
   726                           ; BSR set to: 0
   727  000F74  0100               	movlb	0	; () banked
   728  000F76  4BC3               	infsnz	Delay_LCD@i& (0+255),f,b
   729  000F78  2BC4               	incf	(Delay_LCD@i+1)& (0+255),f,b
   730  000F7A  D7F1               	goto	l1472
   731  000F7C                     __end_of_Delay_LCD:
   732                           	opt stack 0
   733                           tblptru	equ	0xFF8
   734                           intcon	equ	0xFF2
   735                           intcon2	equ	0xFF1
   736                           intcon3	equ	0xFF0
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _Delay_inicializacao_LCD *****************
   742 ;; Defined at:
   743 ;;		line 115 in file "main.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  i               2    0[BANK0 ] int 
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   757 ;;      Params:         0       0       0       0       0       0       0
   758 ;;      Locals:         0       2       0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0
   760 ;;      Totals:         0       2       0       0       0       0       0
   761 ;;Total ram usage:        2 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    4
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_Inicializa_Lcd
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text4
   772  000F7C                     __ptext4:
   773                           	opt stack 0
   774  000F7C                     _Delay_inicializacao_LCD:
   775                           	opt stack 25
   776                           
   777                           ;main.c: 117: int i;
   778                           ;main.c: 118: for (i=0;i<4000;i++) {}
   779                           
   780                           ; BSR set to: 0
   781                           ;incstack = 0
   782  000F7C  0E00               	movlw	0
   783  000F7E  0100               	movlb	0	; () banked
   784  000F80  6FC4               	movwf	(Delay_inicializacao_LCD@i+1)& (0+255),b
   785  000F82  0E00               	movlw	0
   786  000F84  6FC3               	movwf	Delay_inicializacao_LCD@i& (0+255),b
   787  000F86                     l1588:
   788                           
   789                           ; BSR set to: 0
   790  000F86  0100               	movlb	0	; () banked
   791  000F88  BFC4               	btfsc	(Delay_inicializacao_LCD@i+1)& (0+255),7,b
   792  000F8A  D008               	goto	l1592
   793  000F8C  0EA0               	movlw	160
   794  000F8E  0100               	movlb	0	; () banked
   795  000F90  5DC3               	subwf	Delay_inicializacao_LCD@i& (0+255),w,b
   796  000F92  0E0F               	movlw	15
   797  000F94  0100               	movlb	0	; () banked
   798  000F96  59C4               	subwfb	(Delay_inicializacao_LCD@i+1)& (0+255),w,b
   799  000F98  B0D8               	btfsc	status,0,c
   800  000F9A  0012               	return	
   801  000F9C                     l1592:
   802                           
   803                           ; BSR set to: 0
   804  000F9C  0100               	movlb	0	; () banked
   805  000F9E  4BC3               	infsnz	Delay_inicializacao_LCD@i& (0+255),f,b
   806  000FA0  2BC4               	incf	(Delay_inicializacao_LCD@i+1)& (0+255),f,b
   807  000FA2  D7F1               	goto	l1588
   808  000FA4                     __end_of_Delay_inicializacao_LCD:
   809                           	opt stack 0
   810                           tblptru	equ	0xFF8
   811                           intcon	equ	0xFF2
   812                           intcon2	equ	0xFF1
   813                           intcon3	equ	0xFF0
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           status	equ	0xFD8
   817                           
   818 ;; *************** function _ISR *****************
   819 ;; Defined at:
   820 ;;		line 35 in file "main.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   834 ;;      Params:         0       0       0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0       0       0
   836 ;;      Temps:         14       0       0       0       0       0       0
   837 ;;      Totals:        14       0       0       0       0       0       0
   838 ;;Total ram usage:       14 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    3
   841 ;; This function calls:
   842 ;;		_getChar
   843 ;;		_writeToLCD
   844 ;; This function is called by:
   845 ;;		Interrupt level 2
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	intcode
   850  000008                     __pintcode:
   851                           	opt stack 0
   852  000008                     _ISR:
   853                           	opt stack 24
   854                           
   855                           ; BSR set to: 0
   856                           ;incstack = 0
   857  000008  8236               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   858  00000A  CFFA F027          	movff	pclath,??_ISR
   859  00000E  CFFB F028          	movff	pclatu,??_ISR+1
   860  000012  CFE9 F029          	movff	fsr0l,??_ISR+2
   861  000016  CFEA F02A          	movff	fsr0h,??_ISR+3
   862  00001A  CFE1 F02B          	movff	fsr1l,??_ISR+4
   863  00001E  CFE2 F02C          	movff	fsr1h,??_ISR+5
   864  000022  CFD9 F02D          	movff	fsr2l,??_ISR+6
   865  000026  CFDA F02E          	movff	fsr2h,??_ISR+7
   866  00002A  CFF3 F02F          	movff	prodl,??_ISR+8
   867  00002E  CFF4 F030          	movff	prodh,??_ISR+9
   868  000032  CFF6 F031          	movff	tblptrl,??_ISR+10
   869  000036  CFF7 F032          	movff	tblptrh,??_ISR+11
   870  00003A  CFF8 F033          	movff	tblptru,??_ISR+12
   871  00003E  CFF5 F034          	movff	tablat,??_ISR+13
   872                           
   873                           ;main.c: 36: if(INTCONbits.INT0IF==1){
   874  000042  A2F2               	btfss	intcon,1,c	;volatile
   875  000044  D008               	goto	i2l2100
   876                           
   877                           ;main.c: 37: INTCONbits.INT0IF=0;
   878  000046  92F2               	bcf	intcon,1,c	;volatile
   879                           
   880                           ;main.c: 38: command=getChar(1);
   881  000048  0E00               	movlw	0
   882  00004A  6E02               	movwf	getChar@col+1,c
   883  00004C  0E01               	movlw	1
   884  00004E  6E01               	movwf	getChar@col,c
   885  000050  EC02  F003         	call	_getChar	;wreg free
   886  000054  6E35               	movwf	_command,c
   887  000056                     i2l2100:
   888                           
   889                           ;main.c: 39: }
   890                           ;main.c: 41: if(INTCON3bits.INT1IF==1){
   891  000056  A0F0               	btfss	intcon3,0,c	;volatile
   892  000058  D008               	goto	i2l2106
   893                           
   894                           ;main.c: 42: INTCON3bits.INT1IF=0;
   895  00005A  90F0               	bcf	intcon3,0,c	;volatile
   896                           
   897                           ;main.c: 43: command=getChar(2);
   898  00005C  0E00               	movlw	0
   899  00005E  6E02               	movwf	getChar@col+1,c
   900  000060  0E02               	movlw	2
   901  000062  6E01               	movwf	getChar@col,c
   902  000064  EC02  F003         	call	_getChar	;wreg free
   903  000068  6E35               	movwf	_command,c
   904  00006A                     i2l2106:
   905                           
   906                           ;main.c: 44: }
   907                           ;main.c: 46: if(INTCON3bits.INT2IF==1){
   908  00006A  A2F0               	btfss	intcon3,1,c	;volatile
   909  00006C  D008               	goto	i2l2112
   910                           
   911                           ;main.c: 47: INTCON3bits.INT2IF=0;
   912  00006E  92F0               	bcf	intcon3,1,c	;volatile
   913                           
   914                           ;main.c: 48: command=getChar(3);
   915  000070  0E00               	movlw	0
   916  000072  6E02               	movwf	getChar@col+1,c
   917  000074  0E03               	movlw	3
   918  000076  6E01               	movwf	getChar@col,c
   919  000078  EC02  F003         	call	_getChar	;wreg free
   920  00007C  6E35               	movwf	_command,c
   921  00007E                     i2l2112:
   922                           
   923                           ;main.c: 49: }
   924                           ;main.c: 51: writeToLCD();
   925  00007E  ECD1  F005         	call	_writeToLCD	;wreg free
   926  000082  C034  FFF5         	movff	??_ISR+13,tablat
   927  000086  C033  FFF8         	movff	??_ISR+12,tblptru
   928  00008A  C032  FFF7         	movff	??_ISR+11,tblptrh
   929  00008E  C031  FFF6         	movff	??_ISR+10,tblptrl
   930  000092  C030  FFF4         	movff	??_ISR+9,prodh
   931  000096  C02F  FFF3         	movff	??_ISR+8,prodl
   932  00009A  C02E  FFDA         	movff	??_ISR+7,fsr2h
   933  00009E  C02D  FFD9         	movff	??_ISR+6,fsr2l
   934  0000A2  C02C  FFE2         	movff	??_ISR+5,fsr1h
   935  0000A6  C02B  FFE1         	movff	??_ISR+4,fsr1l
   936  0000AA  C02A  FFEA         	movff	??_ISR+3,fsr0h
   937  0000AE  C029  FFE9         	movff	??_ISR+2,fsr0l
   938  0000B2  C028  FFFB         	movff	??_ISR+1,pclatu
   939  0000B6  C027  FFFA         	movff	??_ISR,pclath
   940  0000BA  9236               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   941  0000BC  0011               	retfie		f
   942  0000BE                     __end_of_ISR:
   943                           	opt stack 0
   944                           pclatu	equ	0xFFB
   945                           pclath	equ	0xFFA
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           prodh	equ	0xFF4
   951                           prodl	equ	0xFF3
   952                           intcon	equ	0xFF2
   953                           intcon2	equ	0xFF1
   954                           intcon3	equ	0xFF0
   955                           postinc0	equ	0xFEE
   956                           fsr0h	equ	0xFEA
   957                           fsr0l	equ	0xFE9
   958                           wreg	equ	0xFE8
   959                           fsr1h	equ	0xFE2
   960                           fsr1l	equ	0xFE1
   961                           fsr2h	equ	0xFDA
   962                           fsr2l	equ	0xFD9
   963                           status	equ	0xFD8
   964                           
   965 ;; *************** function _writeToLCD *****************
   966 ;; Defined at:
   967 ;;		line 284 in file "main.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  angle_servo     3   35[COMRAM] float 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   981 ;;      Params:         0       0       0       0       0       0       0
   982 ;;      Locals:         3       0       0       0       0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0
   984 ;;      Totals:         3       0       0       0       0       0       0
   985 ;;Total ram usage:        3 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    2
   988 ;; This function calls:
   989 ;;		_Envia_Dado_Lcd
   990 ;;		___awtoft
   991 ;;		___ftadd
   992 ;;		___ftmul
   993 ;;		___fttol
   994 ;;		_append
   995 ;;		_atoi
   996 ;;		_strcpy
   997 ;;		i2_Envia_Comando_Lcd
   998 ;; This function is called by:
   999 ;;		_ISR
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text6
  1004  000BA2                     __ptext6:
  1005                           	opt stack 0
  1006  000BA2                     _writeToLCD:
  1007                           	opt stack 24
  1008                           
  1009                           ;main.c: 285: float angle_servo=0;
  1010                           
  1011                           ;incstack = 0
  1012  000BA2  0E00               	movlw	0
  1013  000BA4  6E24               	movwf	writeToLCD@angle_servo,c
  1014  000BA6  0E00               	movlw	0
  1015  000BA8  6E25               	movwf	writeToLCD@angle_servo+1,c
  1016  000BAA  0E00               	movlw	0
  1017  000BAC  6E26               	movwf	writeToLCD@angle_servo+2,c
  1018                           
  1019                           ;main.c: 286: if(command!='*' && command!='#'){
  1020  000BAE  0E2A               	movlw	42
  1021  000BB0  1835               	xorwf	_command,w,c
  1022  000BB2  B4D8               	btfsc	status,2,c
  1023  000BB4  D00F               	goto	i2l2076
  1024  000BB6  0E23               	movlw	35
  1025  000BB8  1835               	xorwf	_command,w,c
  1026  000BBA  B4D8               	btfsc	status,2,c
  1027  000BBC  D00B               	goto	i2l2076
  1028                           
  1029                           ;main.c: 287: Envia_Dado_Lcd(command);
  1030  000BBE  5035               	movf	_command,w,c
  1031  000BC0  ECF6  F007         	call	_Envia_Dado_Lcd
  1032                           
  1033                           ;main.c: 288: append(angle,command);
  1034  000BC4  0E60               	movlw	low _angle
  1035  000BC6  6E07               	movwf	append@s,c
  1036  000BC8  0E00               	movlw	high _angle
  1037  000BCA  6E08               	movwf	append@s+1,c
  1038  000BCC  C035  F009         	movff	_command,append@c
  1039  000BD0  EC24  F007         	call	_append	;wreg free
  1040  000BD4                     i2l2076:
  1041                           
  1042                           ;main.c: 289: }
  1043                           ;main.c: 290: if(command=='#')Envia_Comando_Lcd(1);
  1044  000BD4  0E23               	movlw	35
  1045  000BD6  1835               	xorwf	_command,w,c
  1046  000BD8  A4D8               	btfss	status,2,c
  1047  000BDA  D003               	goto	i2l2080
  1048  000BDC  0E01               	movlw	1
  1049  000BDE  ECE5  F007         	call	i2_Envia_Comando_Lcd
  1050  000BE2                     i2l2080:
  1051                           
  1052                           ;main.c: 291: if(command=='*'){
  1053  000BE2  0E2A               	movlw	42
  1054  000BE4  1835               	xorwf	_command,w,c
  1055  000BE6  A4D8               	btfss	status,2,c
  1056  000BE8  0012               	return	
  1057                           
  1058                           ;main.c: 294: angle_servo=(atoi(angle));
  1059  000BEA  0E60               	movlw	low _angle
  1060  000BEC  6E07               	movwf	atoi@s,c
  1061  000BEE  0E00               	movlw	high _angle
  1062  000BF0  6E08               	movwf	atoi@s+1,c
  1063  000BF2  EC41  F006         	call	_atoi	;wreg free
  1064  000BF6  C007  F00E         	movff	?_atoi,___awtoft@c
  1065  000BFA  C008  F00F         	movff	?_atoi+1,___awtoft@c+1
  1066  000BFE  EC62  F007         	call	___awtoft	;wreg free
  1067  000C02  C00E  F024         	movff	?___awtoft,writeToLCD@angle_servo
  1068  000C06  C00F  F025         	movff	?___awtoft+1,writeToLCD@angle_servo+1
  1069  000C0A  C010  F026         	movff	?___awtoft+2,writeToLCD@angle_servo+2
  1070                           
  1071                           ;main.c: 295: angle_servo=angle_servo*0.078+12.000;
  1072  000C0E  0EBE               	movlw	190
  1073  000C10  6E0C               	movwf	___ftmul@f2,c
  1074  000C12  0E9F               	movlw	159
  1075  000C14  6E0D               	movwf	___ftmul@f2+1,c
  1076  000C16  0E3D               	movlw	61
  1077  000C18  6E0E               	movwf	___ftmul@f2+2,c
  1078  000C1A  C024  F009         	movff	writeToLCD@angle_servo,___ftmul@f1
  1079  000C1E  C025  F00A         	movff	writeToLCD@angle_servo+1,___ftmul@f1+1
  1080  000C22  C026  F00B         	movff	writeToLCD@angle_servo+2,___ftmul@f1+2
  1081  000C26  EC57  F005         	call	___ftmul	;wreg free
  1082  000C2A  C009  F018         	movff	?___ftmul,___ftadd@f1
  1083  000C2E  C00A  F019         	movff	?___ftmul+1,___ftadd@f1+1
  1084  000C32  C00B  F01A         	movff	?___ftmul+2,___ftadd@f1+2
  1085  000C36  0E00               	movlw	0
  1086  000C38  6E1B               	movwf	___ftadd@f2,c
  1087  000C3A  0E40               	movlw	64
  1088  000C3C  6E1C               	movwf	___ftadd@f2+1,c
  1089  000C3E  0E41               	movlw	65
  1090  000C40  6E1D               	movwf	___ftadd@f2+2,c
  1091  000C42  EC07  F004         	call	___ftadd	;wreg free
  1092  000C46  C018  F024         	movff	?___ftadd,writeToLCD@angle_servo
  1093  000C4A  C019  F025         	movff	?___ftadd+1,writeToLCD@angle_servo+1
  1094  000C4E  C01A  F026         	movff	?___ftadd+2,writeToLCD@angle_servo+2
  1095                           
  1096                           ;main.c: 296: CCPR1L=angle_servo;
  1097  000C52  C024  F001         	movff	writeToLCD@angle_servo,___fttol@f1
  1098  000C56  C025  F002         	movff	writeToLCD@angle_servo+1,___fttol@f1+1
  1099  000C5A  C026  F003         	movff	writeToLCD@angle_servo+2,___fttol@f1+2
  1100  000C5E  ECDD  F004         	call	___fttol	;wreg free
  1101  000C62  5001               	movf	?___fttol,w,c
  1102  000C64  6EBE               	movwf	4030,c	;volatile
  1103                           
  1104                           ;main.c: 297: Envia_Comando_Lcd(1);
  1105  000C66  0E01               	movlw	1
  1106  000C68  ECE5  F007         	call	i2_Envia_Comando_Lcd
  1107                           
  1108                           ;main.c: 298: strcpy(angle,"");
  1109  000C6C  0E60               	movlw	low _angle
  1110  000C6E  6E01               	movwf	strcpy@to,c
  1111  000C70  0E00               	movlw	high _angle
  1112  000C72  6E02               	movwf	strcpy@to+1,c
  1113  000C74  0E01               	movlw	low STR_1
  1114  000C76  6E03               	movwf	strcpy@from,c
  1115  000C78  0E06               	movlw	high STR_1
  1116  000C7A  6E04               	movwf	strcpy@from+1,c
  1117  000C7C  EC7E  F007         	call	_strcpy	;wreg free
  1118  000C80  0012               	return	
  1119  000C82                     __end_of_writeToLCD:
  1120                           	opt stack 0
  1121                           pclatu	equ	0xFFB
  1122                           pclath	equ	0xFFA
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           intcon2	equ	0xFF1
  1131                           intcon3	equ	0xFF0
  1132                           postinc0	equ	0xFEE
  1133                           fsr0h	equ	0xFEA
  1134                           fsr0l	equ	0xFE9
  1135                           wreg	equ	0xFE8
  1136                           fsr1h	equ	0xFE2
  1137                           fsr1l	equ	0xFE1
  1138                           fsr2h	equ	0xFDA
  1139                           fsr2l	equ	0xFD9
  1140                           status	equ	0xFD8
  1141                           
  1142 ;; *************** function i2_Envia_Comando_Lcd *****************
  1143 ;; Defined at:
  1144 ;;		line 60 in file "main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  comando         1    wreg     unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  comando         1    2[COMRAM] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, status,2, status,0, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1158 ;;      Params:         0       0       0       0       0       0       0
  1159 ;;      Locals:         1       0       0       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0
  1161 ;;      Totals:         1       0       0       0       0       0       0
  1162 ;;Total ram usage:        1 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    1
  1165 ;; This function calls:
  1166 ;;		i2_Delay_LCD
  1167 ;; This function is called by:
  1168 ;;		_writeToLCD
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text7
  1173  000FCA                     __ptext7:
  1174                           	opt stack 0
  1175  000FCA                     i2_Envia_Comando_Lcd:
  1176                           	opt stack 24
  1177                           
  1178                           ;incstack = 0
  1179                           ;i2Envia_Comando_Lcd@comando stored from wreg
  1180  000FCA  6E03               	movwf	i2Envia_Comando_Lcd@comando,c
  1181                           
  1182                           ;main.c: 62: PORTCbits.RC1=0;
  1183  000FCC  9282               	bcf	3970,1,c	;volatile
  1184                           
  1185                           ;main.c: 63: PORTCbits.RC0=0;
  1186  000FCE  9082               	bcf	3970,0,c	;volatile
  1187                           
  1188                           ;main.c: 65: PORTCbits.RC1=1;
  1189  000FD0  8282               	bsf	3970,1,c	;volatile
  1190                           
  1191                           ;main.c: 66: PORTD=comando;
  1192  000FD2  C003  FF83         	movff	i2Envia_Comando_Lcd@comando,3971	;volatile
  1193                           
  1194                           ;main.c: 67: PORTCbits.RC1=0;
  1195  000FD6  9282               	bcf	3970,1,c	;volatile
  1196                           
  1197                           ;main.c: 69: PORTCbits.RC1=1;
  1198  000FD8  8282               	bsf	3970,1,c	;volatile
  1199                           
  1200                           ;main.c: 70: comando = comando<<4;
  1201  000FDA  3803               	swapf	i2Envia_Comando_Lcd@comando,w,c
  1202  000FDC  0BF0               	andlw	240
  1203  000FDE  6E03               	movwf	i2Envia_Comando_Lcd@comando,c
  1204                           
  1205                           ;main.c: 71: PORTD = comando;
  1206  000FE0  C003  FF83         	movff	i2Envia_Comando_Lcd@comando,3971	;volatile
  1207                           
  1208                           ;main.c: 72: PORTCbits.RC1=0;
  1209  000FE4  9282               	bcf	3970,1,c	;volatile
  1210                           
  1211                           ;main.c: 74: Delay_LCD();
  1212  000FE6  EC25  F008         	call	i2_Delay_LCD	;wreg free
  1213  000FEA  0012               	return		;funcret
  1214  000FEC                     __end_ofi2_Envia_Comando_Lcd:
  1215                           	opt stack 0
  1216                           pclatu	equ	0xFFB
  1217                           pclath	equ	0xFFA
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           prodh	equ	0xFF4
  1223                           prodl	equ	0xFF3
  1224                           intcon	equ	0xFF2
  1225                           intcon2	equ	0xFF1
  1226                           intcon3	equ	0xFF0
  1227                           postinc0	equ	0xFEE
  1228                           fsr0h	equ	0xFEA
  1229                           fsr0l	equ	0xFE9
  1230                           wreg	equ	0xFE8
  1231                           fsr1h	equ	0xFE2
  1232                           fsr1l	equ	0xFE1
  1233                           fsr2h	equ	0xFDA
  1234                           fsr2l	equ	0xFD9
  1235                           status	equ	0xFD8
  1236                           
  1237 ;; *************** function _strcpy *****************
  1238 ;; Defined at:
  1239 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\strcpy.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  to              2    0[COMRAM] PTR unsigned char 
  1242 ;;		 -> angle(99), 
  1243 ;;  from            2    2[COMRAM] PTR const unsigned char 
  1244 ;;		 -> STR_1(1), 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  cp              2    4[COMRAM] PTR unsigned char 
  1247 ;;		 -> angle(99), 
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  2    0[COMRAM] PTR unsigned char 
  1250 ;; Registers used:
  1251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1257 ;;      Params:         4       0       0       0       0       0       0
  1258 ;;      Locals:         2       0       0       0       0       0       0
  1259 ;;      Temps:          0       0       0       0       0       0       0
  1260 ;;      Totals:         6       0       0       0       0       0       0
  1261 ;;Total ram usage:        6 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; This function calls:
  1264 ;;		Nothing
  1265 ;; This function is called by:
  1266 ;;		_writeToLCD
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text8
  1271  000EFC                     __ptext8:
  1272                           	opt stack 0
  1273  000EFC                     _strcpy:
  1274                           	opt stack 25
  1275                           
  1276                           ;incstack = 0
  1277  000EFC  C001  F005         	movff	strcpy@to,strcpy@cp
  1278  000F00  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  1279  000F04  D004               	goto	i2l1634
  1280  000F06                     i2l1632:
  1281  000F06  4A05               	infsnz	strcpy@cp,f,c
  1282  000F08  2A06               	incf	strcpy@cp+1,f,c
  1283  000F0A  4A03               	infsnz	strcpy@from,f,c
  1284  000F0C  2A04               	incf	strcpy@from+1,f,c
  1285  000F0E                     i2l1634:
  1286  000F0E  C003  FFF6         	movff	strcpy@from,tblptrl
  1287  000F12  C004  FFF7         	movff	strcpy@from+1,tblptrh
  1288  000F16                     	if	0	;tblptru may be non-zero
  1289  000F16                     	endif
  1290  000F16                     	if	0	;tblptru may be non-zero
  1291  000F16                     	endif
  1292  000F16  C005  FFD9         	movff	strcpy@cp,fsr2l
  1293  000F1A  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  1294  000F1E  0008               	tblrd		*
  1295  000F20  CFF5 FFDF          	movff	tablat,indf2
  1296  000F24  50DF               	movf	indf2,w,c
  1297  000F26  B4D8               	btfsc	status,2,c
  1298  000F28  0012               	return	
  1299  000F2A  D7ED               	goto	i2l1632
  1300  000F2C                     __end_of_strcpy:
  1301                           	opt stack 0
  1302                           pclatu	equ	0xFFB
  1303                           pclath	equ	0xFFA
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           prodh	equ	0xFF4
  1309                           prodl	equ	0xFF3
  1310                           intcon	equ	0xFF2
  1311                           intcon2	equ	0xFF1
  1312                           intcon3	equ	0xFF0
  1313                           postinc0	equ	0xFEE
  1314                           fsr0h	equ	0xFEA
  1315                           fsr0l	equ	0xFE9
  1316                           wreg	equ	0xFE8
  1317                           fsr1h	equ	0xFE2
  1318                           fsr1l	equ	0xFE1
  1319                           indf2	equ	0xFDF
  1320                           fsr2h	equ	0xFDA
  1321                           fsr2l	equ	0xFD9
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _atoi *****************
  1325 ;; Defined at:
  1326 ;;		line 5 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\atoi.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1329 ;;		 -> angle(99), 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  a               2   11[COMRAM] int 
  1332 ;;  sign            1   10[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  2    6[COMRAM] int 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1342 ;;      Params:         2       0       0       0       0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0
  1344 ;;      Temps:          2       0       0       0       0       0       0
  1345 ;;      Totals:         7       0       0       0       0       0       0
  1346 ;;Total ram usage:        7 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    1
  1349 ;; This function calls:
  1350 ;;		___wmul
  1351 ;;		_isdigit
  1352 ;; This function is called by:
  1353 ;;		_writeToLCD
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text9
  1358  000C82                     __ptext9:
  1359                           	opt stack 0
  1360  000C82                     _atoi:
  1361                           	opt stack 24
  1362                           
  1363                           ;incstack = 0
  1364  000C82  D002               	goto	i2l1606
  1365  000C84                     i2l1604:
  1366  000C84  4A07               	infsnz	atoi@s,f,c
  1367  000C86  2A08               	incf	atoi@s+1,f,c
  1368  000C88                     i2l1606:
  1369  000C88  C007  FFD9         	movff	atoi@s,fsr2l
  1370  000C8C  C008  FFDA         	movff	atoi@s+1,fsr2h
  1371  000C90  0E20               	movlw	32
  1372  000C92  18DE               	xorwf	postinc2,w,c
  1373  000C94  B4D8               	btfsc	status,2,c
  1374  000C96  D7F6               	goto	i2l1604
  1375  000C98  C007  FFD9         	movff	atoi@s,fsr2l
  1376  000C9C  C008  FFDA         	movff	atoi@s+1,fsr2h
  1377  000CA0  0E09               	movlw	9
  1378  000CA2  18DE               	xorwf	postinc2,w,c
  1379  000CA4  B4D8               	btfsc	status,2,c
  1380  000CA6  D7EE               	goto	i2l1604
  1381  000CA8  0E00               	movlw	0
  1382  000CAA  6E0D               	movwf	atoi@a+1,c
  1383  000CAC  0E00               	movlw	0
  1384  000CAE  6E0C               	movwf	atoi@a,c
  1385  000CB0  0E00               	movlw	0
  1386  000CB2  6E0B               	movwf	atoi@sign,c
  1387  000CB4  C007  FFD9         	movff	atoi@s,fsr2l
  1388  000CB8  C008  FFDA         	movff	atoi@s+1,fsr2h
  1389  000CBC  0E2D               	movlw	45
  1390  000CBE  18DE               	xorwf	postinc2,w,c
  1391  000CC0  A4D8               	btfss	status,2,c
  1392  000CC2  D002               	goto	i2l1616
  1393  000CC4  2A0B               	incf	atoi@sign,f,c
  1394  000CC6  D024               	goto	i2l1622
  1395  000CC8                     i2l1616:
  1396  000CC8  C007  FFD9         	movff	atoi@s,fsr2l
  1397  000CCC  C008  FFDA         	movff	atoi@s+1,fsr2h
  1398  000CD0  0E2B               	movlw	43
  1399  000CD2  18DE               	xorwf	postinc2,w,c
  1400  000CD4  A4D8               	btfss	status,2,c
  1401  000CD6  D01E               	goto	i2l1624
  1402  000CD8  D01B               	goto	i2l1622
  1403  000CDA                     i2l1620:
  1404  000CDA  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1405  000CDE  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1406  000CE2  0E00               	movlw	0
  1407  000CE4  6E04               	movwf	___wmul@multiplicand+1,c
  1408  000CE6  0E0A               	movlw	10
  1409  000CE8  6E03               	movwf	___wmul@multiplicand,c
  1410  000CEA  ECD2  F007         	call	___wmul	;wreg free
  1411  000CEE  C007  FFD9         	movff	atoi@s,fsr2l
  1412  000CF2  C008  FFDA         	movff	atoi@s+1,fsr2h
  1413  000CF6  50DF               	movf	indf2,w,c
  1414  000CF8  6E09               	movwf	??_atoi& (0+255),c
  1415  000CFA  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1416  000CFC  5001               	movf	?___wmul,w,c
  1417  000CFE  2609               	addwf	??_atoi,f,c
  1418  000D00  5002               	movf	?___wmul+1,w,c
  1419  000D02  220A               	addwfc	??_atoi+1,f,c
  1420  000D04  0ED0               	movlw	208
  1421  000D06  2409               	addwf	??_atoi,w,c
  1422  000D08  6E0C               	movwf	atoi@a,c
  1423  000D0A  0EFF               	movlw	255
  1424  000D0C  200A               	addwfc	??_atoi+1,w,c
  1425  000D0E  6E0D               	movwf	atoi@a+1,c
  1426  000D10                     i2l1622:
  1427  000D10  4A07               	infsnz	atoi@s,f,c
  1428  000D12  2A08               	incf	atoi@s+1,f,c
  1429  000D14                     i2l1624:
  1430  000D14  C007  FFD9         	movff	atoi@s,fsr2l
  1431  000D18  C008  FFDA         	movff	atoi@s+1,fsr2h
  1432  000D1C  50DF               	movf	indf2,w,c
  1433  000D1E  EC16  F008         	call	_isdigit
  1434  000D22  B0D8               	btfsc	status,0,c
  1435  000D24  D7DA               	goto	i2l1620
  1436  000D26  500B               	movf	atoi@sign,w,c
  1437  000D28  B4D8               	btfsc	status,2,c
  1438  000D2A  D00D               	goto	i2l285
  1439  000D2C  C00C  F009         	movff	atoi@a,??_atoi
  1440  000D30  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1441  000D34  1E09               	comf	??_atoi,f,c
  1442  000D36  1E0A               	comf	??_atoi+1,f,c
  1443  000D38  4A09               	infsnz	??_atoi,f,c
  1444  000D3A  2A0A               	incf	??_atoi+1,f,c
  1445  000D3C  C009  F007         	movff	??_atoi,?_atoi
  1446  000D40  C00A  F008         	movff	??_atoi+1,?_atoi+1
  1447  000D44  0012               	return	
  1448  000D46                     i2l285:
  1449  000D46  C00C  F007         	movff	atoi@a,?_atoi
  1450  000D4A  C00D  F008         	movff	atoi@a+1,?_atoi+1
  1451  000D4E  0012               	return		;funcret
  1452  000D50                     __end_of_atoi:
  1453                           	opt stack 0
  1454                           pclatu	equ	0xFFB
  1455                           pclath	equ	0xFFA
  1456                           tblptru	equ	0xFF8
  1457                           tblptrh	equ	0xFF7
  1458                           tblptrl	equ	0xFF6
  1459                           tablat	equ	0xFF5
  1460                           prodh	equ	0xFF4
  1461                           prodl	equ	0xFF3
  1462                           intcon	equ	0xFF2
  1463                           intcon2	equ	0xFF1
  1464                           intcon3	equ	0xFF0
  1465                           postinc0	equ	0xFEE
  1466                           fsr0h	equ	0xFEA
  1467                           fsr0l	equ	0xFE9
  1468                           wreg	equ	0xFE8
  1469                           fsr1h	equ	0xFE2
  1470                           fsr1l	equ	0xFE1
  1471                           indf2	equ	0xFDF
  1472                           postinc2	equ	0xFDE
  1473                           fsr2h	equ	0xFDA
  1474                           fsr2l	equ	0xFD9
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _isdigit *****************
  1478 ;; Defined at:
  1479 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;  c               1    wreg     unsigned char 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  c               1    2[COMRAM] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;		None               void
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1493 ;;      Params:         0       0       0       0       0       0       0
  1494 ;;      Locals:         2       0       0       0       0       0       0
  1495 ;;      Temps:          1       0       0       0       0       0       0
  1496 ;;      Totals:         3       0       0       0       0       0       0
  1497 ;;Total ram usage:        3 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_atoi
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text10
  1507  00102C                     __ptext10:
  1508                           	opt stack 0
  1509  00102C                     _isdigit:
  1510                           	opt stack 24
  1511                           
  1512                           ;incstack = 0
  1513                           ;isdigit@c stored from wreg
  1514  00102C  6E03               	movwf	isdigit@c,c
  1515  00102E  0E00               	movlw	0
  1516  001030  6E02               	movwf	_isdigit$779,c
  1517  001032  0E3A               	movlw	58
  1518  001034  6003               	cpfslt	isdigit@c,c
  1519  001036  D005               	goto	i2l1540
  1520  001038  0E2F               	movlw	47
  1521  00103A  6403               	cpfsgt	isdigit@c,c
  1522  00103C  D002               	goto	i2l1540
  1523  00103E  0E01               	movlw	1
  1524  001040  6E02               	movwf	_isdigit$779,c
  1525  001042                     i2l1540:
  1526  001042  C002  F001         	movff	_isdigit$779,??_isdigit
  1527  001046  3001               	rrcf	??_isdigit,w,c
  1528  001048  0012               	return	
  1529  00104A                     __end_of_isdigit:
  1530                           	opt stack 0
  1531                           pclatu	equ	0xFFB
  1532                           pclath	equ	0xFFA
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           prodh	equ	0xFF4
  1538                           prodl	equ	0xFF3
  1539                           intcon	equ	0xFF2
  1540                           intcon2	equ	0xFF1
  1541                           intcon3	equ	0xFF0
  1542                           postinc0	equ	0xFEE
  1543                           fsr0h	equ	0xFEA
  1544                           fsr0l	equ	0xFE9
  1545                           wreg	equ	0xFE8
  1546                           fsr1h	equ	0xFE2
  1547                           fsr1l	equ	0xFE1
  1548                           indf2	equ	0xFDF
  1549                           postinc2	equ	0xFDE
  1550                           fsr2h	equ	0xFDA
  1551                           fsr2l	equ	0xFD9
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function ___wmul *****************
  1555 ;; Defined at:
  1556 ;;		line 15 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  multiplier      2    0[COMRAM] unsigned int 
  1559 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  product         2    4[COMRAM] unsigned int 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2    0[COMRAM] unsigned int 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, prodl, prodh
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1571 ;;      Params:         4       0       0       0       0       0       0
  1572 ;;      Locals:         2       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0
  1574 ;;      Totals:         6       0       0       0       0       0       0
  1575 ;;Total ram usage:        6 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_atoi
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text11
  1585  000FA4                     __ptext11:
  1586                           	opt stack 0
  1587  000FA4                     ___wmul:
  1588                           	opt stack 24
  1589                           
  1590                           ;incstack = 0
  1591  000FA4  5001               	movf	___wmul@multiplier,w,c
  1592  000FA6  0203               	mulwf	___wmul@multiplicand,c
  1593  000FA8  CFF3 F005          	movff	prodl,___wmul@product
  1594  000FAC  CFF4 F006          	movff	prodh,___wmul@product+1
  1595  000FB0  5001               	movf	___wmul@multiplier,w,c
  1596  000FB2  0204               	mulwf	___wmul@multiplicand+1,c
  1597  000FB4  50F3               	movf	prodl,w,c
  1598  000FB6  2606               	addwf	___wmul@product+1,f,c
  1599  000FB8  5002               	movf	___wmul@multiplier+1,w,c
  1600  000FBA  0203               	mulwf	___wmul@multiplicand,c
  1601  000FBC  50F3               	movf	prodl,w,c
  1602  000FBE  2606               	addwf	___wmul@product+1,f,c
  1603  000FC0  C005  F001         	movff	___wmul@product,?___wmul
  1604  000FC4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1605  000FC8  0012               	return	
  1606  000FCA                     __end_of___wmul:
  1607                           	opt stack 0
  1608                           pclatu	equ	0xFFB
  1609                           pclath	equ	0xFFA
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           prodh	equ	0xFF4
  1615                           prodl	equ	0xFF3
  1616                           intcon	equ	0xFF2
  1617                           intcon2	equ	0xFF1
  1618                           intcon3	equ	0xFF0
  1619                           postinc0	equ	0xFEE
  1620                           fsr0h	equ	0xFEA
  1621                           fsr0l	equ	0xFE9
  1622                           wreg	equ	0xFE8
  1623                           fsr1h	equ	0xFE2
  1624                           fsr1l	equ	0xFE1
  1625                           indf2	equ	0xFDF
  1626                           postinc2	equ	0xFDE
  1627                           fsr2h	equ	0xFDA
  1628                           fsr2l	equ	0xFD9
  1629                           status	equ	0xFD8
  1630                           
  1631 ;; *************** function _append *****************
  1632 ;; Defined at:
  1633 ;;		line 278 in file "main.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  s               2    6[COMRAM] PTR unsigned char 
  1636 ;;		 -> angle(99), 
  1637 ;;  c               1    8[COMRAM] unsigned char 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  len             2   11[COMRAM] int 
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1649 ;;      Params:         3       0       0       0       0       0       0
  1650 ;;      Locals:         2       0       0       0       0       0       0
  1651 ;;      Temps:          2       0       0       0       0       0       0
  1652 ;;      Totals:         7       0       0       0       0       0       0
  1653 ;;Total ram usage:        7 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    1
  1656 ;; This function calls:
  1657 ;;		_strlen
  1658 ;; This function is called by:
  1659 ;;		_writeToLCD
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text12
  1664  000E48                     __ptext12:
  1665                           	opt stack 0
  1666  000E48                     _append:
  1667                           	opt stack 24
  1668                           
  1669                           ;main.c: 280: int len = strlen(s);
  1670                           
  1671                           ;incstack = 0
  1672  000E48  C007  F001         	movff	append@s,strlen@s
  1673  000E4C  C008  F002         	movff	append@s+1,strlen@s+1
  1674  000E50  EC45  F007         	call	_strlen	;wreg free
  1675  000E54  C001  F00C         	movff	?_strlen,append@len
  1676  000E58  C002  F00D         	movff	?_strlen+1,append@len+1
  1677                           
  1678                           ;main.c: 281: s[len] = c;
  1679  000E5C  500C               	movf	append@len,w,c
  1680  000E5E  2407               	addwf	append@s,w,c
  1681  000E60  6ED9               	movwf	fsr2l,c
  1682  000E62  500D               	movf	append@len+1,w,c
  1683  000E64  2008               	addwfc	append@s+1,w,c
  1684  000E66  6EDA               	movwf	fsr2h,c
  1685  000E68  C009  FFDF         	movff	append@c,indf2
  1686                           
  1687                           ;main.c: 282: s[len+1] = '\0';
  1688  000E6C  0E01               	movlw	1
  1689  000E6E  240C               	addwf	append@len,w,c
  1690  000E70  6E0A               	movwf	??_append& (0+255),c
  1691  000E72  0E00               	movlw	0
  1692  000E74  200D               	addwfc	append@len+1,w,c
  1693  000E76  6E0B               	movwf	(??_append+1)& (0+255),c
  1694  000E78  500A               	movf	??_append,w,c
  1695  000E7A  2407               	addwf	append@s,w,c
  1696  000E7C  6ED9               	movwf	fsr2l,c
  1697  000E7E  500B               	movf	??_append+1,w,c
  1698  000E80  2008               	addwfc	append@s+1,w,c
  1699  000E82  6EDA               	movwf	fsr2h,c
  1700  000E84  0E00               	movlw	0
  1701  000E86  6EDF               	movwf	indf2,c
  1702  000E88  0012               	return		;funcret
  1703  000E8A                     __end_of_append:
  1704                           	opt stack 0
  1705                           pclatu	equ	0xFFB
  1706                           pclath	equ	0xFFA
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           intcon	equ	0xFF2
  1714                           intcon2	equ	0xFF1
  1715                           intcon3	equ	0xFF0
  1716                           postinc0	equ	0xFEE
  1717                           fsr0h	equ	0xFEA
  1718                           fsr0l	equ	0xFE9
  1719                           wreg	equ	0xFE8
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           indf2	equ	0xFDF
  1723                           postinc2	equ	0xFDE
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _strlen *****************
  1729 ;; Defined at:
  1730 ;;		line 4 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\strlen.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1733 ;;		 -> angle(99), 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  1736 ;;		 -> angle(99), 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  2    0[COMRAM] unsigned int 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1746 ;;      Params:         2       0       0       0       0       0       0
  1747 ;;      Locals:         2       0       0       0       0       0       0
  1748 ;;      Temps:          2       0       0       0       0       0       0
  1749 ;;      Totals:         6       0       0       0       0       0       0
  1750 ;;Total ram usage:        6 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_append
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text13
  1760  000E8A                     __ptext13:
  1761                           	opt stack 0
  1762  000E8A                     _strlen:
  1763                           	opt stack 24
  1764                           
  1765                           ;incstack = 0
  1766  000E8A  C001  F005         	movff	strlen@s,strlen@cp
  1767  000E8E  C002  F006         	movff	strlen@s+1,strlen@cp+1
  1768  000E92  D002               	goto	i2l1484
  1769  000E94                     i2l1482:
  1770  000E94  4A05               	infsnz	strlen@cp,f,c
  1771  000E96  2A06               	incf	strlen@cp+1,f,c
  1772  000E98                     i2l1484:
  1773  000E98  C005  FFD9         	movff	strlen@cp,fsr2l
  1774  000E9C  C006  FFDA         	movff	strlen@cp+1,fsr2h
  1775  000EA0  50DF               	movf	indf2,w,c
  1776  000EA2  A4D8               	btfss	status,2,c
  1777  000EA4  D7F7               	goto	i2l1482
  1778  000EA6  C001  F003         	movff	strlen@s,??_strlen
  1779  000EAA  C002  F004         	movff	strlen@s+1,??_strlen+1
  1780  000EAE  1E03               	comf	??_strlen,f,c
  1781  000EB0  1E04               	comf	??_strlen+1,f,c
  1782  000EB2  4A03               	infsnz	??_strlen,f,c
  1783  000EB4  2A04               	incf	??_strlen+1,f,c
  1784  000EB6  5005               	movf	strlen@cp,w,c
  1785  000EB8  2403               	addwf	??_strlen,w,c
  1786  000EBA  6E01               	movwf	?_strlen,c
  1787  000EBC  5006               	movf	strlen@cp+1,w,c
  1788  000EBE  2004               	addwfc	??_strlen+1,w,c
  1789  000EC0  6E02               	movwf	?_strlen+1,c
  1790  000EC2  0012               	return	
  1791  000EC4                     __end_of_strlen:
  1792                           	opt stack 0
  1793                           pclatu	equ	0xFFB
  1794                           pclath	equ	0xFFA
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           intcon	equ	0xFF2
  1802                           intcon2	equ	0xFF1
  1803                           intcon3	equ	0xFF0
  1804                           postinc0	equ	0xFEE
  1805                           fsr0h	equ	0xFEA
  1806                           fsr0l	equ	0xFE9
  1807                           wreg	equ	0xFE8
  1808                           fsr1h	equ	0xFE2
  1809                           fsr1l	equ	0xFE1
  1810                           indf2	equ	0xFDF
  1811                           postinc2	equ	0xFDE
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function ___fttol *****************
  1817 ;; Defined at:
  1818 ;;		line 44 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\fttol.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  f1              3    0[COMRAM] float 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  lval            4   10[COMRAM] unsigned long 
  1823 ;;  exp1            1   14[COMRAM] unsigned char 
  1824 ;;  sign1           1    9[COMRAM] unsigned char 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  4    0[COMRAM] long 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2, status,0
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1834 ;;      Params:         4       0       0       0       0       0       0
  1835 ;;      Locals:         6       0       0       0       0       0       0
  1836 ;;      Temps:          5       0       0       0       0       0       0
  1837 ;;      Totals:        15       0       0       0       0       0       0
  1838 ;;Total ram usage:       15 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_writeToLCD
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text14
  1848  0009BA                     __ptext14:
  1849                           	opt stack 0
  1850  0009BA                     ___fttol:
  1851                           	opt stack 25
  1852                           
  1853                           ;incstack = 0
  1854  0009BA  C003  F005         	movff	___fttol@f1+2,??___fttol
  1855  0009BE  6A06               	clrf	(??___fttol+1)& (0+255),c
  1856  0009C0  6A07               	clrf	(??___fttol+2)& (0+255),c
  1857  0009C2  3402               	rlcf	___fttol@f1+1,w,c
  1858  0009C4  3605               	rlcf	??___fttol& (0+255),f,c
  1859  0009C6  E301               	bnc	u133_41
  1860  0009C8  8006               	bsf	(??___fttol+1)& (0+255),0,c
  1861  0009CA                     u133_41:
  1862  0009CA  5005               	movf	??___fttol,w,c
  1863  0009CC  6E0F               	movwf	___fttol@exp1,c
  1864  0009CE  500F               	movf	___fttol@exp1,w,c
  1865  0009D0  A4D8               	btfss	status,2,c
  1866  0009D2  D009               	goto	i2l1772
  1867  0009D4  0E00               	movlw	0
  1868  0009D6  6E01               	movwf	?___fttol,c
  1869  0009D8  0E00               	movlw	0
  1870  0009DA  6E02               	movwf	?___fttol+1,c
  1871  0009DC  0E00               	movlw	0
  1872  0009DE  6E03               	movwf	?___fttol+2,c
  1873  0009E0  0E00               	movlw	0
  1874  0009E2  6E04               	movwf	?___fttol+3,c
  1875  0009E4  0012               	return	
  1876  0009E6                     i2l1772:
  1877  0009E6  0E17               	movlw	23
  1878  0009E8  6E05               	movwf	??___fttol& (0+255),c
  1879  0009EA  C001  F006         	movff	___fttol@f1,??___fttol+1
  1880  0009EE  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  1881  0009F2  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  1882  0009F6  2805               	incf	??___fttol,w,c
  1883  0009F8  6E09               	movwf	(??___fttol+4)& (0+255),c
  1884  0009FA  D004               	goto	i2u135_40
  1885  0009FC                     i2u135_45:
  1886  0009FC  90D8               	bcf	status,0,c
  1887  0009FE  3208               	rrcf	??___fttol+3,f,c
  1888  000A00  3207               	rrcf	??___fttol+2,f,c
  1889  000A02  3206               	rrcf	??___fttol+1,f,c
  1890  000A04                     i2u135_40:
  1891  000A04  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  1892  000A06  D7FA               	goto	i2u135_45
  1893  000A08  5006               	movf	??___fttol+1,w,c
  1894  000A0A  6E0A               	movwf	___fttol@sign1,c
  1895  000A0C  8E02               	bsf	___fttol@f1+1,7,c
  1896  000A0E  0EFF               	movlw	255
  1897  000A10  1601               	andwf	___fttol@f1,f,c
  1898  000A12  0EFF               	movlw	255
  1899  000A14  1602               	andwf	___fttol@f1+1,f,c
  1900  000A16  0E00               	movlw	0
  1901  000A18  1603               	andwf	___fttol@f1+2,f,c
  1902  000A1A  5001               	movf	___fttol@f1,w,c
  1903  000A1C  6E0B               	movwf	___fttol@lval,c
  1904  000A1E  5002               	movf	___fttol@f1+1,w,c
  1905  000A20  6E0C               	movwf	___fttol@lval+1,c
  1906  000A22  5003               	movf	___fttol@f1+2,w,c
  1907  000A24  6E0D               	movwf	___fttol@lval+2,c
  1908  000A26  6A0E               	clrf	___fttol@lval+3,c
  1909  000A28  0E8E               	movlw	142
  1910  000A2A  5E0F               	subwf	___fttol@exp1,f,c
  1911  000A2C  AE0F               	btfss	___fttol@exp1,7,c
  1912  000A2E  D016               	goto	i2l1794
  1913  000A30  500F               	movf	___fttol@exp1,w,c
  1914  000A32  0A80               	xorlw	128
  1915  000A34  0F8F               	addlw	143
  1916  000A36  B0D8               	btfsc	status,0,c
  1917  000A38  D009               	goto	i2l1790
  1918  000A3A  0E00               	movlw	0
  1919  000A3C  6E01               	movwf	?___fttol,c
  1920  000A3E  0E00               	movlw	0
  1921  000A40  6E02               	movwf	?___fttol+1,c
  1922  000A42  0E00               	movlw	0
  1923  000A44  6E03               	movwf	?___fttol+2,c
  1924  000A46  0E00               	movlw	0
  1925  000A48  6E04               	movwf	?___fttol+3,c
  1926  000A4A  0012               	return	
  1927  000A4C                     i2l1790:
  1928  000A4C  90D8               	bcf	status,0,c
  1929  000A4E  320E               	rrcf	___fttol@lval+3,f,c
  1930  000A50  320D               	rrcf	___fttol@lval+2,f,c
  1931  000A52  320C               	rrcf	___fttol@lval+1,f,c
  1932  000A54  320B               	rrcf	___fttol@lval,f,c
  1933  000A56  3E0F               	incfsz	___fttol@exp1,f,c
  1934  000A58  D7F9               	goto	i2l1790
  1935  000A5A  D015               	goto	i2l1804
  1936  000A5C                     i2l1794:
  1937  000A5C  0E17               	movlw	23
  1938  000A5E  640F               	cpfsgt	___fttol@exp1,c
  1939  000A60  D00F               	goto	i2l1802
  1940  000A62  0E00               	movlw	0
  1941  000A64  6E01               	movwf	?___fttol,c
  1942  000A66  0E00               	movlw	0
  1943  000A68  6E02               	movwf	?___fttol+1,c
  1944  000A6A  0E00               	movlw	0
  1945  000A6C  6E03               	movwf	?___fttol+2,c
  1946  000A6E  0E00               	movlw	0
  1947  000A70  6E04               	movwf	?___fttol+3,c
  1948  000A72  0012               	return	
  1949  000A74                     i2l1800:
  1950  000A74  90D8               	bcf	status,0,c
  1951  000A76  360B               	rlcf	___fttol@lval,f,c
  1952  000A78  360C               	rlcf	___fttol@lval+1,f,c
  1953  000A7A  360D               	rlcf	___fttol@lval+2,f,c
  1954  000A7C  360E               	rlcf	___fttol@lval+3,f,c
  1955  000A7E  060F               	decf	___fttol@exp1,f,c
  1956  000A80                     i2l1802:
  1957  000A80  500F               	movf	___fttol@exp1,w,c
  1958  000A82  A4D8               	btfss	status,2,c
  1959  000A84  D7F7               	goto	i2l1800
  1960  000A86                     i2l1804:
  1961  000A86  500A               	movf	___fttol@sign1,w,c
  1962  000A88  B4D8               	btfsc	status,2,c
  1963  000A8A  D008               	goto	i2l1808
  1964  000A8C  1E0E               	comf	___fttol@lval+3,f,c
  1965  000A8E  1E0D               	comf	___fttol@lval+2,f,c
  1966  000A90  1E0C               	comf	___fttol@lval+1,f,c
  1967  000A92  6C0B               	negf	___fttol@lval,c
  1968  000A94  0E00               	movlw	0
  1969  000A96  220C               	addwfc	___fttol@lval+1,f,c
  1970  000A98  220D               	addwfc	___fttol@lval+2,f,c
  1971  000A9A  220E               	addwfc	___fttol@lval+3,f,c
  1972  000A9C                     i2l1808:
  1973  000A9C  C00B  F001         	movff	___fttol@lval,?___fttol
  1974  000AA0  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  1975  000AA4  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  1976  000AA8  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  1977  000AAC  0012               	return	
  1978  000AAE                     __end_of___fttol:
  1979                           	opt stack 0
  1980                           pclatu	equ	0xFFB
  1981                           pclath	equ	0xFFA
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon	equ	0xFF2
  1989                           intcon2	equ	0xFF1
  1990                           intcon3	equ	0xFF0
  1991                           postinc0	equ	0xFEE
  1992                           fsr0h	equ	0xFEA
  1993                           fsr0l	equ	0xFE9
  1994                           wreg	equ	0xFE8
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           indf2	equ	0xFDF
  1998                           postinc2	equ	0xFDE
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function ___ftmul *****************
  2004 ;; Defined at:
  2005 ;;		line 62 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftmul.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  f1              3    8[COMRAM] float 
  2008 ;;  f2              3   11[COMRAM] float 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  2011 ;;  sign            1   22[COMRAM] unsigned char 
  2012 ;;  cntr            1   21[COMRAM] unsigned char 
  2013 ;;  exp             1   17[COMRAM] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  3    8[COMRAM] float 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2023 ;;      Params:         6       0       0       0       0       0       0
  2024 ;;      Locals:         6       0       0       0       0       0       0
  2025 ;;      Temps:          3       0       0       0       0       0       0
  2026 ;;      Totals:        15       0       0       0       0       0       0
  2027 ;;Total ram usage:       15 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    1
  2030 ;; This function calls:
  2031 ;;		___ftpack
  2032 ;; This function is called by:
  2033 ;;		_writeToLCD
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text15
  2038  000AAE                     __ptext15:
  2039                           	opt stack 0
  2040  000AAE                     ___ftmul:
  2041                           	opt stack 24
  2042                           
  2043                           ;incstack = 0
  2044  000AAE  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  2045  000AB2  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2046  000AB4  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2047  000AB6  340A               	rlcf	___ftmul@f1+1,w,c
  2048  000AB8  360F               	rlcf	??___ftmul& (0+255),f,c
  2049  000ABA  E301               	bnc	u126_41
  2050  000ABC  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2051  000ABE                     u126_41:
  2052  000ABE  500F               	movf	??___ftmul,w,c
  2053  000AC0  6E12               	movwf	___ftmul@exp,c
  2054  000AC2  5012               	movf	___ftmul@exp,w,c
  2055  000AC4  A4D8               	btfss	status,2,c
  2056  000AC6  D007               	goto	i2l1712
  2057  000AC8  0E00               	movlw	0
  2058  000ACA  6E09               	movwf	?___ftmul,c
  2059  000ACC  0E00               	movlw	0
  2060  000ACE  6E0A               	movwf	?___ftmul+1,c
  2061  000AD0  0E00               	movlw	0
  2062  000AD2  6E0B               	movwf	?___ftmul+2,c
  2063  000AD4  0012               	return	
  2064  000AD6                     i2l1712:
  2065  000AD6  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  2066  000ADA  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2067  000ADC  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2068  000ADE  340D               	rlcf	___ftmul@f2+1,w,c
  2069  000AE0  360F               	rlcf	??___ftmul& (0+255),f,c
  2070  000AE2  E301               	bnc	u128_41
  2071  000AE4  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2072  000AE6                     u128_41:
  2073  000AE6  500F               	movf	??___ftmul,w,c
  2074  000AE8  6E17               	movwf	___ftmul@sign,c
  2075  000AEA  5017               	movf	___ftmul@sign,w,c
  2076  000AEC  A4D8               	btfss	status,2,c
  2077  000AEE  D007               	goto	i2l1718
  2078  000AF0  0E00               	movlw	0
  2079  000AF2  6E09               	movwf	?___ftmul,c
  2080  000AF4  0E00               	movlw	0
  2081  000AF6  6E0A               	movwf	?___ftmul+1,c
  2082  000AF8  0E00               	movlw	0
  2083  000AFA  6E0B               	movwf	?___ftmul+2,c
  2084  000AFC  0012               	return	
  2085  000AFE                     i2l1718:
  2086  000AFE  5017               	movf	___ftmul@sign,w,c
  2087  000B00  0F7B               	addlw	123
  2088  000B02  2612               	addwf	___ftmul@exp,f,c
  2089  000B04  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  2090  000B08  500E               	movf	___ftmul@f2+2,w,c
  2091  000B0A  1A17               	xorwf	___ftmul@sign,f,c
  2092  000B0C  0E80               	movlw	128
  2093  000B0E  1617               	andwf	___ftmul@sign,f,c
  2094  000B10  8E0A               	bsf	___ftmul@f1+1,7,c
  2095  000B12  8E0D               	bsf	___ftmul@f2+1,7,c
  2096  000B14  0EFF               	movlw	255
  2097  000B16  160C               	andwf	___ftmul@f2,f,c
  2098  000B18  0EFF               	movlw	255
  2099  000B1A  160D               	andwf	___ftmul@f2+1,f,c
  2100  000B1C  0E00               	movlw	0
  2101  000B1E  160E               	andwf	___ftmul@f2+2,f,c
  2102  000B20  0E00               	movlw	0
  2103  000B22  6E13               	movwf	___ftmul@f3_as_product,c
  2104  000B24  0E00               	movlw	0
  2105  000B26  6E14               	movwf	___ftmul@f3_as_product+1,c
  2106  000B28  0E00               	movlw	0
  2107  000B2A  6E15               	movwf	___ftmul@f3_as_product+2,c
  2108  000B2C  0E07               	movlw	7
  2109  000B2E  6E16               	movwf	___ftmul@cntr,c
  2110  000B30                     i2l1732:
  2111  000B30  A009               	btfss	___ftmul@f1,0,c
  2112  000B32  D006               	goto	i2l1736
  2113  000B34  500C               	movf	___ftmul@f2,w,c
  2114  000B36  2613               	addwf	___ftmul@f3_as_product,f,c
  2115  000B38  500D               	movf	___ftmul@f2+1,w,c
  2116  000B3A  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2117  000B3C  500E               	movf	___ftmul@f2+2,w,c
  2118  000B3E  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2119  000B40                     i2l1736:
  2120  000B40  90D8               	bcf	status,0,c
  2121  000B42  320B               	rrcf	___ftmul@f1+2,f,c
  2122  000B44  320A               	rrcf	___ftmul@f1+1,f,c
  2123  000B46  3209               	rrcf	___ftmul@f1,f,c
  2124  000B48  90D8               	bcf	status,0,c
  2125  000B4A  360C               	rlcf	___ftmul@f2,f,c
  2126  000B4C  360D               	rlcf	___ftmul@f2+1,f,c
  2127  000B4E  360E               	rlcf	___ftmul@f2+2,f,c
  2128  000B50  2E16               	decfsz	___ftmul@cntr,f,c
  2129  000B52  D7EE               	goto	i2l1732
  2130  000B54  0E09               	movlw	9
  2131  000B56  6E16               	movwf	___ftmul@cntr,c
  2132  000B58                     i2l1742:
  2133  000B58  A009               	btfss	___ftmul@f1,0,c
  2134  000B5A  D006               	goto	i2l1746
  2135  000B5C  500C               	movf	___ftmul@f2,w,c
  2136  000B5E  2613               	addwf	___ftmul@f3_as_product,f,c
  2137  000B60  500D               	movf	___ftmul@f2+1,w,c
  2138  000B62  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2139  000B64  500E               	movf	___ftmul@f2+2,w,c
  2140  000B66  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2141  000B68                     i2l1746:
  2142  000B68  90D8               	bcf	status,0,c
  2143  000B6A  320B               	rrcf	___ftmul@f1+2,f,c
  2144  000B6C  320A               	rrcf	___ftmul@f1+1,f,c
  2145  000B6E  3209               	rrcf	___ftmul@f1,f,c
  2146  000B70  90D8               	bcf	status,0,c
  2147  000B72  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  2148  000B74  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  2149  000B76  3213               	rrcf	___ftmul@f3_as_product,f,c
  2150  000B78  2E16               	decfsz	___ftmul@cntr,f,c
  2151  000B7A  D7EE               	goto	i2l1742
  2152  000B7C  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2153  000B80  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2154  000B84  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2155  000B88  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  2156  000B8C  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  2157  000B90  ECA8  F006         	call	___ftpack	;wreg free
  2158  000B94  C001  F009         	movff	?___ftpack,?___ftmul
  2159  000B98  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  2160  000B9C  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  2161  000BA0  0012               	return	
  2162  000BA2                     __end_of___ftmul:
  2163                           	opt stack 0
  2164                           pclatu	equ	0xFFB
  2165                           pclath	equ	0xFFA
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           intcon	equ	0xFF2
  2173                           intcon2	equ	0xFF1
  2174                           intcon3	equ	0xFF0
  2175                           postinc0	equ	0xFEE
  2176                           fsr0h	equ	0xFEA
  2177                           fsr0l	equ	0xFE9
  2178                           wreg	equ	0xFE8
  2179                           fsr1h	equ	0xFE2
  2180                           fsr1l	equ	0xFE1
  2181                           indf2	equ	0xFDF
  2182                           postinc2	equ	0xFDE
  2183                           fsr2h	equ	0xFDA
  2184                           fsr2l	equ	0xFD9
  2185                           status	equ	0xFD8
  2186                           
  2187 ;; *************** function ___ftadd *****************
  2188 ;; Defined at:
  2189 ;;		line 86 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftadd.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  f1              3   23[COMRAM] float 
  2192 ;;  f2              3   26[COMRAM] float 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  exp1            1   34[COMRAM] unsigned char 
  2195 ;;  exp2            1   33[COMRAM] unsigned char 
  2196 ;;  sign            1   32[COMRAM] unsigned char 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  3   23[COMRAM] float 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2206 ;;      Params:         6       0       0       0       0       0       0
  2207 ;;      Locals:         3       0       0       0       0       0       0
  2208 ;;      Temps:          3       0       0       0       0       0       0
  2209 ;;      Totals:        12       0       0       0       0       0       0
  2210 ;;Total ram usage:       12 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    1
  2213 ;; This function calls:
  2214 ;;		___ftpack
  2215 ;; This function is called by:
  2216 ;;		_writeToLCD
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text16
  2221  00080E                     __ptext16:
  2222                           	opt stack 0
  2223  00080E                     ___ftadd:
  2224                           	opt stack 24
  2225                           
  2226                           ;incstack = 0
  2227  00080E  C01A  F01E         	movff	___ftadd@f1+2,??___ftadd
  2228  000812  6A1F               	clrf	(??___ftadd+1)& (0+255),c
  2229  000814  6A20               	clrf	(??___ftadd+2)& (0+255),c
  2230  000816  3419               	rlcf	___ftadd@f1+1,w,c
  2231  000818  361E               	rlcf	??___ftadd& (0+255),f,c
  2232  00081A  E301               	bnc	u105_41
  2233  00081C  801F               	bsf	(??___ftadd+1)& (0+255),0,c
  2234  00081E                     u105_41:
  2235  00081E  501E               	movf	??___ftadd,w,c
  2236  000820  6E23               	movwf	___ftadd@exp1,c
  2237  000822  C01D  F01E         	movff	___ftadd@f2+2,??___ftadd
  2238  000826  6A1F               	clrf	(??___ftadd+1)& (0+255),c
  2239  000828  6A20               	clrf	(??___ftadd+2)& (0+255),c
  2240  00082A  341C               	rlcf	___ftadd@f2+1,w,c
  2241  00082C  361E               	rlcf	??___ftadd& (0+255),f,c
  2242  00082E  E301               	bnc	u106_41
  2243  000830  801F               	bsf	(??___ftadd+1)& (0+255),0,c
  2244  000832                     u106_41:
  2245  000832  501E               	movf	??___ftadd,w,c
  2246  000834  6E22               	movwf	___ftadd@exp2,c
  2247  000836  5023               	movf	___ftadd@exp1,w,c
  2248  000838  B4D8               	btfsc	status,2,c
  2249  00083A  D00B               	goto	i2l375
  2250  00083C  5022               	movf	___ftadd@exp2,w,c
  2251  00083E  5C23               	subwf	___ftadd@exp1,w,c
  2252  000840  B0D8               	btfsc	status,0,c
  2253  000842  D00E               	goto	i2l1644
  2254  000844  5023               	movf	___ftadd@exp1,w,c
  2255  000846  0800               	sublw	0
  2256  000848  2422               	addwf	___ftadd@exp2,w,c
  2257  00084A  6E1E               	movwf	??___ftadd& (0+255),c
  2258  00084C  0E18               	movlw	24
  2259  00084E  641E               	cpfsgt	??___ftadd,c
  2260  000850  D007               	goto	i2l1644
  2261  000852                     i2l375:
  2262  000852  C01B  F018         	movff	___ftadd@f2,?___ftadd
  2263  000856  C01C  F019         	movff	___ftadd@f2+1,?___ftadd+1
  2264  00085A  C01D  F01A         	movff	___ftadd@f2+2,?___ftadd+2
  2265  00085E  0012               	return	
  2266  000860                     i2l1644:
  2267  000860  5022               	movf	___ftadd@exp2,w,c
  2268  000862  B4D8               	btfsc	status,2,c
  2269  000864  D00B               	goto	i2l379
  2270  000866  5023               	movf	___ftadd@exp1,w,c
  2271  000868  5C22               	subwf	___ftadd@exp2,w,c
  2272  00086A  B0D8               	btfsc	status,0,c
  2273  00086C  D00E               	goto	i2l1650
  2274  00086E  5022               	movf	___ftadd@exp2,w,c
  2275  000870  0800               	sublw	0
  2276  000872  2423               	addwf	___ftadd@exp1,w,c
  2277  000874  6E1E               	movwf	??___ftadd& (0+255),c
  2278  000876  0E18               	movlw	24
  2279  000878  641E               	cpfsgt	??___ftadd,c
  2280  00087A  D007               	goto	i2l1650
  2281  00087C                     i2l379:
  2282  00087C  C018  F018         	movff	___ftadd@f1,?___ftadd
  2283  000880  C019  F019         	movff	___ftadd@f1+1,?___ftadd+1
  2284  000884  C01A  F01A         	movff	___ftadd@f1+2,?___ftadd+2
  2285  000888  0012               	return	
  2286  00088A                     i2l1650:
  2287  00088A  0E06               	movlw	6
  2288  00088C  6E21               	movwf	___ftadd@sign,c
  2289  00088E  BE1A               	btfsc	___ftadd@f1+2,7,c
  2290  000890  8E21               	bsf	___ftadd@sign,7,c
  2291  000892  BE1D               	btfsc	___ftadd@f2+2,7,c
  2292  000894  8C21               	bsf	___ftadd@sign,6,c
  2293  000896  8E19               	bsf	___ftadd@f1+1,7,c
  2294  000898  0EFF               	movlw	255
  2295  00089A  1618               	andwf	___ftadd@f1,f,c
  2296  00089C  0EFF               	movlw	255
  2297  00089E  1619               	andwf	___ftadd@f1+1,f,c
  2298  0008A0  0E00               	movlw	0
  2299  0008A2  161A               	andwf	___ftadd@f1+2,f,c
  2300  0008A4  8E1C               	bsf	___ftadd@f2+1,7,c
  2301  0008A6  0EFF               	movlw	255
  2302  0008A8  161B               	andwf	___ftadd@f2,f,c
  2303  0008AA  0EFF               	movlw	255
  2304  0008AC  161C               	andwf	___ftadd@f2+1,f,c
  2305  0008AE  0E00               	movlw	0
  2306  0008B0  161D               	andwf	___ftadd@f2+2,f,c
  2307  0008B2  5022               	movf	___ftadd@exp2,w,c
  2308  0008B4  5C23               	subwf	___ftadd@exp1,w,c
  2309  0008B6  B0D8               	btfsc	status,0,c
  2310  0008B8  D01B               	goto	i2l1676
  2311  0008BA                     i2l1666:
  2312  0008BA  90D8               	bcf	status,0,c
  2313  0008BC  361B               	rlcf	___ftadd@f2,f,c
  2314  0008BE  361C               	rlcf	___ftadd@f2+1,f,c
  2315  0008C0  361D               	rlcf	___ftadd@f2+2,f,c
  2316  0008C2  0622               	decf	___ftadd@exp2,f,c
  2317  0008C4  5023               	movf	___ftadd@exp1,w,c
  2318  0008C6  1822               	xorwf	___ftadd@exp2,w,c
  2319  0008C8  B4D8               	btfsc	status,2,c
  2320  0008CA  D00D               	goto	i2l1674
  2321  0008CC  0621               	decf	___ftadd@sign,f,c
  2322  0008CE  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2323  0008D2  0E07               	movlw	7
  2324  0008D4  161E               	andwf	??___ftadd,f,c
  2325  0008D6  B4D8               	btfsc	status,2,c
  2326  0008D8  D006               	goto	i2l1674
  2327  0008DA  D7EF               	goto	i2l1666
  2328  0008DC                     i2l1672:
  2329  0008DC  90D8               	bcf	status,0,c
  2330  0008DE  321A               	rrcf	___ftadd@f1+2,f,c
  2331  0008E0  3219               	rrcf	___ftadd@f1+1,f,c
  2332  0008E2  3218               	rrcf	___ftadd@f1,f,c
  2333  0008E4  2A23               	incf	___ftadd@exp1,f,c
  2334  0008E6                     i2l1674:
  2335  0008E6  5022               	movf	___ftadd@exp2,w,c
  2336  0008E8  1823               	xorwf	___ftadd@exp1,w,c
  2337  0008EA  B4D8               	btfsc	status,2,c
  2338  0008EC  D01F               	goto	i2l390
  2339  0008EE  D7F6               	goto	i2l1672
  2340  0008F0                     i2l1676:
  2341  0008F0  5023               	movf	___ftadd@exp1,w,c
  2342  0008F2  5C22               	subwf	___ftadd@exp2,w,c
  2343  0008F4  B0D8               	btfsc	status,0,c
  2344  0008F6  D01A               	goto	i2l390
  2345  0008F8                     i2l1678:
  2346  0008F8  90D8               	bcf	status,0,c
  2347  0008FA  3618               	rlcf	___ftadd@f1,f,c
  2348  0008FC  3619               	rlcf	___ftadd@f1+1,f,c
  2349  0008FE  361A               	rlcf	___ftadd@f1+2,f,c
  2350  000900  0623               	decf	___ftadd@exp1,f,c
  2351  000902  5023               	movf	___ftadd@exp1,w,c
  2352  000904  1822               	xorwf	___ftadd@exp2,w,c
  2353  000906  B4D8               	btfsc	status,2,c
  2354  000908  D00D               	goto	i2l1686
  2355  00090A  0621               	decf	___ftadd@sign,f,c
  2356  00090C  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2357  000910  0E07               	movlw	7
  2358  000912  161E               	andwf	??___ftadd,f,c
  2359  000914  B4D8               	btfsc	status,2,c
  2360  000916  D006               	goto	i2l1686
  2361  000918  D7EF               	goto	i2l1678
  2362  00091A                     i2l1684:
  2363  00091A  90D8               	bcf	status,0,c
  2364  00091C  321D               	rrcf	___ftadd@f2+2,f,c
  2365  00091E  321C               	rrcf	___ftadd@f2+1,f,c
  2366  000920  321B               	rrcf	___ftadd@f2,f,c
  2367  000922  2A22               	incf	___ftadd@exp2,f,c
  2368  000924                     i2l1686:
  2369  000924  5022               	movf	___ftadd@exp2,w,c
  2370  000926  1823               	xorwf	___ftadd@exp1,w,c
  2371  000928  A4D8               	btfss	status,2,c
  2372  00092A  D7F7               	goto	i2l1684
  2373  00092C                     i2l390:
  2374  00092C  AE21               	btfss	___ftadd@sign,7,c
  2375  00092E  D00C               	goto	i2l399
  2376  000930  0EFF               	movlw	255
  2377  000932  1A18               	xorwf	___ftadd@f1,f,c
  2378  000934  0EFF               	movlw	255
  2379  000936  1A19               	xorwf	___ftadd@f1+1,f,c
  2380  000938  0EFF               	movlw	255
  2381  00093A  1A1A               	xorwf	___ftadd@f1+2,f,c
  2382  00093C  0E01               	movlw	1
  2383  00093E  2618               	addwf	___ftadd@f1,f,c
  2384  000940  0E00               	movlw	0
  2385  000942  2219               	addwfc	___ftadd@f1+1,f,c
  2386  000944  0E00               	movlw	0
  2387  000946  221A               	addwfc	___ftadd@f1+2,f,c
  2388  000948                     i2l399:
  2389  000948  AC21               	btfss	___ftadd@sign,6,c
  2390  00094A  D00C               	goto	i2l1692
  2391  00094C  0EFF               	movlw	255
  2392  00094E  1A1B               	xorwf	___ftadd@f2,f,c
  2393  000950  0EFF               	movlw	255
  2394  000952  1A1C               	xorwf	___ftadd@f2+1,f,c
  2395  000954  0EFF               	movlw	255
  2396  000956  1A1D               	xorwf	___ftadd@f2+2,f,c
  2397  000958  0E01               	movlw	1
  2398  00095A  261B               	addwf	___ftadd@f2,f,c
  2399  00095C  0E00               	movlw	0
  2400  00095E  221C               	addwfc	___ftadd@f2+1,f,c
  2401  000960  0E00               	movlw	0
  2402  000962  221D               	addwfc	___ftadd@f2+2,f,c
  2403  000964                     i2l1692:
  2404  000964  0E00               	movlw	0
  2405  000966  6E21               	movwf	___ftadd@sign,c
  2406  000968  5018               	movf	___ftadd@f1,w,c
  2407  00096A  261B               	addwf	___ftadd@f2,f,c
  2408  00096C  5019               	movf	___ftadd@f1+1,w,c
  2409  00096E  221C               	addwfc	___ftadd@f2+1,f,c
  2410  000970  501A               	movf	___ftadd@f1+2,w,c
  2411  000972  221D               	addwfc	___ftadd@f2+2,f,c
  2412  000974  AE1D               	btfss	___ftadd@f2+2,7,c
  2413  000976  D00E               	goto	i2l1702
  2414  000978  0EFF               	movlw	255
  2415  00097A  1A1B               	xorwf	___ftadd@f2,f,c
  2416  00097C  0EFF               	movlw	255
  2417  00097E  1A1C               	xorwf	___ftadd@f2+1,f,c
  2418  000980  0EFF               	movlw	255
  2419  000982  1A1D               	xorwf	___ftadd@f2+2,f,c
  2420  000984  0E01               	movlw	1
  2421  000986  261B               	addwf	___ftadd@f2,f,c
  2422  000988  0E00               	movlw	0
  2423  00098A  221C               	addwfc	___ftadd@f2+1,f,c
  2424  00098C  0E00               	movlw	0
  2425  00098E  221D               	addwfc	___ftadd@f2+2,f,c
  2426  000990  0E01               	movlw	1
  2427  000992  6E21               	movwf	___ftadd@sign,c
  2428  000994                     i2l1702:
  2429  000994  C01B  F001         	movff	___ftadd@f2,___ftpack@arg
  2430  000998  C01C  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2431  00099C  C01D  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2432  0009A0  C023  F004         	movff	___ftadd@exp1,___ftpack@exp
  2433  0009A4  C021  F005         	movff	___ftadd@sign,___ftpack@sign
  2434  0009A8  ECA8  F006         	call	___ftpack	;wreg free
  2435  0009AC  C001  F018         	movff	?___ftpack,?___ftadd
  2436  0009B0  C002  F019         	movff	?___ftpack+1,?___ftadd+1
  2437  0009B4  C003  F01A         	movff	?___ftpack+2,?___ftadd+2
  2438  0009B8  0012               	return	
  2439  0009BA                     __end_of___ftadd:
  2440                           	opt stack 0
  2441                           pclatu	equ	0xFFB
  2442                           pclath	equ	0xFFA
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           intcon3	equ	0xFF0
  2452                           postinc0	equ	0xFEE
  2453                           fsr0h	equ	0xFEA
  2454                           fsr0l	equ	0xFE9
  2455                           wreg	equ	0xFE8
  2456                           fsr1h	equ	0xFE2
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           fsr2h	equ	0xFDA
  2461                           fsr2l	equ	0xFD9
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function ___awtoft *****************
  2465 ;; Defined at:
  2466 ;;		line 32 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\awtoft.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  c               2   13[COMRAM] int 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  sign            1   16[COMRAM] unsigned char 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  3   13[COMRAM] float 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2480 ;;      Params:         3       0       0       0       0       0       0
  2481 ;;      Locals:         1       0       0       0       0       0       0
  2482 ;;      Temps:          0       0       0       0       0       0       0
  2483 ;;      Totals:         4       0       0       0       0       0       0
  2484 ;;Total ram usage:        4 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    1
  2487 ;; This function calls:
  2488 ;;		___ftpack
  2489 ;; This function is called by:
  2490 ;;		_writeToLCD
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text17
  2495  000EC4                     __ptext17:
  2496                           	opt stack 0
  2497  000EC4                     ___awtoft:
  2498                           	opt stack 24
  2499                           
  2500                           ;incstack = 0
  2501  000EC4  0E00               	movlw	0
  2502  000EC6  6E11               	movwf	___awtoft@sign,c
  2503  000EC8  AE0F               	btfss	___awtoft@c+1,7,c
  2504  000ECA  D006               	goto	i2l1762
  2505  000ECC  6C0E               	negf	___awtoft@c,c
  2506  000ECE  1E0F               	comf	___awtoft@c+1,f,c
  2507  000ED0  B0D8               	btfsc	status,0,c
  2508  000ED2  2A0F               	incf	___awtoft@c+1,f,c
  2509  000ED4  0E01               	movlw	1
  2510  000ED6  6E11               	movwf	___awtoft@sign,c
  2511  000ED8                     i2l1762:
  2512  000ED8  C00E  F001         	movff	___awtoft@c,___ftpack@arg
  2513  000EDC  C00F  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2514  000EE0  6A03               	clrf	___ftpack@arg+2,c
  2515  000EE2  0E8E               	movlw	142
  2516  000EE4  6E04               	movwf	___ftpack@exp,c
  2517  000EE6  C011  F005         	movff	___awtoft@sign,___ftpack@sign
  2518  000EEA  ECA8  F006         	call	___ftpack	;wreg free
  2519  000EEE  C001  F00E         	movff	?___ftpack,?___awtoft
  2520  000EF2  C002  F00F         	movff	?___ftpack+1,?___awtoft+1
  2521  000EF6  C003  F010         	movff	?___ftpack+2,?___awtoft+2
  2522  000EFA  0012               	return	
  2523  000EFC                     __end_of___awtoft:
  2524                           	opt stack 0
  2525                           pclatu	equ	0xFFB
  2526                           pclath	equ	0xFFA
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           intcon2	equ	0xFF1
  2535                           intcon3	equ	0xFF0
  2536                           postinc0	equ	0xFEE
  2537                           fsr0h	equ	0xFEA
  2538                           fsr0l	equ	0xFE9
  2539                           wreg	equ	0xFE8
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function ___ftpack *****************
  2549 ;; Defined at:
  2550 ;;		line 62 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\float.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  arg             3    0[COMRAM] unsigned um
  2553 ;;  exp             1    3[COMRAM] unsigned char 
  2554 ;;  sign            1    4[COMRAM] unsigned char 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;		None
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  3    0[COMRAM] float 
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2566 ;;      Params:         5       0       0       0       0       0       0
  2567 ;;      Locals:         0       0       0       0       0       0       0
  2568 ;;      Temps:          3       0       0       0       0       0       0
  2569 ;;      Totals:         8       0       0       0       0       0       0
  2570 ;;Total ram usage:        8 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		___awtoft
  2576 ;;		___ftadd
  2577 ;;		___ftmul
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text18
  2582  000D50                     __ptext18:
  2583                           	opt stack 0
  2584  000D50                     ___ftpack:
  2585                           	opt stack 24
  2586                           
  2587                           ;incstack = 0
  2588  000D50  5004               	movf	___ftpack@exp,w,c
  2589  000D52  B4D8               	btfsc	status,2,c
  2590  000D54  D005               	goto	i2l1500
  2591  000D56  5001               	movf	___ftpack@arg,w,c
  2592  000D58  1002               	iorwf	___ftpack@arg+1,w,c
  2593  000D5A  1003               	iorwf	___ftpack@arg+2,w,c
  2594  000D5C  A4D8               	btfss	status,2,c
  2595  000D5E  D00C               	goto	i2l1506
  2596  000D60                     i2l1500:
  2597  000D60  0E00               	movlw	0
  2598  000D62  6E01               	movwf	?___ftpack,c
  2599  000D64  0E00               	movlw	0
  2600  000D66  6E02               	movwf	?___ftpack+1,c
  2601  000D68  0E00               	movlw	0
  2602  000D6A  6E03               	movwf	?___ftpack+2,c
  2603  000D6C  0012               	return	
  2604  000D6E                     i2l1504:
  2605  000D6E  2A04               	incf	___ftpack@exp,f,c
  2606  000D70  90D8               	bcf	status,0,c
  2607  000D72  3203               	rrcf	___ftpack@arg+2,f,c
  2608  000D74  3202               	rrcf	___ftpack@arg+1,f,c
  2609  000D76  3201               	rrcf	___ftpack@arg,f,c
  2610  000D78                     i2l1506:
  2611  000D78  0E00               	movlw	0
  2612  000D7A  1401               	andwf	___ftpack@arg,w,c
  2613  000D7C  6E06               	movwf	??___ftpack& (0+255),c
  2614  000D7E  0E00               	movlw	0
  2615  000D80  1402               	andwf	___ftpack@arg+1,w,c
  2616  000D82  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2617  000D84  0EFE               	movlw	254
  2618  000D86  1403               	andwf	___ftpack@arg+2,w,c
  2619  000D88  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2620  000D8A  5006               	movf	??___ftpack,w,c
  2621  000D8C  1007               	iorwf	??___ftpack+1,w,c
  2622  000D8E  1008               	iorwf	??___ftpack+2,w,c
  2623  000D90  B4D8               	btfsc	status,2,c
  2624  000D92  D00C               	goto	i2l1512
  2625  000D94  D7EC               	goto	i2l1504
  2626  000D96                     i2l1508:
  2627  000D96  2A04               	incf	___ftpack@exp,f,c
  2628  000D98  0E01               	movlw	1
  2629  000D9A  2601               	addwf	___ftpack@arg,f,c
  2630  000D9C  0E00               	movlw	0
  2631  000D9E  2202               	addwfc	___ftpack@arg+1,f,c
  2632  000DA0  0E00               	movlw	0
  2633  000DA2  2203               	addwfc	___ftpack@arg+2,f,c
  2634  000DA4  90D8               	bcf	status,0,c
  2635  000DA6  3203               	rrcf	___ftpack@arg+2,f,c
  2636  000DA8  3202               	rrcf	___ftpack@arg+1,f,c
  2637  000DAA  3201               	rrcf	___ftpack@arg,f,c
  2638  000DAC                     i2l1512:
  2639  000DAC  0E00               	movlw	0
  2640  000DAE  1401               	andwf	___ftpack@arg,w,c
  2641  000DB0  6E06               	movwf	??___ftpack& (0+255),c
  2642  000DB2  0E00               	movlw	0
  2643  000DB4  1402               	andwf	___ftpack@arg+1,w,c
  2644  000DB6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2645  000DB8  0EFF               	movlw	255
  2646  000DBA  1403               	andwf	___ftpack@arg+2,w,c
  2647  000DBC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2648  000DBE  5006               	movf	??___ftpack,w,c
  2649  000DC0  1007               	iorwf	??___ftpack+1,w,c
  2650  000DC2  1008               	iorwf	??___ftpack+2,w,c
  2651  000DC4  B4D8               	btfsc	status,2,c
  2652  000DC6  D006               	goto	i2l1516
  2653  000DC8  D7E6               	goto	i2l1508
  2654  000DCA                     i2l1514:
  2655  000DCA  0604               	decf	___ftpack@exp,f,c
  2656  000DCC  90D8               	bcf	status,0,c
  2657  000DCE  3601               	rlcf	___ftpack@arg,f,c
  2658  000DD0  3602               	rlcf	___ftpack@arg+1,f,c
  2659  000DD2  3603               	rlcf	___ftpack@arg+2,f,c
  2660  000DD4                     i2l1516:
  2661  000DD4  BE02               	btfsc	___ftpack@arg+1,7,c
  2662  000DD6  D003               	goto	i2l352
  2663  000DD8  0E02               	movlw	2
  2664  000DDA  6004               	cpfslt	___ftpack@exp,c
  2665  000DDC  D7F6               	goto	i2l1514
  2666  000DDE                     i2l352:
  2667  000DDE  A004               	btfss	___ftpack@exp,0,c
  2668  000DE0  9E02               	bcf	___ftpack@arg+1,7,c
  2669  000DE2  90D8               	bcf	status,0,c
  2670  000DE4  3204               	rrcf	___ftpack@exp,f,c
  2671  000DE6  5004               	movf	___ftpack@exp,w,c
  2672  000DE8  1203               	iorwf	___ftpack@arg+2,f,c
  2673  000DEA  5005               	movf	___ftpack@sign,w,c
  2674  000DEC  A4D8               	btfss	status,2,c
  2675  000DEE  8E03               	bsf	___ftpack@arg+2,7,c
  2676  000DF0  C001  F001         	movff	___ftpack@arg,?___ftpack
  2677  000DF4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2678  000DF8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2679  000DFC  0012               	return	
  2680  000DFE                     __end_of___ftpack:
  2681                           	opt stack 0
  2682                           pclatu	equ	0xFFB
  2683                           pclath	equ	0xFFA
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           intcon3	equ	0xFF0
  2693                           postinc0	equ	0xFEE
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _Envia_Dado_Lcd *****************
  2706 ;; Defined at:
  2707 ;;		line 77 in file "main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  dado            1    wreg     unsigned char 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  dado            1    2[COMRAM] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2721 ;;      Params:         0       0       0       0       0       0       0
  2722 ;;      Locals:         1       0       0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0       0       0
  2724 ;;      Totals:         1       0       0       0       0       0       0
  2725 ;;Total ram usage:        1 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    1
  2728 ;; This function calls:
  2729 ;;		i2_Delay_LCD
  2730 ;; This function is called by:
  2731 ;;		_writeToLCD
  2732 ;;		_Print_Mensagem_Lcd
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text19
  2737  000FEC                     __ptext19:
  2738                           	opt stack 0
  2739  000FEC                     _Envia_Dado_Lcd:
  2740                           	opt stack 24
  2741                           
  2742                           ;incstack = 0
  2743                           ;Envia_Dado_Lcd@dado stored from wreg
  2744  000FEC  6E03               	movwf	Envia_Dado_Lcd@dado,c
  2745                           
  2746                           ;main.c: 79: PORTCbits.RC1=0;
  2747  000FEE  9282               	bcf	3970,1,c	;volatile
  2748                           
  2749                           ;main.c: 80: PORTCbits.RC0=1;
  2750  000FF0  8082               	bsf	3970,0,c	;volatile
  2751                           
  2752                           ;main.c: 82: PORTCbits.RC1=1;
  2753  000FF2  8282               	bsf	3970,1,c	;volatile
  2754                           
  2755                           ;main.c: 83: PORTD=dado;
  2756  000FF4  C003  FF83         	movff	Envia_Dado_Lcd@dado,3971	;volatile
  2757                           
  2758                           ;main.c: 84: PORTCbits.RC1=0;
  2759  000FF8  9282               	bcf	3970,1,c	;volatile
  2760                           
  2761                           ;main.c: 86: PORTCbits.RC1=1;
  2762  000FFA  8282               	bsf	3970,1,c	;volatile
  2763                           
  2764                           ;main.c: 87: dado=dado<<4;
  2765  000FFC  3803               	swapf	Envia_Dado_Lcd@dado,w,c
  2766  000FFE  0BF0               	andlw	240
  2767  001000  6E03               	movwf	Envia_Dado_Lcd@dado,c
  2768                           
  2769                           ;main.c: 88: PORTD=dado;
  2770  001002  C003  FF83         	movff	Envia_Dado_Lcd@dado,3971	;volatile
  2771                           
  2772                           ;main.c: 89: PORTCbits.RC1=0;
  2773  001006  9282               	bcf	3970,1,c	;volatile
  2774                           
  2775                           ;main.c: 91: Delay_LCD();
  2776  001008  EC25  F008         	call	i2_Delay_LCD	;wreg free
  2777  00100C  0012               	return		;funcret
  2778  00100E                     __end_of_Envia_Dado_Lcd:
  2779                           	opt stack 0
  2780                           pclatu	equ	0xFFB
  2781                           pclath	equ	0xFFA
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           intcon2	equ	0xFF1
  2790                           intcon3	equ	0xFF0
  2791                           postinc0	equ	0xFEE
  2792                           fsr0h	equ	0xFEA
  2793                           fsr0l	equ	0xFE9
  2794                           wreg	equ	0xFE8
  2795                           fsr1h	equ	0xFE2
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function i2_Delay_LCD *****************
  2804 ;; Defined at:
  2805 ;;		line 55 in file "main.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  Delay_LCD       2    0[COMRAM] int 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2819 ;;      Params:         0       0       0       0       0       0       0
  2820 ;;      Locals:         2       0       0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0
  2822 ;;      Totals:         2       0       0       0       0       0       0
  2823 ;;Total ram usage:        2 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_Envia_Dado_Lcd
  2829 ;;		i2_Envia_Comando_Lcd
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text20
  2834  00104A                     __ptext20:
  2835                           	opt stack 0
  2836  00104A                     i2_Delay_LCD:
  2837                           	opt stack 24
  2838                           
  2839                           ;main.c: 57: int i;
  2840                           ;main.c: 58: for (i=0;i<400;i++){}
  2841                           
  2842                           ;incstack = 0
  2843  00104A  0E00               	movlw	0
  2844  00104C  6E02               	movwf	i2Delay_LCD@i+1,c
  2845  00104E  0E00               	movlw	0
  2846  001050  6E01               	movwf	i2Delay_LCD@i,c
  2847  001052                     i2l1546:
  2848  001052  BE02               	btfsc	i2Delay_LCD@i+1,7,c
  2849  001054  D006               	goto	i2l1550
  2850  001056  0E90               	movlw	144
  2851  001058  5C01               	subwf	i2Delay_LCD@i,w,c
  2852  00105A  0E01               	movlw	1
  2853  00105C  5802               	subwfb	i2Delay_LCD@i+1,w,c
  2854  00105E  B0D8               	btfsc	status,0,c
  2855  001060  0012               	return	
  2856  001062                     i2l1550:
  2857  001062  4A01               	infsnz	i2Delay_LCD@i,f,c
  2858  001064  2A02               	incf	i2Delay_LCD@i+1,f,c
  2859  001066  D7F5               	goto	i2l1546
  2860  001068                     __end_ofi2_Delay_LCD:
  2861                           	opt stack 0
  2862                           pclatu	equ	0xFFB
  2863                           pclath	equ	0xFFA
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           intcon3	equ	0xFF0
  2873                           postinc0	equ	0xFEE
  2874                           fsr0h	equ	0xFEA
  2875                           fsr0l	equ	0xFE9
  2876                           wreg	equ	0xFE8
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function _getChar *****************
  2886 ;; Defined at:
  2887 ;;		line 121 in file "main.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  col             2    0[COMRAM] int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      unsigned char 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         2       0       0       0       0       0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0
  2903 ;;      Temps:          2       0       0       0       0       0       0
  2904 ;;      Totals:         4       0       0       0       0       0       0
  2905 ;;Total ram usage:        4 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_ISR
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text21
  2915  000604                     __ptext21:
  2916                           	opt stack 0
  2917  000604                     _getChar:
  2918                           	opt stack 26
  2919                           
  2920                           ;main.c: 122: switch(col){
  2921                           
  2922                           ;incstack = 0
  2923  000604  D0F1               	goto	i2l2060
  2924  000606                     i2l81:
  2925                           
  2926                           ;main.c: 124: PORTBbits.RB3=1;
  2927  000606  8681               	bsf	3969,3,c	;volatile
  2928                           
  2929                           ;main.c: 125: PORTBbits.RB4=0;
  2930  000608  9881               	bcf	3969,4,c	;volatile
  2931                           
  2932                           ;main.c: 126: PORTBbits.RB5=0;
  2933  00060A  9A81               	bcf	3969,5,c	;volatile
  2934                           
  2935                           ;main.c: 127: PORTBbits.RB6=0;
  2936  00060C  9C81               	bcf	3969,6,c	;volatile
  2937                           
  2938                           ;main.c: 129: if(PORTBbits.RB0==1){
  2939  00060E  A081               	btfss	3969,0,c	;volatile
  2940  000610  D004               	goto	i2l1836
  2941                           
  2942                           ;main.c: 130: PORTBbits.RB3=0;
  2943  000612  9681               	bcf	3969,3,c	;volatile
  2944                           
  2945                           ;main.c: 131: INTCONbits.INT0IF=0;
  2946  000614  92F2               	bcf	intcon,1,c	;volatile
  2947                           
  2948                           ;main.c: 132: return '1';
  2949  000616  0E31               	movlw	49
  2950  000618  0012               	return	
  2951  00061A                     i2l1836:
  2952                           
  2953                           ;main.c: 133: }
  2954                           ;main.c: 134: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  2955  00061A  0E06               	movlw	6
  2956  00061C  6E03               	movwf	??_getChar& (0+255),c
  2957  00061E  0E30               	movlw	48
  2958  000620                     i2u161_47:
  2959  000620  2EE8               	decfsz	wreg,f,c
  2960  000622  D7FE               	bra	i2u161_47
  2961  000624  2E03               	decfsz	??_getChar& (0+255),f,c
  2962  000626  D7FC               	bra	i2u161_47
  2963  000628  F000 F000          	nop2	
  2964                           
  2965                           ;main.c: 135: PORTBbits.RB3=0;
  2966  00062C  9681               	bcf	3969,3,c	;volatile
  2967                           
  2968                           ;main.c: 136: PORTBbits.RB4=1;
  2969  00062E  8881               	bsf	3969,4,c	;volatile
  2970                           
  2971                           ;main.c: 137: PORTBbits.RB5=0;
  2972  000630  9A81               	bcf	3969,5,c	;volatile
  2973                           
  2974                           ;main.c: 138: PORTBbits.RB6=0;
  2975  000632  9C81               	bcf	3969,6,c	;volatile
  2976                           
  2977                           ;main.c: 140: if(PORTBbits.RB0==1){
  2978  000634  A081               	btfss	3969,0,c	;volatile
  2979  000636  D004               	goto	i2l1854
  2980                           
  2981                           ;main.c: 141: PORTBbits.RB4=0;
  2982  000638  9881               	bcf	3969,4,c	;volatile
  2983                           
  2984                           ;main.c: 142: INTCONbits.INT0IF=0;
  2985  00063A  92F2               	bcf	intcon,1,c	;volatile
  2986                           
  2987                           ;main.c: 143: return '4';
  2988  00063C  0E34               	movlw	52
  2989  00063E  0012               	return	
  2990  000640                     i2l1854:
  2991                           
  2992                           ;main.c: 144: }
  2993                           ;main.c: 145: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  2994  000640  0E06               	movlw	6
  2995  000642  6E03               	movwf	??_getChar& (0+255),c
  2996  000644  0E30               	movlw	48
  2997  000646                     i2u162_47:
  2998  000646  2EE8               	decfsz	wreg,f,c
  2999  000648  D7FE               	bra	i2u162_47
  3000  00064A  2E03               	decfsz	??_getChar& (0+255),f,c
  3001  00064C  D7FC               	bra	i2u162_47
  3002  00064E  F000 F000          	nop2	
  3003                           
  3004                           ;main.c: 146: PORTBbits.RB3=0;
  3005  000652  9681               	bcf	3969,3,c	;volatile
  3006                           
  3007                           ;main.c: 147: PORTBbits.RB4=0;
  3008  000654  9881               	bcf	3969,4,c	;volatile
  3009                           
  3010                           ;main.c: 148: PORTBbits.RB5=1;
  3011  000656  8A81               	bsf	3969,5,c	;volatile
  3012                           
  3013                           ;main.c: 149: PORTBbits.RB6=0;
  3014  000658  9C81               	bcf	3969,6,c	;volatile
  3015                           
  3016                           ;main.c: 151: if(PORTBbits.RB0==1){
  3017  00065A  A081               	btfss	3969,0,c	;volatile
  3018  00065C  D004               	goto	i2l1872
  3019                           
  3020                           ;main.c: 152: PORTBbits.RB5=0;
  3021  00065E  9A81               	bcf	3969,5,c	;volatile
  3022                           
  3023                           ;main.c: 153: INTCONbits.INT0IF=0;
  3024  000660  92F2               	bcf	intcon,1,c	;volatile
  3025                           
  3026                           ;main.c: 154: return '7';
  3027  000662  0E37               	movlw	55
  3028  000664  0012               	return	
  3029  000666                     i2l1872:
  3030                           
  3031                           ;main.c: 155: }
  3032                           ;main.c: 156: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3033  000666  0E06               	movlw	6
  3034  000668  6E03               	movwf	??_getChar& (0+255),c
  3035  00066A  0E30               	movlw	48
  3036  00066C                     i2u163_47:
  3037  00066C  2EE8               	decfsz	wreg,f,c
  3038  00066E  D7FE               	bra	i2u163_47
  3039  000670  2E03               	decfsz	??_getChar& (0+255),f,c
  3040  000672  D7FC               	bra	i2u163_47
  3041  000674  F000 F000          	nop2	
  3042                           
  3043                           ;main.c: 157: PORTBbits.RB3=0;
  3044  000678  9681               	bcf	3969,3,c	;volatile
  3045                           
  3046                           ;main.c: 158: PORTBbits.RB4=0;
  3047  00067A  9881               	bcf	3969,4,c	;volatile
  3048                           
  3049                           ;main.c: 159: PORTBbits.RB5=0;
  3050  00067C  9A81               	bcf	3969,5,c	;volatile
  3051                           
  3052                           ;main.c: 160: PORTBbits.RB6=1;
  3053  00067E  8C81               	bsf	3969,6,c	;volatile
  3054                           
  3055                           ;main.c: 162: if(PORTBbits.RB0==1){
  3056  000680  A081               	btfss	3969,0,c	;volatile
  3057  000682  D004               	goto	i2l1890
  3058                           
  3059                           ;main.c: 163: PORTBbits.RB6=0;
  3060  000684  9C81               	bcf	3969,6,c	;volatile
  3061                           
  3062                           ;main.c: 164: INTCONbits.INT0IF=0;
  3063  000686  92F2               	bcf	intcon,1,c	;volatile
  3064                           
  3065                           ;main.c: 165: return '*';
  3066  000688  0E2A               	movlw	42
  3067  00068A  0012               	return	
  3068  00068C                     i2l1890:
  3069                           
  3070                           ;main.c: 166: }
  3071                           ;main.c: 167: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3072  00068C  0E06               	movlw	6
  3073  00068E  6E03               	movwf	??_getChar& (0+255),c
  3074  000690  0E30               	movlw	48
  3075  000692                     i2u164_47:
  3076  000692  2EE8               	decfsz	wreg,f,c
  3077  000694  D7FE               	bra	i2u164_47
  3078  000696  2E03               	decfsz	??_getChar& (0+255),f,c
  3079  000698  D7FC               	bra	i2u164_47
  3080  00069A  F000 F000          	nop2	
  3081                           
  3082                           ;main.c: 168: PORTBbits.RB3=0;
  3083  00069E  9681               	bcf	3969,3,c	;volatile
  3084                           
  3085                           ;main.c: 169: PORTBbits.RB4=0;
  3086  0006A0  9881               	bcf	3969,4,c	;volatile
  3087                           
  3088                           ;main.c: 170: PORTBbits.RB5=0;
  3089  0006A2  9A81               	bcf	3969,5,c	;volatile
  3090                           
  3091                           ;main.c: 171: PORTBbits.RB6=0;
  3092  0006A4  9C81               	bcf	3969,6,c	;volatile
  3093  0006A6                     i2l1900:
  3094                           
  3095                           ;main.c: 175: PORTBbits.RB3=1;
  3096  0006A6  8681               	bsf	3969,3,c	;volatile
  3097                           
  3098                           ;main.c: 176: PORTBbits.RB4=0;
  3099  0006A8  9881               	bcf	3969,4,c	;volatile
  3100                           
  3101                           ;main.c: 177: PORTBbits.RB5=0;
  3102  0006AA  9A81               	bcf	3969,5,c	;volatile
  3103                           
  3104                           ;main.c: 178: PORTBbits.RB6=0;
  3105  0006AC  9C81               	bcf	3969,6,c	;volatile
  3106                           
  3107                           ;main.c: 180: if(PORTBbits.RB1==1){
  3108  0006AE  A281               	btfss	3969,1,c	;volatile
  3109  0006B0  D004               	goto	i2l1916
  3110                           
  3111                           ;main.c: 181: PORTBbits.RB3=0;
  3112  0006B2  9681               	bcf	3969,3,c	;volatile
  3113                           
  3114                           ;main.c: 182: INTCON3bits.INT1IF=0;
  3115  0006B4  90F0               	bcf	intcon3,0,c	;volatile
  3116                           
  3117                           ;main.c: 183: return '2';
  3118  0006B6  0E32               	movlw	50
  3119  0006B8  0012               	return	
  3120  0006BA                     i2l1916:
  3121                           
  3122                           ;main.c: 184: }
  3123                           ;main.c: 185: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3124  0006BA  0E06               	movlw	6
  3125  0006BC  6E03               	movwf	??_getChar& (0+255),c
  3126  0006BE  0E30               	movlw	48
  3127  0006C0                     i2u165_47:
  3128  0006C0  2EE8               	decfsz	wreg,f,c
  3129  0006C2  D7FE               	bra	i2u165_47
  3130  0006C4  2E03               	decfsz	??_getChar& (0+255),f,c
  3131  0006C6  D7FC               	bra	i2u165_47
  3132  0006C8  F000 F000          	nop2	
  3133                           
  3134                           ;main.c: 186: PORTBbits.RB3=0;
  3135  0006CC  9681               	bcf	3969,3,c	;volatile
  3136                           
  3137                           ;main.c: 187: PORTBbits.RB4=1;
  3138  0006CE  8881               	bsf	3969,4,c	;volatile
  3139                           
  3140                           ;main.c: 188: PORTBbits.RB5=0;
  3141  0006D0  9A81               	bcf	3969,5,c	;volatile
  3142                           
  3143                           ;main.c: 189: PORTBbits.RB6=0;
  3144  0006D2  9C81               	bcf	3969,6,c	;volatile
  3145                           
  3146                           ;main.c: 191: if(PORTBbits.RB1==1){
  3147  0006D4  A281               	btfss	3969,1,c	;volatile
  3148  0006D6  D004               	goto	i2l1934
  3149                           
  3150                           ;main.c: 192: PORTBbits.RB4=0;
  3151  0006D8  9881               	bcf	3969,4,c	;volatile
  3152                           
  3153                           ;main.c: 193: INTCON3bits.INT1IF=0;
  3154  0006DA  90F0               	bcf	intcon3,0,c	;volatile
  3155                           
  3156                           ;main.c: 194: return '5';
  3157  0006DC  0E35               	movlw	53
  3158  0006DE  0012               	return	
  3159  0006E0                     i2l1934:
  3160                           
  3161                           ;main.c: 195: }
  3162                           ;main.c: 196: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3163  0006E0  0E06               	movlw	6
  3164  0006E2  6E03               	movwf	??_getChar& (0+255),c
  3165  0006E4  0E30               	movlw	48
  3166  0006E6                     i2u166_47:
  3167  0006E6  2EE8               	decfsz	wreg,f,c
  3168  0006E8  D7FE               	bra	i2u166_47
  3169  0006EA  2E03               	decfsz	??_getChar& (0+255),f,c
  3170  0006EC  D7FC               	bra	i2u166_47
  3171  0006EE  F000 F000          	nop2	
  3172                           
  3173                           ;main.c: 197: PORTBbits.RB3=0;
  3174  0006F2  9681               	bcf	3969,3,c	;volatile
  3175                           
  3176                           ;main.c: 198: PORTBbits.RB4=0;
  3177  0006F4  9881               	bcf	3969,4,c	;volatile
  3178                           
  3179                           ;main.c: 199: PORTBbits.RB5=1;
  3180  0006F6  8A81               	bsf	3969,5,c	;volatile
  3181                           
  3182                           ;main.c: 200: PORTBbits.RB6=0;
  3183  0006F8  9C81               	bcf	3969,6,c	;volatile
  3184                           
  3185                           ;main.c: 202: if(PORTBbits.RB1==1){
  3186  0006FA  A281               	btfss	3969,1,c	;volatile
  3187  0006FC  D004               	goto	i2l1952
  3188                           
  3189                           ;main.c: 203: PORTBbits.RB5=0;
  3190  0006FE  9A81               	bcf	3969,5,c	;volatile
  3191                           
  3192                           ;main.c: 204: INTCON3bits.INT1IF=0;
  3193  000700  90F0               	bcf	intcon3,0,c	;volatile
  3194                           
  3195                           ;main.c: 205: return '8';
  3196  000702  0E38               	movlw	56
  3197  000704  0012               	return	
  3198  000706                     i2l1952:
  3199                           
  3200                           ;main.c: 206: }
  3201                           ;main.c: 207: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3202  000706  0E06               	movlw	6
  3203  000708  6E03               	movwf	??_getChar& (0+255),c
  3204  00070A  0E30               	movlw	48
  3205  00070C                     i2u167_47:
  3206  00070C  2EE8               	decfsz	wreg,f,c
  3207  00070E  D7FE               	bra	i2u167_47
  3208  000710  2E03               	decfsz	??_getChar& (0+255),f,c
  3209  000712  D7FC               	bra	i2u167_47
  3210  000714  F000 F000          	nop2	
  3211                           
  3212                           ;main.c: 208: PORTBbits.RB3=0;
  3213  000718  9681               	bcf	3969,3,c	;volatile
  3214                           
  3215                           ;main.c: 209: PORTBbits.RB4=0;
  3216  00071A  9881               	bcf	3969,4,c	;volatile
  3217                           
  3218                           ;main.c: 210: PORTBbits.RB5=0;
  3219  00071C  9A81               	bcf	3969,5,c	;volatile
  3220                           
  3221                           ;main.c: 211: PORTBbits.RB6=1;
  3222  00071E  8C81               	bsf	3969,6,c	;volatile
  3223                           
  3224                           ;main.c: 213: if(PORTBbits.RB1==1){
  3225  000720  A281               	btfss	3969,1,c	;volatile
  3226  000722  D004               	goto	i2l1970
  3227                           
  3228                           ;main.c: 214: PORTBbits.RB6=0;
  3229  000724  9C81               	bcf	3969,6,c	;volatile
  3230                           
  3231                           ;main.c: 215: INTCON3bits.INT1IF=0;
  3232  000726  90F0               	bcf	intcon3,0,c	;volatile
  3233                           
  3234                           ;main.c: 216: return '0';
  3235  000728  0E30               	movlw	48
  3236  00072A  0012               	return	
  3237  00072C                     i2l1970:
  3238                           
  3239                           ;main.c: 217: }
  3240                           ;main.c: 218: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3241  00072C  0E06               	movlw	6
  3242  00072E  6E03               	movwf	??_getChar& (0+255),c
  3243  000730  0E30               	movlw	48
  3244  000732                     i2u168_47:
  3245  000732  2EE8               	decfsz	wreg,f,c
  3246  000734  D7FE               	bra	i2u168_47
  3247  000736  2E03               	decfsz	??_getChar& (0+255),f,c
  3248  000738  D7FC               	bra	i2u168_47
  3249  00073A  F000 F000          	nop2	
  3250                           
  3251                           ;main.c: 219: PORTBbits.RB3=0;
  3252  00073E  9681               	bcf	3969,3,c	;volatile
  3253                           
  3254                           ;main.c: 220: PORTBbits.RB4=0;
  3255  000740  9881               	bcf	3969,4,c	;volatile
  3256                           
  3257                           ;main.c: 221: PORTBbits.RB5=0;
  3258  000742  9A81               	bcf	3969,5,c	;volatile
  3259                           
  3260                           ;main.c: 222: PORTBbits.RB6=0;
  3261  000744  9C81               	bcf	3969,6,c	;volatile
  3262  000746                     i2l1980:
  3263                           
  3264                           ;main.c: 225: PORTBbits.RB3=1;
  3265  000746  8681               	bsf	3969,3,c	;volatile
  3266                           
  3267                           ;main.c: 226: PORTBbits.RB4=0;
  3268  000748  9881               	bcf	3969,4,c	;volatile
  3269                           
  3270                           ;main.c: 227: PORTBbits.RB5=0;
  3271  00074A  9A81               	bcf	3969,5,c	;volatile
  3272                           
  3273                           ;main.c: 228: PORTBbits.RB6=0;
  3274  00074C  9C81               	bcf	3969,6,c	;volatile
  3275                           
  3276                           ;main.c: 230: if(PORTBbits.RB2==1){
  3277  00074E  A481               	btfss	3969,2,c	;volatile
  3278  000750  D004               	goto	i2l1996
  3279                           
  3280                           ;main.c: 231: PORTBbits.RB3=0;
  3281  000752  9681               	bcf	3969,3,c	;volatile
  3282                           
  3283                           ;main.c: 232: INTCON3bits.INT2IF=0;
  3284  000754  92F0               	bcf	intcon3,1,c	;volatile
  3285                           
  3286                           ;main.c: 233: return '3';
  3287  000756  0E33               	movlw	51
  3288  000758  0012               	return	
  3289  00075A                     i2l1996:
  3290                           
  3291                           ;main.c: 234: }
  3292                           ;main.c: 235: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3293  00075A  0E06               	movlw	6
  3294  00075C  6E03               	movwf	??_getChar& (0+255),c
  3295  00075E  0E30               	movlw	48
  3296  000760                     i2u169_47:
  3297  000760  2EE8               	decfsz	wreg,f,c
  3298  000762  D7FE               	bra	i2u169_47
  3299  000764  2E03               	decfsz	??_getChar& (0+255),f,c
  3300  000766  D7FC               	bra	i2u169_47
  3301  000768  F000 F000          	nop2	
  3302                           
  3303                           ;main.c: 236: PORTBbits.RB3=0;
  3304  00076C  9681               	bcf	3969,3,c	;volatile
  3305                           
  3306                           ;main.c: 237: PORTBbits.RB4=1;
  3307  00076E  8881               	bsf	3969,4,c	;volatile
  3308                           
  3309                           ;main.c: 238: PORTBbits.RB5=0;
  3310  000770  9A81               	bcf	3969,5,c	;volatile
  3311                           
  3312                           ;main.c: 239: PORTBbits.RB6=0;
  3313  000772  9C81               	bcf	3969,6,c	;volatile
  3314                           
  3315                           ;main.c: 241: if(PORTBbits.RB2==1){
  3316  000774  A481               	btfss	3969,2,c	;volatile
  3317  000776  D004               	goto	i2l2014
  3318                           
  3319                           ;main.c: 242: PORTBbits.RB4=0;
  3320  000778  9881               	bcf	3969,4,c	;volatile
  3321                           
  3322                           ;main.c: 243: INTCON3bits.INT2IF=0;
  3323  00077A  92F0               	bcf	intcon3,1,c	;volatile
  3324                           
  3325                           ;main.c: 244: return '6';
  3326  00077C  0E36               	movlw	54
  3327  00077E  0012               	return	
  3328  000780                     i2l2014:
  3329                           
  3330                           ;main.c: 245: }
  3331                           ;main.c: 246: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3332  000780  0E06               	movlw	6
  3333  000782  6E03               	movwf	??_getChar& (0+255),c
  3334  000784  0E30               	movlw	48
  3335  000786                     i2u170_47:
  3336  000786  2EE8               	decfsz	wreg,f,c
  3337  000788  D7FE               	bra	i2u170_47
  3338  00078A  2E03               	decfsz	??_getChar& (0+255),f,c
  3339  00078C  D7FC               	bra	i2u170_47
  3340  00078E  F000 F000          	nop2	
  3341                           
  3342                           ;main.c: 247: PORTBbits.RB3=0;
  3343  000792  9681               	bcf	3969,3,c	;volatile
  3344                           
  3345                           ;main.c: 248: PORTBbits.RB4=0;
  3346  000794  9881               	bcf	3969,4,c	;volatile
  3347                           
  3348                           ;main.c: 249: PORTBbits.RB5=1;
  3349  000796  8A81               	bsf	3969,5,c	;volatile
  3350                           
  3351                           ;main.c: 250: PORTBbits.RB6=0;
  3352  000798  9C81               	bcf	3969,6,c	;volatile
  3353                           
  3354                           ;main.c: 252: if(PORTBbits.RB2==1){
  3355  00079A  A481               	btfss	3969,2,c	;volatile
  3356  00079C  D004               	goto	i2l2032
  3357                           
  3358                           ;main.c: 253: PORTBbits.RB5=0;
  3359  00079E  9A81               	bcf	3969,5,c	;volatile
  3360                           
  3361                           ;main.c: 254: INTCON3bits.INT2IF=0;
  3362  0007A0  92F0               	bcf	intcon3,1,c	;volatile
  3363                           
  3364                           ;main.c: 255: return '9';
  3365  0007A2  0E39               	movlw	57
  3366  0007A4  0012               	return	
  3367  0007A6                     i2l2032:
  3368                           
  3369                           ;main.c: 256: }
  3370                           ;main.c: 257: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3371  0007A6  0E06               	movlw	6
  3372  0007A8  6E03               	movwf	??_getChar& (0+255),c
  3373  0007AA  0E30               	movlw	48
  3374  0007AC                     i2u171_47:
  3375  0007AC  2EE8               	decfsz	wreg,f,c
  3376  0007AE  D7FE               	bra	i2u171_47
  3377  0007B0  2E03               	decfsz	??_getChar& (0+255),f,c
  3378  0007B2  D7FC               	bra	i2u171_47
  3379  0007B4  F000 F000          	nop2	
  3380                           
  3381                           ;main.c: 258: PORTBbits.RB3=0;
  3382  0007B8  9681               	bcf	3969,3,c	;volatile
  3383                           
  3384                           ;main.c: 259: PORTBbits.RB4=0;
  3385  0007BA  9881               	bcf	3969,4,c	;volatile
  3386                           
  3387                           ;main.c: 260: PORTBbits.RB5=0;
  3388  0007BC  9A81               	bcf	3969,5,c	;volatile
  3389                           
  3390                           ;main.c: 261: PORTBbits.RB6=1;
  3391  0007BE  8C81               	bsf	3969,6,c	;volatile
  3392                           
  3393                           ;main.c: 263: if(PORTBbits.RB2==1){
  3394  0007C0  A481               	btfss	3969,2,c	;volatile
  3395  0007C2  D004               	goto	i2l2050
  3396                           
  3397                           ;main.c: 264: PORTBbits.RB6=0;
  3398  0007C4  9C81               	bcf	3969,6,c	;volatile
  3399                           
  3400                           ;main.c: 265: INTCON3bits.INT2IF=0;
  3401  0007C6  92F0               	bcf	intcon3,1,c	;volatile
  3402                           
  3403                           ;main.c: 266: return '#';
  3404  0007C8  0E23               	movlw	35
  3405  0007CA  0012               	return	
  3406  0007CC                     i2l2050:
  3407                           
  3408                           ;main.c: 267: }
  3409                           ;main.c: 268: _delay((unsigned long)((10/5)*(8000000/4000.0)));
  3410  0007CC  0E06               	movlw	6
  3411  0007CE  6E03               	movwf	??_getChar& (0+255),c
  3412  0007D0  0E30               	movlw	48
  3413  0007D2                     i2u172_47:
  3414  0007D2  2EE8               	decfsz	wreg,f,c
  3415  0007D4  D7FE               	bra	i2u172_47
  3416  0007D6  2E03               	decfsz	??_getChar& (0+255),f,c
  3417  0007D8  D7FC               	bra	i2u172_47
  3418  0007DA  F000 F000          	nop2	
  3419                           
  3420                           ;main.c: 269: PORTBbits.RB3=0;
  3421  0007DE  9681               	bcf	3969,3,c	;volatile
  3422                           
  3423                           ;main.c: 270: PORTBbits.RB4=0;
  3424  0007E0  9881               	bcf	3969,4,c	;volatile
  3425                           
  3426                           ;main.c: 271: PORTBbits.RB5=0;
  3427  0007E2  9A81               	bcf	3969,5,c	;volatile
  3428                           
  3429                           ;main.c: 272: PORTBbits.RB6=0;
  3430  0007E4  9C81               	bcf	3969,6,c	;volatile
  3431                           
  3432                           ;main.c: 274: }
  3433  0007E6  0012               	return	
  3434  0007E8                     i2l2060:
  3435  0007E8  C001  F003         	movff	getChar@col,??_getChar
  3436  0007EC  C002  F004         	movff	getChar@col+1,??_getChar+1
  3437                           
  3438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3439                           ; Switch size 1, requested type "space"
  3440                           ; Number of cases is 1, Range of values is 0 to 0
  3441                           ; switch strategies available:
  3442                           ; Name         Instructions Cycles
  3443                           ; simple_byte            4     3 (average)
  3444                           ;	Chosen strategy is simple_byte
  3445  0007F0  5004               	movf	??_getChar+1,w,c
  3446  0007F2  0A00               	xorlw	0	; case 0
  3447  0007F4  A4D8               	btfss	status,2,c
  3448  0007F6  0012               	return	
  3449                           
  3450                           ; Switch size 1, requested type "space"
  3451                           ; Number of cases is 3, Range of values is 1 to 3
  3452                           ; switch strategies available:
  3453                           ; Name         Instructions Cycles
  3454                           ; simple_byte           10     6 (average)
  3455                           ;	Chosen strategy is simple_byte
  3456  0007F8  5003               	movf	??_getChar,w,c
  3457  0007FA  0A01               	xorlw	1	; case 1
  3458  0007FC  B4D8               	btfsc	status,2,c
  3459  0007FE  D703               	goto	i2l81
  3460  000800  0A03               	xorlw	3	; case 2
  3461  000802  B4D8               	btfsc	status,2,c
  3462  000804  D750               	goto	i2l1900
  3463  000806  0A01               	xorlw	1	; case 3
  3464  000808  A4D8               	btfss	status,2,c
  3465  00080A  0012               	return	
  3466  00080C  D79C               	goto	i2l1980
  3467  00080E                     __end_of_getChar:
  3468                           	opt stack 0
  3469                           pclatu	equ	0xFFB
  3470                           pclath	equ	0xFFA
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           intcon2	equ	0xFF1
  3479                           intcon3	equ	0xFF0
  3480                           postinc0	equ	0xFEE
  3481                           fsr0h	equ	0xFEA
  3482                           fsr0l	equ	0xFE9
  3483                           wreg	equ	0xFE8
  3484                           fsr1h	equ	0xFE2
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           pclatu	equ	0xFFB
  3492                           pclath	equ	0xFFA
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           intcon2	equ	0xFF1
  3501                           intcon3	equ	0xFF0
  3502                           postinc0	equ	0xFEE
  3503                           fsr0h	equ	0xFEA
  3504                           fsr0l	equ	0xFE9
  3505                           wreg	equ	0xFE8
  3506                           fsr1h	equ	0xFE2
  3507                           fsr1l	equ	0xFE1
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           fsr2h	equ	0xFDA
  3511                           fsr2l	equ	0xFD9
  3512                           status	equ	0xFD8
  3513                           
  3514                           	psect	rparam
  3515  0000                     pclatu	equ	0xFFB
  3516                           pclath	equ	0xFFA
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           intcon2	equ	0xFF1
  3525                           intcon3	equ	0xFF0
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           fsr1h	equ	0xFE2
  3531                           fsr1l	equ	0xFE1
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538                           	psect	temp
  3539  000036                     btemp:
  3540                           	opt stack 0
  3541  000036                     	ds	1
  3542  0000                     int$flags	set	btemp
  3543                           pclatu	equ	0xFFB
  3544                           pclath	equ	0xFFA
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           intcon2	equ	0xFF1
  3553                           intcon3	equ	0xFF0
  3554                           postinc0	equ	0xFEE
  3555                           fsr0h	equ	0xFEA
  3556                           fsr0l	equ	0xFE9
  3557                           wreg	equ	0xFE8
  3558                           fsr1h	equ	0xFE2
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8


Data Sizes:
    Strings     1
    Constant    0
    Data        0
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      53
    BANK0           160      3     102
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 1
		 -> STR_1(CODE[1]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 

    append@s	PTR unsigned char  size(2) Largest target is 99
		 -> angle(BANK0[99]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_writeToLCD
    _writeToLCD->___ftadd
    i2_Envia_Comando_Lcd->i2_Delay_LCD
    _atoi->___wmul
    _append->_strlen
    ___ftmul->___ftpack
    ___ftadd->___ftmul
    ___awtoft->_atoi
    _Envia_Dado_Lcd->i2_Delay_LCD

Critical Paths under _main in BANK0

    _Inicializa_Lcd->_Envia_Comando_Lcd
    _Envia_Comando_Lcd->_Delay_LCD

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     159
                     _Inicializa_Lcd
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Lcd                                       0     0      0     159
            _Delay_inicializacao_LCD
                  _Envia_Comando_Lcd
 ---------------------------------------------------------------------------------
 (2) _Envia_Comando_Lcd                                    1     1      0     113
                                              2 BANK0      1     1      0
                          _Delay_LCD
 ---------------------------------------------------------------------------------
 (3) _Delay_LCD                                            2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Delay_inicializacao_LCD                              2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0   10044
                                             38 COMRAM    14    14      0
                            _getChar
                         _writeToLCD
 ---------------------------------------------------------------------------------
 (5) _writeToLCD                                           3     3      0    9830
                                             35 COMRAM     3     3      0
                     _Envia_Dado_Lcd
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _append
                               _atoi
                             _strcpy
                i2_Envia_Comando_Lcd
 ---------------------------------------------------------------------------------
 (6) i2_Envia_Comando_Lcd                                  1     1      0     113
                                              2 COMRAM     1     1      0
                        i2_Delay_LCD
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _append                                               7     4      3     415
                                              6 COMRAM     7     4      3
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     316
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    2587
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3203
                                             23 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2186
                                             13 COMRAM     4     1      3
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _Envia_Dado_Lcd                                       1     1      0     113
                                              2 COMRAM     1     1      0
                        i2_Delay_LCD
 ---------------------------------------------------------------------------------
 (7) i2_Delay_LCD                                          2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _getChar                                              4     2      2     214
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Inicializa_Lcd
     _Delay_inicializacao_LCD
     _Envia_Comando_Lcd
       _Delay_LCD

 _ISR (ROOT)
   _getChar
   _writeToLCD
     _Envia_Dado_Lcd
       i2_Delay_LCD
     ___awtoft
       ___ftpack
       _atoi (ARG)
         ___wmul
         _isdigit
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
     ___fttol
     _append
       _strlen
     _atoi
       ___wmul
       _isdigit
     _strcpy
     i2_Envia_Comando_Lcd
       i2_Delay_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      3      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      35       1       56.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      15        0.0%
DATA                 0      0      9B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 03 20:48:05 2020

             ___wmul@multiplicand 0003                      ___ftadd@exp1 0023  
                    ___ftadd@exp2 0022                      ___ftadd@sign 0021  
                             l109 0E46                               _PR2 000FCB  
                             _ISR 0008                               wreg 000FE8  
                            ?_ISR 0001                              l1472 0F5E  
                            l1476 0F74                              l1592 0F9C  
                            l1588 0F86                              STR_1 0601  
                            i2l81 0606                    _Inicializa_Lcd 100E  
                            _atoi 0C82                              _main 0DFE  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0036  
                            prodh 000FF4                              prodl 000FF3  
                            start 00BE                      ___ftmul@cntr 0016  
                    ___param_bank 000000                      ___ftmul@sign 0017  
           writeToLCD@angle_servo 0024                             ??_ISR 0027  
                    ___fttol@exp1 000F                      ___fttol@lval 000B  
                           ?_atoi 0007                             ?_main 0001  
                 __end_of___ftadd 09BA                   __end_of___ftmul 0BA2  
                 __end_of___fttol 0AAE                             i2l352 0DDE  
                           i2l285 0D46                             i2l390 092C  
                           i2l375 0852                             i2l379 087C  
                           i2l399 0948                             _PORTD 000F83  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                   __end_of_getChar 080E  
               _Envia_Comando_Lcd 0F2C                     ___awtoft@sign 0011  
                           _angle 0060            __end_of_Inicializa_Lcd 102C  
                 __end_of_isdigit 104A                     ___ftpack@sign 0005  
                           atoi@a 000C                             atoi@s 0007  
              ?_Envia_Comando_Lcd 0001                             pclath 000FFA  
                           tablat 000FF5           _Delay_inicializacao_LCD 0F7C  
                           status 000FD8               ??_Envia_Comando_Lcd 00C5  
                 __initialization 1068                      __end_of_atoi 0D50  
                    __end_of_main 0E48                __size_of_Delay_LCD 0028  
                          ??_atoi 0009                            ??_main 00C6  
                   ___fttol@sign1 000A                     __activetblptr 000002  
       __end_of_Envia_Comando_Lcd 0F54                   ?_Inicializa_Lcd 0001  
                          _CCPR1L 000FBE                  __end_of___awtoft 0EFC  
                __end_of___ftpack 0DFE                            u105_41 081E  
                          i2l2100 0056                            u106_41 0832  
                          i2l2014 0780                            i2l2032 07A6  
                          i2l2112 007E                            i2l2050 07CC  
                          i2l2106 006A                            i2l2060 07E8  
                          i2l1500 0D60                            i2l1512 0DAC  
                          i2l1504 0D6E                            i2l2080 0BE2  
                          i2l1514 0DCA                            i2l1506 0D78  
                          i2l1516 0DD4                            i2l1508 0D96  
                          i2l1540 1042                            i2l1620 0CDA  
                          i2l1604 0C84                            i2l2076 0BD4  
                          i2l1550 1062                            i2l1702 0994  
                          i2l1622 0D10                            i2l1606 0C88  
                          i2l1712 0AD6                            i2l1800 0A74  
                          i2l1624 0D14                            i2l1616 0CC8  
                          i2l1632 0F06                            i2l1546 1052  
                          i2l1650 088A                            i2l1802 0A80  
                          i2l1482 0E94                            i2l1634 0F0E  
                          i2l1900 06A6                            i2l1644 0860  
                          i2l1732 0B30                            i2l1804 0A86  
                          i2l1484 0E98                            u133_41 09CA  
                          i2l1742 0B58                            i2l1718 0AFE  
                          i2l1672 08DC                            i2l1736 0B40  
                          i2l1808 0A9C                            i2l1762 0ED8  
                          i2l1674 08E6                            i2l1666 08BA  
                          i2l1746 0B68                            i2l1916 06BA  
                          i2l1836 061A                            i2l1692 0964  
                          i2l1684 091A                            i2l1676 08F0  
                          i2l1772 09E6                            u126_41 0ABE  
                          i2l1934 06E0                            i2l1854 0640  
                          i2l1686 0924                            i2l1678 08F8  
                          i2l1790 0A4C                            i2l1952 0706  
                          i2l1872 0666                            i2l1970 072C  
                          i2l1890 068C                            i2l1794 0A5C  
                          i2l1980 0746                            i2l1996 075A  
                          u128_41 0AE6                      ?i2_Delay_LCD 0001  
        Envia_Comando_Lcd@comando 00C5                            ___wmul 0FA4  
                       ??___ftadd 001E                         ??___ftmul 000F  
                       ??___fttol 0005                            _append 0E48  
                          clear_0 106E       __end_ofi2_Envia_Comando_Lcd 0FEC  
                       ??_getChar 0003                            _strcpy 0EFC  
                          _strlen 0E8A             ___ftmul@f3_as_product 0013  
                       ??_isdigit 0001                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8         ??_Delay_inicializacao_LCD 00C3  
               __end_of_Delay_LCD 0F7C                  ??_Envia_Dado_Lcd 0003  
                      __accesstop 0060           __end_of__initialization 1076  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 0018  
                      ___ftadd@f2 001B                     ___rparam_used 000001  
                      ___awtoft@c 000E                        ___ftmul@f1 0009  
                      ___ftmul@f2 000C                        ___fttol@f1 0001  
                  __pcstackCOMRAM 0001        __size_of_Envia_Comando_Lcd 0028  
                      __pbssBANK0 0060                           ?___wmul 0001  
                         ?_append 0007                         ?___awtoft 000E  
                       ?___ftpack 0001                           ?_strcpy 0001  
                         ?_strlen 0001                           __Hparam 0000  
                         __Lparam 0000              __size_ofi2_Delay_LCD 001E  
                         ___ftadd 080E                   __size_of___wmul 0026  
                         ___ftmul 0AAE                           ___fttol 09BA  
                    __psmallconst 0600                   __size_of_append 0042  
                         __pcinit 1068                        ??___awtoft 0011  
                      ??___ftpack 0006                           _getChar 0604  
                         __ramtop 0600                           __ptext0 0DFE  
                         __ptext1 100E                           __ptext2 0F2C  
                         __ptext3 0F54                           __ptext4 0F7C  
                         __ptext6 0BA2                           __ptext7 0FCA  
                         __ptext8 0EFC                           __ptext9 0C82  
                         _command 0035                   __size_of_strcpy 0030  
                 __size_of_strlen 003A                      __size_of_ISR 00B6  
                ??_Inicializa_Lcd 00C6                         _T2CONbits 000FCA  
                         _isdigit 102C                           append@c 0009  
                         append@s 0007              end_of_initialization 1076  
                      getChar@col 0001                     __Lmediumconst 0000  
                         postinc0 000FEE                           postinc2 000FDE  
                         strlen@s 0001                Envia_Dado_Lcd@dado 0003  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _TRISCbits 000F94                       _CCP1CONbits 000FBD  
                       _Delay_LCD 0F54                       ___ftmul@exp 0012  
                      _writeToLCD 0BA2                    __end_of___wmul 0FCA  
                  __end_of_append 0E8A                    __end_of_strcpy 0F2C  
                  __end_of_strlen 0EC4               start_initialization 1068  
                     __end_of_ISR 00BE      __size_ofi2_Envia_Comando_Lcd 0022  
        Delay_inicializacao_LCD@i 00C3                        ?_Delay_LCD 0001  
                        ??___wmul 0005                          ??_append 000A  
                        ??_strcpy 0005                          ??_strlen 0003  
               __size_of___awtoft 0038                 __size_of___ftpack 00AE  
        ?_Delay_inicializacao_LCD 0001                       __pbssCOMRAM 0035  
                   __pcstackBANK0 00C3                         __pintcode 0008  
         __size_of_Envia_Dado_Lcd 0022                          ?___ftadd 0018  
                        ?___ftmul 0009                          ?___fttol 0001  
                     ?_writeToLCD 0001                          ?_getChar 0001  
                    i2Delay_LCD@i 0001                       __smallconst 0600  
                        ?_isdigit 0001                    ___wmul@product 0005  
                   ??i2_Delay_LCD 0001                       ??_Delay_LCD 00C3  
                        i2u135_40 0A04                          i2u135_45 09FC  
                        i2u161_47 0620                          i2u170_47 0786  
                        i2u162_47 0646                          i2u171_47 07AC  
                        i2u163_47 066C                          i2u172_47 07D2  
                        i2u164_47 0692                          i2u165_47 06C0  
                        i2u166_47 06E6                          i2u167_47 070C  
                        i2u168_47 0732                          i2u169_47 0760  
                       append@len 000C   __end_of_Delay_inicializacao_LCD 0FA4  
               ___wmul@multiplier 0001                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0               __size_of_writeToLCD 00E0  
                        __Hrparam 0000                          __Lrparam 0000  
             i2_Envia_Comando_Lcd 0FCA               __end_ofi2_Delay_LCD 1068  
                __size_of___ftadd 01AC                  __size_of___ftmul 00F4  
                __size_of___fttol 00F4                          ___awtoft 0EC4  
                        ___ftpack 0D50                       _isdigit$779 0002  
                __size_of_getChar 020A                  __size_of_isdigit 001E  
            ?i2_Envia_Comando_Lcd 0001                          __ptext10 102C  
                        __ptext11 0FA4                          __ptext20 104A  
                        __ptext12 0E48                          __ptext21 0604  
                        __ptext13 0E8A                          __ptext14 09BA  
                        __ptext15 0AAE                          __ptext16 080E  
                        __ptext17 0EC4                          __ptext18 0D50  
                        __ptext19 0FEC                        strcpy@from 0003  
         __size_of_Inicializa_Lcd 001E                     __size_of_atoi 00CE  
                   __size_of_main 004A                    _Envia_Dado_Lcd 0FEC  
                        int$flags 0036                          atoi@sign 000B  
                      Delay_LCD@i 00C3                        _INTCONbits 000FF2  
           ??i2_Envia_Comando_Lcd 0003                          isdigit@c 0003  
                        intlevel2 0000  __size_of_Delay_inicializacao_LCD 0028  
                     i2_Delay_LCD 104A            __end_of_Envia_Dado_Lcd 100E  
      i2Envia_Comando_Lcd@comando 0003                      ??_writeToLCD 0024  
                        strcpy@cp 0005                          strlen@cp 0005  
                        strcpy@to 0001                __end_of_writeToLCD 0C82  
                 ?_Envia_Dado_Lcd 0001  

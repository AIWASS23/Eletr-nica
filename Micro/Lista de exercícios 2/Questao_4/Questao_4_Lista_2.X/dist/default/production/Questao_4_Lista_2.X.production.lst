

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Aug 31 19:33:06 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F45K20 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  000600                     __psmallconst:
    78                           	opt stack 0
    79  000600  00                 	db	0
    80  000601                     _dpowers:
    81                           	opt stack 0
    82  000601  0001               	dw	1
    83  000603  0000               	dw	0
    84  000605  000A               	dw	10
    85  000607  0000               	dw	0
    86  000609  0064               	dw	100
    87  00060B  0000               	dw	0
    88  00060D  03E8               	dw	1000
    89  00060F  0000               	dw	0
    90  000611  2710               	dw	10000
    91  000613  0000               	dw	0
    92  000615  86A0               	dw	34464
    93  000617  0001               	dw	1
    94  000619  4240               	dw	16960
    95  00061B  000F               	dw	15
    96  00061D  9680               	dw	38528
    97  00061F  0098               	dw	152
    98  000621  E100               	dw	57600
    99  000623  05F5               	dw	1525
   100  000625  CA00               	dw	51712
   101  000627  3B9A               	dw	15258
   102  000629                     __end_of_dpowers:
   103                           	opt stack 0
   104  000629                     __powers_:
   105                           	opt stack 0
   106  000629  00                 	db	0
   107  00062A  80                 	db	128
   108  00062B  3F                 	db	63
   109  00062C  00                 	db	0
   110  00062D  20                 	db	32
   111  00062E  41                 	db	65
   112  00062F  00                 	db	0
   113  000630  C8                 	db	200
   114  000631  42                 	db	66
   115  000632  00                 	db	0
   116  000633  7A                 	db	122
   117  000634  44                 	db	68
   118  000635  40                 	db	64
   119  000636  1C                 	db	28
   120  000637  46                 	db	70
   121  000638  50                 	db	80
   122  000639  C3                 	db	195
   123  00063A  47                 	db	71
   124  00063B  24                 	db	36
   125  00063C  74                 	db	116
   126  00063D  49                 	db	73
   127  00063E  97                 	db	151
   128  00063F  18                 	db	24
   129  000640  4B                 	db	75
   130  000641  BC                 	db	188
   131  000642  BE                 	db	190
   132  000643  4C                 	db	76
   133  000644  6B                 	db	107
   134  000645  6E                 	db	110
   135  000646  4E                 	db	78
   136  000647  03                 	db	3
   137  000648  15                 	db	21
   138  000649  50                 	db	80
   139  00064A  79                 	db	121
   140  00064B  AD                 	db	173
   141  00064C  60                 	db	96
   142  00064D  F3                 	db	243
   143  00064E  49                 	db	73
   144  00064F  71                 	db	113
   145  000650                     __end_of__powers_:
   146                           	opt stack 0
   147  000650                     __npowers_:
   148                           	opt stack 0
   149  000650  00                 	db	0
   150  000651  80                 	db	128
   151  000652  3F                 	db	63
   152  000653  CD                 	db	205
   153  000654  CC                 	db	204
   154  000655  3D                 	db	61
   155  000656  D7                 	db	215
   156  000657  23                 	db	35
   157  000658  3C                 	db	60
   158  000659  12                 	db	18
   159  00065A  83                 	db	131
   160  00065B  3A                 	db	58
   161  00065C  B7                 	db	183
   162  00065D  D1                 	db	209
   163  00065E  38                 	db	56
   164  00065F  C6                 	db	198
   165  000660  27                 	db	39
   166  000661  37                 	db	55
   167  000662  38                 	db	56
   168  000663  86                 	db	134
   169  000664  35                 	db	53
   170  000665  C0                 	db	192
   171  000666  D6                 	db	214
   172  000667  33                 	db	51
   173  000668  CC                 	db	204
   174  000669  2B                 	db	43
   175  00066A  32                 	db	50
   176  00066B  70                 	db	112
   177  00066C  89                 	db	137
   178  00066D  30                 	db	48
   179  00066E  E7                 	db	231
   180  00066F  DB                 	db	219
   181  000670  2E                 	db	46
   182  000671  E5                 	db	229
   183  000672  3C                 	db	60
   184  000673  1E                 	db	30
   185  000674  42                 	db	66
   186  000675  A2                 	db	162
   187  000676  0D                 	db	13
   188  000677                     __end_of__npowers_:
   189                           	opt stack 0
   190  0000                     _ADRESL	set	4035
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADCON0bits	set	4034
   193  0000                     _TRISAbits	set	3986
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISC	set	3988
   196  0000                     _PORTD	set	3971
   197  0000                     _PORTCbits	set	3970
   198  0000                     _GO_DONE	set	32273
   199  0000                     _ADON	set	32272
   200  0000                     _ADCS2	set	32258
   201  0000                     _ADCS1	set	32257
   202  0000                     _ADCS0	set	32256
   203  0000                     _ADFM	set	32263
   204  000677                     STR_2:
   205  000677  45                 	db	69	;'E'
   206  000678  6E                 	db	110	;'n'
   207  000679  74                 	db	116	;'t'
   208  00067A  72                 	db	114	;'r'
   209  00067B  61                 	db	97	;'a'
   210  00067C  64                 	db	100	;'d'
   211  00067D  61                 	db	97	;'a'
   212  00067E  20                 	db	32
   213  00067F  31                 	db	49	;'1'
   214  000680  3A                 	db	58	;':'
   215  000681  20                 	db	32
   216  000682  00                 	db	0
   217  000683                     STR_4:
   218  000683  45                 	db	69	;'E'
   219  000684  6E                 	db	110	;'n'
   220  000685  74                 	db	116	;'t'
   221  000686  72                 	db	114	;'r'
   222  000687  61                 	db	97	;'a'
   223  000688  64                 	db	100	;'d'
   224  000689  61                 	db	97	;'a'
   225  00068A  20                 	db	32
   226  00068B  32                 	db	50	;'2'
   227  00068C  3A                 	db	58	;':'
   228  00068D  20                 	db	32
   229  00068E  00                 	db	0
   230  00068F                     STR_6:
   231  00068F  45                 	db	69	;'E'
   232  000690  6E                 	db	110	;'n'
   233  000691  74                 	db	116	;'t'
   234  000692  72                 	db	114	;'r'
   235  000693  61                 	db	97	;'a'
   236  000694  64                 	db	100	;'d'
   237  000695  61                 	db	97	;'a'
   238  000696  20                 	db	32
   239  000697  33                 	db	51	;'3'
   240  000698  3A                 	db	58	;':'
   241  000699  20                 	db	32
   242  00069A  00                 	db	0
   243  00069B                     STR_8:
   244  00069B  45                 	db	69	;'E'
   245  00069C  6E                 	db	110	;'n'
   246  00069D  74                 	db	116	;'t'
   247  00069E  72                 	db	114	;'r'
   248  00069F  61                 	db	97	;'a'
   249  0006A0  64                 	db	100	;'d'
   250  0006A1  61                 	db	97	;'a'
   251  0006A2  20                 	db	32
   252  0006A3  34                 	db	52	;'4'
   253  0006A4  3A                 	db	58	;':'
   254  0006A5  20                 	db	32
   255  0006A6  00                 	db	0
   256  0006A7                     STR_1:
   257  0006A7  25                 	db	37
   258  0006A8  2E                 	db	46
   259  0006A9  34                 	db	52	;'4'
   260  0006AA  67                 	db	103	;'g'
   261  0006AB  00                 	db	0
   262  0006AC  00                 	db	0	; dummy byte at the end
   263  0000                     
   264                           ; #config settings
   265                           
   266                           	psect	cinit
   267  002B3E                     __pcinit:
   268                           	opt stack 0
   269  002B3E                     start_initialization:
   270                           	opt stack 0
   271  002B3E                     __initialization:
   272                           	opt stack 0
   273  002B3E                     end_of_initialization:
   274                           	opt stack 0
   275  002B3E                     __end_of__initialization:
   276                           	opt stack 0
   277  002B3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  002B40  6EF8               	movwf	tblptru,c
   279  002B42  0100               	movlb	0
   280  002B44  EFEA  F00C         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           
   283                           	psect	cstackBANK0
   284  000060                     __pcstackBANK0:
   285                           	opt stack 0
   286  000060                     ?_sprintf:
   287                           	opt stack 0
   288  000060                     sprintf@sp:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x0
   292  000060                     	ds	2
   293  000062                     sprintf@f:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x2
   297  000062                     	ds	5
   298  000067                     ??_sprintf:
   299                           
   300                           ; 1 bytes @ 0x7
   301  000067                     	ds	6
   302  00006D                     _sprintf$905:
   303                           	opt stack 0
   304                           
   305                           ; 3 bytes @ 0xD
   306  00006D                     	ds	3
   307  000070                     sprintf@ap:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x10
   311  000070                     	ds	2
   312  000072                     sprintf@temp:
   313                           	opt stack 0
   314                           
   315                           ; 3 bytes @ 0x12
   316  000072                     	ds	3
   317  000075                     sprintf@flag:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x15
   321  000075                     	ds	2
   322  000077                     sprintf@tmpval:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x17
   326  000077                     	ds	4
   327  00007B                     sprintf@val:
   328                           	opt stack 0
   329                           
   330                           ; 4 bytes @ 0x1B
   331  00007B                     	ds	4
   332  00007F                     sprintf@exp:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x1F
   336  00007F                     	ds	2
   337  000081                     sprintf@prec:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x21
   341  000081                     	ds	2
   342  000083                     sprintf@fval:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0x23
   346  000083                     	ds	3
   347  000086                     sprintf@c:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x26
   351  000086                     	ds	1
   352  000087                     main@buf:
   353                           	opt stack 0
   354                           
   355                           ; 16 bytes @ 0x27
   356  000087                     	ds	16
   357  000097                     main@AD0val:
   358                           	opt stack 0
   359                           
   360                           ; 3 bytes @ 0x37
   361  000097                     	ds	3
   362  00009A                     main@AD1val:
   363                           	opt stack 0
   364                           
   365                           ; 3 bytes @ 0x3A
   366  00009A                     	ds	3
   367  00009D                     main@AD2val:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0x3D
   371  00009D                     	ds	3
   372  0000A0                     main@AD3val:
   373                           	opt stack 0
   374                           
   375                           ; 3 bytes @ 0x40
   376  0000A0                     	ds	3
   377                           tblptru	equ	0xFF8
   378                           
   379                           	psect	cstackCOMRAM
   380  000001                     __pcstackCOMRAM:
   381                           	opt stack 0
   382  000001                     ??_isdigit:
   383  000001                     ?_ADC_read:
   384                           	opt stack 0
   385  000001                     ?___awmod:
   386                           	opt stack 0
   387  000001                     ?___ftpack:
   388                           	opt stack 0
   389  000001                     ?__tdiv_to_l_:
   390                           	opt stack 0
   391  000001                     ?__div_to_l_:
   392                           	opt stack 0
   393  000001                     ?___lldiv:
   394                           	opt stack 0
   395  000001                     ?___llmod:
   396                           	opt stack 0
   397  000001                     Delay_LCD@i:
   398                           	opt stack 0
   399  000001                     Delay_inicializacao_LCD@i:
   400                           	opt stack 0
   401  000001                     ADC_read@channel:
   402                           	opt stack 0
   403  000001                     ___awmod@dividend:
   404                           	opt stack 0
   405  000001                     __div_to_l_@f1:
   406                           	opt stack 0
   407  000001                     ___ftpack@arg:
   408                           	opt stack 0
   409  000001                     __tdiv_to_l_@f1:
   410                           	opt stack 0
   411  000001                     ___lldiv@dividend:
   412                           	opt stack 0
   413  000001                     ___llmod@dividend:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x0
   417  000001                     	ds	1
   418  000002                     _isdigit$575:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1
   422  000002                     	ds	1
   423  000003                     ??_ADC_read:
   424  000003                     Envia_Comando_Lcd@comando:
   425                           	opt stack 0
   426  000003                     Envia_Dado_Lcd@dado:
   427                           	opt stack 0
   428  000003                     isdigit@c:
   429                           	opt stack 0
   430  000003                     ___awmod@divisor:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x2
   434  000003                     	ds	1
   435  000004                     ___ftpack@exp:
   436                           	opt stack 0
   437  000004                     Print_Mensagem_Lcd@mensagem:
   438                           	opt stack 0
   439  000004                     __div_to_l_@f2:
   440                           	opt stack 0
   441  000004                     __tdiv_to_l_@f2:
   442                           	opt stack 0
   443                           
   444                           ; 3 bytes @ 0x3
   445  000004                     	ds	1
   446  000005                     ___awmod@counter:
   447                           	opt stack 0
   448  000005                     ___ftpack@sign:
   449                           	opt stack 0
   450  000005                     ADC_read@adval:
   451                           	opt stack 0
   452  000005                     ___lldiv@divisor:
   453                           	opt stack 0
   454  000005                     ___llmod@divisor:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x4
   458  000005                     	ds	1
   459  000006                     ??___ftpack:
   460  000006                     ??_Print_Mensagem_Lcd:
   461  000006                     ___awmod@sign:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x5
   465  000006                     	ds	1
   466  000007                     ??__tdiv_to_l_:
   467  000007                     ?___awdiv:
   468                           	opt stack 0
   469  000007                     ___awdiv@dividend:
   470                           	opt stack 0
   471  000007                     __div_to_l_@quot:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x6
   475  000007                     	ds	1
   476  000008                     Print_Mensagem_Lcd@i:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x7
   480  000008                     	ds	1
   481  000009                     ?___lwtoft:
   482                           	opt stack 0
   483  000009                     ___llmod@counter:
   484                           	opt stack 0
   485  000009                     ___awdiv@divisor:
   486                           	opt stack 0
   487  000009                     ___lwtoft@c:
   488                           	opt stack 0
   489  000009                     ___lldiv@quotient:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x8
   493  000009                     	ds	1
   494  00000A                     __tdiv_to_l_@quot:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x9
   498  00000A                     	ds	1
   499  00000B                     ___awdiv@counter:
   500                           	opt stack 0
   501  00000B                     __div_to_l_@cntr:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0xA
   505  00000B                     	ds	1
   506  00000C                     ___awdiv@sign:
   507                           	opt stack 0
   508  00000C                     __div_to_l_@exp1:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xB
   512  00000C                     	ds	1
   513  00000D                     ___lldiv@counter:
   514                           	opt stack 0
   515  00000D                     ___awdiv@quotient:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0xC
   519  00000D                     	ds	1
   520  00000E                     __tdiv_to_l_@cntr:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0xD
   524  00000E                     	ds	1
   525  00000F                     ?___wmul:
   526                           	opt stack 0
   527  00000F                     __tdiv_to_l_@exp1:
   528                           	opt stack 0
   529  00000F                     ___wmul@multiplier:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0xE
   533  00000F                     	ds	2
   534  000011                     ___wmul@multiplicand:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x10
   538  000011                     	ds	2
   539  000013                     ___wmul@product:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x12
   543  000013                     	ds	2
   544  000015                     ?___fttol:
   545                           	opt stack 0
   546  000015                     ___fttol@f1:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x14
   550  000015                     	ds	4
   551  000019                     ??___fttol:
   552                           
   553                           ; 1 bytes @ 0x18
   554  000019                     	ds	5
   555  00001E                     ___fttol@sign1:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x1D
   559  00001E                     	ds	1
   560  00001F                     ___fttol@lval:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x1E
   564  00001F                     	ds	4
   565  000023                     ___fttol@exp1:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x22
   569  000023                     	ds	1
   570  000024                     ?___lltoft:
   571                           	opt stack 0
   572  000024                     ___lltoft@c:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x23
   576  000024                     	ds	4
   577  000028                     ??___lltoft:
   578                           
   579                           ; 1 bytes @ 0x27
   580  000028                     	ds	4
   581  00002C                     ___lltoft@exp:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2B
   585  00002C                     	ds	1
   586  00002D                     ?___ftneg:
   587                           	opt stack 0
   588  00002D                     ___ftneg@f1:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x2C
   592  00002D                     	ds	3
   593  000030                     ?___ftmul:
   594                           	opt stack 0
   595  000030                     ___ftmul@f1:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x2F
   599  000030                     	ds	3
   600  000033                     ___ftmul@f2:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x32
   604  000033                     	ds	3
   605  000036                     ??___ftmul:
   606                           
   607                           ; 1 bytes @ 0x35
   608  000036                     	ds	3
   609  000039                     ___ftmul@exp:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x38
   613  000039                     	ds	1
   614  00003A                     ___ftmul@f3_as_product:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x39
   618  00003A                     	ds	3
   619  00003D                     ___ftmul@cntr:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x3C
   623  00003D                     	ds	1
   624  00003E                     ___ftmul@sign:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x3D
   628  00003E                     	ds	1
   629  00003F                     ?_fround:
   630                           	opt stack 0
   631  00003F                     ?_scale:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x3E
   635  00003F                     	ds	3
   636  000042                     _fround$903:
   637                           	opt stack 0
   638  000042                     _scale$904:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x41
   642  000042                     	ds	3
   643  000045                     scale@scl:
   644                           	opt stack 0
   645  000045                     _fround$902:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x44
   649  000045                     	ds	1
   650  000046                     ?___ftdiv:
   651                           	opt stack 0
   652  000046                     ___ftdiv@f1:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x45
   656  000046                     	ds	2
   657  000048                     fround@prec:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x47
   661  000048                     	ds	1
   662  000049                     ?___ftadd:
   663                           	opt stack 0
   664  000049                     ___ftadd@f1:
   665                           	opt stack 0
   666  000049                     ___ftdiv@f2:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x48
   670  000049                     	ds	3
   671  00004C                     ??___ftdiv:
   672  00004C                     ___ftadd@f2:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x4B
   676  00004C                     	ds	3
   677  00004F                     ??___ftadd:
   678  00004F                     ___ftdiv@cntr:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x4E
   682  00004F                     	ds	1
   683  000050                     ___ftdiv@f3:
   684                           	opt stack 0
   685                           
   686                           ; 3 bytes @ 0x4F
   687  000050                     	ds	2
   688  000052                     ___ftadd@sign:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x51
   692  000052                     	ds	1
   693  000053                     ___ftadd@exp2:
   694                           	opt stack 0
   695  000053                     ___ftdiv@exp:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x52
   699  000053                     	ds	1
   700  000054                     ___ftadd@exp1:
   701                           	opt stack 0
   702  000054                     ___ftdiv@sign:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x53
   706  000054                     	ds	1
   707  000055                     ?___ftsub:
   708                           	opt stack 0
   709  000055                     ___ftge@ff1:
   710                           	opt stack 0
   711  000055                     ___ftsub@f1:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x54
   715  000055                     	ds	3
   716  000058                     ___ftge@ff2:
   717                           	opt stack 0
   718  000058                     ___ftsub@f2:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x57
   722  000058                     	ds	3
   723  00005B                     ??___ftge:
   724                           
   725                           ; 1 bytes @ 0x5A
   726  00005B                     	ds	3
   727  00005E                     ??_main:
   728                           
   729                           ; 1 bytes @ 0x5D
   730  00005E                     	ds	2
   731                           tblptru	equ	0xFF8
   732                           
   733 ;;
   734 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   735 ;;
   736 ;; *************** function _main *****************
   737 ;; Defined at:
   738 ;;		line 89 in file "main.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  buf            16   39[BANK0 ] unsigned char [16]
   743 ;;  AD3val          3   64[BANK0 ] float 
   744 ;;  AD2val          3   61[BANK0 ] float 
   745 ;;  AD1val          3   58[BANK0 ] float 
   746 ;;  AD0val          3   55[BANK0 ] float 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   756 ;;      Params:         0       0       0       0       0       0       0
   757 ;;      Locals:         0      28       0       0       0       0       0
   758 ;;      Temps:          2       0       0       0       0       0       0
   759 ;;      Totals:         2      28       0       0       0       0       0
   760 ;;Total ram usage:       30 bytes
   761 ;; Hardware stack levels required when called:    4
   762 ;; This function calls:
   763 ;;		_ADC_read
   764 ;;		_Envia_Comando_Lcd
   765 ;;		_Inicializa_Lcd
   766 ;;		_Print_Mensagem_Lcd
   767 ;;		___ftmul
   768 ;;		___lwtoft
   769 ;;		_sprintf
   770 ;; This function is called by:
   771 ;;		Startup code after reset
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text0
   776  0019D4                     __ptext0:
   777                           	opt stack 0
   778  0019D4                     _main:
   779                           	opt stack 27
   780                           
   781                           ;main.c: 92: TRISC=0b11111100;
   782                           
   783                           ;incstack = 0
   784  0019D4  0EFC               	movlw	252
   785  0019D6  6E94               	movwf	3988,c	;volatile
   786                           
   787                           ;main.c: 93: TRISD=0b00000000;
   788  0019D8  0E00               	movlw	0
   789  0019DA  6E95               	movwf	3989,c	;volatile
   790                           
   791                           ;main.c: 94: TRISAbits.RA0=1;
   792  0019DC  8092               	bsf	3986,0,c	;volatile
   793                           
   794                           ;main.c: 95: TRISAbits.RA1=1;
   795  0019DE  8292               	bsf	3986,1,c	;volatile
   796                           
   797                           ;main.c: 96: TRISAbits.RA2=1;
   798  0019E0  8492               	bsf	3986,2,c	;volatile
   799                           
   800                           ;main.c: 97: TRISAbits.RA3=1;
   801  0019E2  8692               	bsf	3986,3,c	;volatile
   802                           
   803                           ;main.c: 101: Inicializa_Lcd ();
   804  0019E4  EC72  F015         	call	_Inicializa_Lcd	;wreg free
   805  0019E8                     l3007:
   806                           
   807                           ;main.c: 104: float AD0val=ADC_read(0);
   808  0019E8  0E00               	movlw	0
   809  0019EA  6E02               	movwf	ADC_read@channel+1,c
   810  0019EC  0E00               	movlw	0
   811  0019EE  6E01               	movwf	ADC_read@channel,c
   812  0019F0  ECC6  F014         	call	_ADC_read	;wreg free
   813  0019F4  C001  F009         	movff	?_ADC_read,___lwtoft@c
   814  0019F8  C002  F00A         	movff	?_ADC_read+1,___lwtoft@c+1
   815  0019FC  EC2F  F015         	call	___lwtoft	;wreg free
   816  001A00  C009  F097         	movff	?___lwtoft,main@AD0val
   817  001A04  C00A  F098         	movff	?___lwtoft+1,main@AD0val+1
   818  001A08  C00B  F099         	movff	?___lwtoft+2,main@AD0val+2
   819                           
   820                           ;main.c: 105: float AD1val=ADC_read(1);
   821  001A0C  0E00               	movlw	0
   822  001A0E  6E02               	movwf	ADC_read@channel+1,c
   823  001A10  0E01               	movlw	1
   824  001A12  6E01               	movwf	ADC_read@channel,c
   825  001A14  ECC6  F014         	call	_ADC_read	;wreg free
   826  001A18  C001  F009         	movff	?_ADC_read,___lwtoft@c
   827  001A1C  C002  F00A         	movff	?_ADC_read+1,___lwtoft@c+1
   828  001A20  EC2F  F015         	call	___lwtoft	;wreg free
   829  001A24  C009  F09A         	movff	?___lwtoft,main@AD1val
   830  001A28  C00A  F09B         	movff	?___lwtoft+1,main@AD1val+1
   831  001A2C  C00B  F09C         	movff	?___lwtoft+2,main@AD1val+2
   832                           
   833                           ;main.c: 106: float AD2val=ADC_read(2);
   834  001A30  0E00               	movlw	0
   835  001A32  6E02               	movwf	ADC_read@channel+1,c
   836  001A34  0E02               	movlw	2
   837  001A36  6E01               	movwf	ADC_read@channel,c
   838  001A38  ECC6  F014         	call	_ADC_read	;wreg free
   839  001A3C  C001  F009         	movff	?_ADC_read,___lwtoft@c
   840  001A40  C002  F00A         	movff	?_ADC_read+1,___lwtoft@c+1
   841  001A44  EC2F  F015         	call	___lwtoft	;wreg free
   842  001A48  C009  F09D         	movff	?___lwtoft,main@AD2val
   843  001A4C  C00A  F09E         	movff	?___lwtoft+1,main@AD2val+1
   844  001A50  C00B  F09F         	movff	?___lwtoft+2,main@AD2val+2
   845                           
   846                           ;main.c: 107: float AD3val=ADC_read(3);
   847  001A54  0E00               	movlw	0
   848  001A56  6E02               	movwf	ADC_read@channel+1,c
   849  001A58  0E03               	movlw	3
   850  001A5A  6E01               	movwf	ADC_read@channel,c
   851  001A5C  ECC6  F014         	call	_ADC_read	;wreg free
   852  001A60  C001  F009         	movff	?_ADC_read,___lwtoft@c
   853  001A64  C002  F00A         	movff	?_ADC_read+1,___lwtoft@c+1
   854  001A68  EC2F  F015         	call	___lwtoft	;wreg free
   855  001A6C  C009  F0A0         	movff	?___lwtoft,main@AD3val
   856  001A70  C00A  F0A1         	movff	?___lwtoft+1,main@AD3val+1
   857  001A74  C00B  F0A2         	movff	?___lwtoft+2,main@AD3val+2
   858                           
   859                           ;main.c: 109: AD0val=(AD0val*0.0048828125)*20;
   860  001A78  C097  F030         	movff	main@AD0val,___ftmul@f1
   861  001A7C  C098  F031         	movff	main@AD0val+1,___ftmul@f1+1
   862  001A80  C099  F032         	movff	main@AD0val+2,___ftmul@f1+2
   863  001A84  0E00               	movlw	0
   864  001A86  6E33               	movwf	___ftmul@f2,c
   865  001A88  0EC8               	movlw	200
   866  001A8A  6E34               	movwf	___ftmul@f2+1,c
   867  001A8C  0E3D               	movlw	61
   868  001A8E  6E35               	movwf	___ftmul@f2+2,c
   869  001A90  EC6B  F011         	call	___ftmul	;wreg free
   870  001A94  C030  F097         	movff	?___ftmul,main@AD0val
   871  001A98  C031  F098         	movff	?___ftmul+1,main@AD0val+1
   872  001A9C  C032  F099         	movff	?___ftmul+2,main@AD0val+2
   873                           
   874                           ;main.c: 110: AD1val=(AD1val*0.0048828125)*20;
   875  001AA0  C09A  F030         	movff	main@AD1val,___ftmul@f1
   876  001AA4  C09B  F031         	movff	main@AD1val+1,___ftmul@f1+1
   877  001AA8  C09C  F032         	movff	main@AD1val+2,___ftmul@f1+2
   878  001AAC  0E00               	movlw	0
   879  001AAE  6E33               	movwf	___ftmul@f2,c
   880  001AB0  0EC8               	movlw	200
   881  001AB2  6E34               	movwf	___ftmul@f2+1,c
   882  001AB4  0E3D               	movlw	61
   883  001AB6  6E35               	movwf	___ftmul@f2+2,c
   884  001AB8  EC6B  F011         	call	___ftmul	;wreg free
   885  001ABC  C030  F09A         	movff	?___ftmul,main@AD1val
   886  001AC0  C031  F09B         	movff	?___ftmul+1,main@AD1val+1
   887  001AC4  C032  F09C         	movff	?___ftmul+2,main@AD1val+2
   888                           
   889                           ;main.c: 111: AD2val=(AD2val*0.0048828125)*20;
   890  001AC8  C09D  F030         	movff	main@AD2val,___ftmul@f1
   891  001ACC  C09E  F031         	movff	main@AD2val+1,___ftmul@f1+1
   892  001AD0  C09F  F032         	movff	main@AD2val+2,___ftmul@f1+2
   893  001AD4  0E00               	movlw	0
   894  001AD6  6E33               	movwf	___ftmul@f2,c
   895  001AD8  0EC8               	movlw	200
   896  001ADA  6E34               	movwf	___ftmul@f2+1,c
   897  001ADC  0E3D               	movlw	61
   898  001ADE  6E35               	movwf	___ftmul@f2+2,c
   899  001AE0  EC6B  F011         	call	___ftmul	;wreg free
   900  001AE4  C030  F09D         	movff	?___ftmul,main@AD2val
   901  001AE8  C031  F09E         	movff	?___ftmul+1,main@AD2val+1
   902  001AEC  C032  F09F         	movff	?___ftmul+2,main@AD2val+2
   903                           
   904                           ;main.c: 112: AD3val=(AD3val*0.0048828125)*20;
   905  001AF0  C0A0  F030         	movff	main@AD3val,___ftmul@f1
   906  001AF4  C0A1  F031         	movff	main@AD3val+1,___ftmul@f1+1
   907  001AF8  C0A2  F032         	movff	main@AD3val+2,___ftmul@f1+2
   908  001AFC  0E00               	movlw	0
   909  001AFE  6E33               	movwf	___ftmul@f2,c
   910  001B00  0EC8               	movlw	200
   911  001B02  6E34               	movwf	___ftmul@f2+1,c
   912  001B04  0E3D               	movlw	61
   913  001B06  6E35               	movwf	___ftmul@f2+2,c
   914  001B08  EC6B  F011         	call	___ftmul	;wreg free
   915  001B0C  C030  F0A0         	movff	?___ftmul,main@AD3val
   916  001B10  C031  F0A1         	movff	?___ftmul+1,main@AD3val+1
   917  001B14  C032  F0A2         	movff	?___ftmul+2,main@AD3val+2
   918                           
   919                           ;main.c: 114: char buf[16];
   920                           ;main.c: 116: sprintf(buf, "%.4g", AD0val);
   921  001B18  0E87               	movlw	low main@buf
   922  001B1A  0100               	movlb	0	; () banked
   923  001B1C  6F60               	movwf	sprintf@sp& (0+255),b
   924  001B1E  0E00               	movlw	high main@buf
   925  001B20  0100               	movlb	0	; () banked
   926  001B22  6F61               	movwf	(sprintf@sp+1)& (0+255),b
   927  001B24  0EA7               	movlw	low STR_1
   928  001B26  0100               	movlb	0	; () banked
   929  001B28  6F62               	movwf	sprintf@f& (0+255),b
   930  001B2A  0E06               	movlw	high STR_1
   931  001B2C  0100               	movlb	0	; () banked
   932  001B2E  6F63               	movwf	(sprintf@f+1)& (0+255),b
   933  001B30  C097  F064         	movff	main@AD0val,?_sprintf+4
   934  001B34  C098  F065         	movff	main@AD0val+1,?_sprintf+5
   935  001B38  C099  F066         	movff	main@AD0val+2,?_sprintf+6
   936  001B3C  EC57  F003         	call	_sprintf	;wreg free
   937                           
   938                           ;main.c: 117: Print_Mensagem_Lcd("Entrada 1: ");
   939  001B40  0E77               	movlw	low STR_2
   940  001B42  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
   941  001B44  0E06               	movlw	high STR_2
   942  001B46  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
   943  001B48  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
   944                           
   945                           ;main.c: 118: Print_Mensagem_Lcd(buf);
   946  001B4C  0E87               	movlw	low main@buf
   947  001B4E  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
   948  001B50  0E00               	movlw	high main@buf
   949  001B52  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
   950  001B54  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
   951                           
   952                           ;main.c: 119: _delay((unsigned long)((1000)*(4000000/4000.0)));
   953  001B58  0E06               	movlw	6
   954  001B5A  6E5F               	movwf	(??_main+1)& (0+255),c
   955  001B5C  0E13               	movlw	19
   956  001B5E  6E5E               	movwf	??_main& (0+255),c
   957  001B60  0EAE               	movlw	174
   958  001B62                     u3297:
   959  001B62  2EE8               	decfsz	wreg,f,c
   960  001B64  D7FE               	bra	u3297
   961  001B66  2E5E               	decfsz	??_main& (0+255),f,c
   962  001B68  D7FC               	bra	u3297
   963  001B6A  2E5F               	decfsz	(??_main+1)& (0+255),f,c
   964  001B6C  D7FA               	bra	u3297
   965                           
   966                           ;main.c: 120: Envia_Comando_Lcd(1);
   967  001B6E  0E01               	movlw	1
   968  001B70  EC52  F015         	call	_Envia_Comando_Lcd
   969                           
   970                           ;main.c: 122: sprintf(buf, "%.4g", AD1val);
   971  001B74  0E87               	movlw	low main@buf
   972  001B76  0100               	movlb	0	; () banked
   973  001B78  6F60               	movwf	sprintf@sp& (0+255),b
   974  001B7A  0E00               	movlw	high main@buf
   975  001B7C  0100               	movlb	0	; () banked
   976  001B7E  6F61               	movwf	(sprintf@sp+1)& (0+255),b
   977  001B80  0EA7               	movlw	low STR_1
   978  001B82  0100               	movlb	0	; () banked
   979  001B84  6F62               	movwf	sprintf@f& (0+255),b
   980  001B86  0E06               	movlw	high STR_1
   981  001B88  0100               	movlb	0	; () banked
   982  001B8A  6F63               	movwf	(sprintf@f+1)& (0+255),b
   983  001B8C  C09A  F064         	movff	main@AD1val,?_sprintf+4
   984  001B90  C09B  F065         	movff	main@AD1val+1,?_sprintf+5
   985  001B94  C09C  F066         	movff	main@AD1val+2,?_sprintf+6
   986  001B98  EC57  F003         	call	_sprintf	;wreg free
   987                           
   988                           ;main.c: 123: Print_Mensagem_Lcd("Entrada 2: ");
   989  001B9C  0E83               	movlw	low STR_4
   990  001B9E  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
   991  001BA0  0E06               	movlw	high STR_4
   992  001BA2  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
   993  001BA4  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
   994                           
   995                           ;main.c: 124: Print_Mensagem_Lcd(buf);
   996  001BA8  0E87               	movlw	low main@buf
   997  001BAA  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
   998  001BAC  0E00               	movlw	high main@buf
   999  001BAE  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
  1000  001BB0  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
  1001                           
  1002                           ;main.c: 125: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1003  001BB4  0E06               	movlw	6
  1004  001BB6  6E5F               	movwf	(??_main+1)& (0+255),c
  1005  001BB8  0E13               	movlw	19
  1006  001BBA  6E5E               	movwf	??_main& (0+255),c
  1007  001BBC  0EAE               	movlw	174
  1008  001BBE                     u3307:
  1009  001BBE  2EE8               	decfsz	wreg,f,c
  1010  001BC0  D7FE               	bra	u3307
  1011  001BC2  2E5E               	decfsz	??_main& (0+255),f,c
  1012  001BC4  D7FC               	bra	u3307
  1013  001BC6  2E5F               	decfsz	(??_main+1)& (0+255),f,c
  1014  001BC8  D7FA               	bra	u3307
  1015                           
  1016                           ;main.c: 126: Envia_Comando_Lcd(1);
  1017  001BCA  0E01               	movlw	1
  1018  001BCC  EC52  F015         	call	_Envia_Comando_Lcd
  1019                           
  1020                           ;main.c: 128: sprintf(buf, "%.4g", AD2val);
  1021  001BD0  0E87               	movlw	low main@buf
  1022  001BD2  0100               	movlb	0	; () banked
  1023  001BD4  6F60               	movwf	sprintf@sp& (0+255),b
  1024  001BD6  0E00               	movlw	high main@buf
  1025  001BD8  0100               	movlb	0	; () banked
  1026  001BDA  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1027  001BDC  0EA7               	movlw	low STR_1
  1028  001BDE  0100               	movlb	0	; () banked
  1029  001BE0  6F62               	movwf	sprintf@f& (0+255),b
  1030  001BE2  0E06               	movlw	high STR_1
  1031  001BE4  0100               	movlb	0	; () banked
  1032  001BE6  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1033  001BE8  C09D  F064         	movff	main@AD2val,?_sprintf+4
  1034  001BEC  C09E  F065         	movff	main@AD2val+1,?_sprintf+5
  1035  001BF0  C09F  F066         	movff	main@AD2val+2,?_sprintf+6
  1036  001BF4  EC57  F003         	call	_sprintf	;wreg free
  1037                           
  1038                           ;main.c: 129: Print_Mensagem_Lcd("Entrada 3: ");
  1039  001BF8  0E8F               	movlw	low STR_6
  1040  001BFA  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
  1041  001BFC  0E06               	movlw	high STR_6
  1042  001BFE  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
  1043  001C00  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
  1044                           
  1045                           ;main.c: 130: Print_Mensagem_Lcd(buf);
  1046  001C04  0E87               	movlw	low main@buf
  1047  001C06  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
  1048  001C08  0E00               	movlw	high main@buf
  1049  001C0A  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
  1050  001C0C  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
  1051                           
  1052                           ;main.c: 131: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1053  001C10  0E06               	movlw	6
  1054  001C12  6E5F               	movwf	(??_main+1)& (0+255),c
  1055  001C14  0E13               	movlw	19
  1056  001C16  6E5E               	movwf	??_main& (0+255),c
  1057  001C18  0EAE               	movlw	174
  1058  001C1A                     u3317:
  1059  001C1A  2EE8               	decfsz	wreg,f,c
  1060  001C1C  D7FE               	bra	u3317
  1061  001C1E  2E5E               	decfsz	??_main& (0+255),f,c
  1062  001C20  D7FC               	bra	u3317
  1063  001C22  2E5F               	decfsz	(??_main+1)& (0+255),f,c
  1064  001C24  D7FA               	bra	u3317
  1065                           
  1066                           ;main.c: 132: Envia_Comando_Lcd(1);
  1067  001C26  0E01               	movlw	1
  1068  001C28  EC52  F015         	call	_Envia_Comando_Lcd
  1069                           
  1070                           ;main.c: 134: sprintf(buf, "%.4g", AD3val);
  1071  001C2C  0E87               	movlw	low main@buf
  1072  001C2E  0100               	movlb	0	; () banked
  1073  001C30  6F60               	movwf	sprintf@sp& (0+255),b
  1074  001C32  0E00               	movlw	high main@buf
  1075  001C34  0100               	movlb	0	; () banked
  1076  001C36  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1077  001C38  0EA7               	movlw	low STR_1
  1078  001C3A  0100               	movlb	0	; () banked
  1079  001C3C  6F62               	movwf	sprintf@f& (0+255),b
  1080  001C3E  0E06               	movlw	high STR_1
  1081  001C40  0100               	movlb	0	; () banked
  1082  001C42  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1083  001C44  C0A0  F064         	movff	main@AD3val,?_sprintf+4
  1084  001C48  C0A1  F065         	movff	main@AD3val+1,?_sprintf+5
  1085  001C4C  C0A2  F066         	movff	main@AD3val+2,?_sprintf+6
  1086  001C50  EC57  F003         	call	_sprintf	;wreg free
  1087                           
  1088                           ;main.c: 135: Print_Mensagem_Lcd("Entrada 4: ");
  1089  001C54  0E9B               	movlw	low STR_8
  1090  001C56  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
  1091  001C58  0E06               	movlw	high STR_8
  1092  001C5A  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
  1093  001C5C  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
  1094                           
  1095                           ;main.c: 136: Print_Mensagem_Lcd(buf);
  1096  001C60  0E87               	movlw	low main@buf
  1097  001C62  6E04               	movwf	Print_Mensagem_Lcd@mensagem,c
  1098  001C64  0E00               	movlw	high main@buf
  1099  001C66  6E05               	movwf	Print_Mensagem_Lcd@mensagem+1,c
  1100  001C68  ECF4  F013         	call	_Print_Mensagem_Lcd	;wreg free
  1101                           
  1102                           ;main.c: 137: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1103  001C6C  0E06               	movlw	6
  1104  001C6E  6E5F               	movwf	(??_main+1)& (0+255),c
  1105  001C70  0E13               	movlw	19
  1106  001C72  6E5E               	movwf	??_main& (0+255),c
  1107  001C74  0EAE               	movlw	174
  1108  001C76                     u3327:
  1109  001C76  2EE8               	decfsz	wreg,f,c
  1110  001C78  D7FE               	bra	u3327
  1111  001C7A  2E5E               	decfsz	??_main& (0+255),f,c
  1112  001C7C  D7FC               	bra	u3327
  1113  001C7E  2E5F               	decfsz	(??_main+1)& (0+255),f,c
  1114  001C80  D7FA               	bra	u3327
  1115                           
  1116                           ;main.c: 138: Envia_Comando_Lcd(1);
  1117  001C82  0E01               	movlw	1
  1118  001C84  EC52  F015         	call	_Envia_Comando_Lcd
  1119  001C88  D6AF               	goto	l3007
  1120  001C8A                     __end_of_main:
  1121                           	opt stack 0
  1122                           tblptru	equ	0xFF8
  1123                           wreg	equ	0xFE8
  1124                           
  1125 ;; *************** function _sprintf *****************
  1126 ;; Defined at:
  1127 ;;		line 492 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  1130 ;;		 -> main@buf(16), 
  1131 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  1132 ;;		 -> STR_7(5), STR_5(5), STR_3(5), STR_1(5), 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  temp            3   18[BANK0 ] PTR const unsigned char 
  1135 ;;  val             4   27[BANK0 ] unsigned long 
  1136 ;;  tmpval          4   23[BANK0 ] struct .
  1137 ;;  fval            3   35[BANK0 ] struct .
  1138 ;;  cp              3    0        PTR const unsigned char 
  1139 ;;  prec            2   33[BANK0 ] int 
  1140 ;;  exp             2   31[BANK0 ] int 
  1141 ;;  flag            2   21[BANK0 ] unsigned short 
  1142 ;;  ap              2   16[BANK0 ] PTR void [1]
  1143 ;;		 -> ?_sprintf(2), 
  1144 ;;  len             2    0        unsigned int 
  1145 ;;  width           2    0        int 
  1146 ;;  c               1   38[BANK0 ] char 
  1147 ;;  d               1    0        unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  2    0[BANK0 ] int 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1157 ;;      Params:         0       7       0       0       0       0       0
  1158 ;;      Locals:         0      26       0       0       0       0       0
  1159 ;;      Temps:          0       6       0       0       0       0       0
  1160 ;;      Totals:         0      39       0       0       0       0       0
  1161 ;;Total ram usage:       39 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    3
  1164 ;; This function calls:
  1165 ;;		___awdiv
  1166 ;;		___awmod
  1167 ;;		___ftadd
  1168 ;;		___ftdiv
  1169 ;;		___ftge
  1170 ;;		___ftmul
  1171 ;;		___ftneg
  1172 ;;		___ftsub
  1173 ;;		___fttol
  1174 ;;		___lldiv
  1175 ;;		___llmod
  1176 ;;		___lltoft
  1177 ;;		___wmul
  1178 ;;		__div_to_l_
  1179 ;;		__tdiv_to_l_
  1180 ;;		_fround
  1181 ;;		_isdigit
  1182 ;;		_scale
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text1
  1189  0006AE                     __ptext1:
  1190                           	opt stack 0
  1191  0006AE                     _sprintf:
  1192                           	opt stack 27
  1193                           
  1194                           ;doprnt.c: 494: va_list ap;
  1195                           ;doprnt.c: 499: signed char c;
  1196                           ;doprnt.c: 501: int width;
  1197                           ;doprnt.c: 504: int prec;
  1198                           ;doprnt.c: 508: unsigned short flag;
  1199                           ;doprnt.c: 515: char d;
  1200                           ;doprnt.c: 516: double fval;
  1201                           ;doprnt.c: 517: int exp;
  1202                           ;doprnt.c: 523: union {
  1203                           ;doprnt.c: 524: unsigned long vd;
  1204                           ;doprnt.c: 525: double integ;
  1205                           ;doprnt.c: 526: } tmpval;
  1206                           ;doprnt.c: 528: unsigned long val;
  1207                           ;doprnt.c: 529: unsigned len;
  1208                           ;doprnt.c: 530: const char * cp;
  1209                           ;doprnt.c: 533: *ap = __va_start();
  1210                           
  1211                           ;incstack = 0
  1212  0006AE  0E64               	movlw	low (?_sprintf+4)
  1213  0006B0  0100               	movlb	0	; () banked
  1214  0006B2  6F70               	movwf	sprintf@ap& (0+255),b
  1215  0006B4  0E00               	movlw	high (?_sprintf+4)
  1216  0006B6  0100               	movlb	0	; () banked
  1217  0006B8  6F71               	movwf	(sprintf@ap+1)& (0+255),b
  1218                           
  1219                           ;doprnt.c: 536: while(c = *f++) {
  1220  0006BA  EFDC  F00A         	goto	l2985
  1221  0006BE                     l2647:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 538: if(c != '%')
  1225  0006BE  0E25               	movlw	37
  1226  0006C0  0100               	movlb	0	; () banked
  1227  0006C2  1986               	xorwf	sprintf@c& (0+255),w,b
  1228  0006C4  B4D8               	btfsc	status,2,c
  1229  0006C6  D007               	goto	l2653
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;doprnt.c: 540: {
  1233                           ;doprnt.c: 541: ((*sp++ = (c)));
  1234  0006C8  C060  FFD9         	movff	sprintf@sp,fsr2l
  1235  0006CC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1236  0006D0  C086  FFDF         	movff	sprintf@c,indf2
  1237  0006D4  D3C4               	goto	l2823
  1238  0006D6                     l2653:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 543: }
  1242                           ;doprnt.c: 548: flag = 0;
  1243  0006D6  0E00               	movlw	0
  1244  0006D8  0100               	movlb	0	; () banked
  1245  0006DA  6F76               	movwf	(sprintf@flag+1)& (0+255),b
  1246  0006DC  0E00               	movlw	0
  1247  0006DE  6F75               	movwf	sprintf@flag& (0+255),b
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;doprnt.c: 611: if(*f == '.') {
  1251  0006E0  C062  FFF6         	movff	sprintf@f,tblptrl
  1252  0006E4  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1253  0006E8                     	if	0	;tblptru may be non-zero
  1254  0006E8                     	endif
  1255  0006E8                     	if	0	;tblptru may be non-zero
  1256  0006E8                     	endif
  1257  0006E8  0008               	tblrd		*
  1258  0006EA  50F5               	movf	tablat,w,c
  1259  0006EC  0A2E               	xorlw	46
  1260  0006EE  A4D8               	btfss	status,2,c
  1261  0006F0  D034               	goto	l2667
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;doprnt.c: 612: flag |= 0x4000;
  1265  0006F2  0100               	movlb	0	; () banked
  1266  0006F4  8D76               	bsf	(sprintf@flag+1)& (0+255),6,b
  1267                           
  1268                           ;doprnt.c: 613: f++;
  1269  0006F6  0100               	movlb	0	; () banked
  1270  0006F8  4B62               	infsnz	sprintf@f& (0+255),f,b
  1271  0006FA  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;doprnt.c: 620: {
  1275                           ;doprnt.c: 621: prec = 0;
  1276  0006FC  0E00               	movlw	0
  1277  0006FE  0100               	movlb	0	; () banked
  1278  000700  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1279  000702  0E00               	movlw	0
  1280  000704  6F81               	movwf	sprintf@prec& (0+255),b
  1281                           
  1282                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1283  000706  D01E               	goto	l2665
  1284  000708                     l2661:
  1285                           
  1286                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1287  000708  C081  F00F         	movff	sprintf@prec,___wmul@multiplier
  1288  00070C  C082  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1289  000710  0E00               	movlw	0
  1290  000712  6E12               	movwf	___wmul@multiplicand+1,c
  1291  000714  0E0A               	movlw	10
  1292  000716  6E11               	movwf	___wmul@multiplicand,c
  1293  000718  EC0A  F015         	call	___wmul	;wreg free
  1294  00071C  C062  FFF6         	movff	sprintf@f,tblptrl
  1295  000720  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1296  000724                     	if	0	;tblptru may be non-zero
  1297  000724                     	endif
  1298  000724                     	if	0	;tblptru may be non-zero
  1299  000724                     	endif
  1300  000724  0008               	tblrd		*
  1301  000726  50F5               	movf	tablat,w,c
  1302  000728  260F               	addwf	?___wmul,f,c
  1303  00072A  0E00               	movlw	0
  1304  00072C  2210               	addwfc	?___wmul+1,f,c
  1305  00072E  0ED0               	movlw	208
  1306  000730  240F               	addwf	?___wmul,w,c
  1307  000732  0100               	movlb	0	; () banked
  1308  000734  6F81               	movwf	sprintf@prec& (0+255),b
  1309  000736  0EFF               	movlw	255
  1310  000738  2010               	addwfc	?___wmul+1,w,c
  1311  00073A  0100               	movlb	0	; () banked
  1312  00073C  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1313                           
  1314                           ; BSR set to: 0
  1315  00073E  0100               	movlb	0	; () banked
  1316  000740  4B62               	infsnz	sprintf@f& (0+255),f,b
  1317  000742  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1318  000744                     l2665:
  1319                           
  1320                           ; BSR set to: 0
  1321  000744  C062  FFF6         	movff	sprintf@f,tblptrl
  1322  000748  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1323  00074C                     	if	0	;tblptru may be non-zero
  1324  00074C                     	endif
  1325  00074C                     	if	0	;tblptru may be non-zero
  1326  00074C                     	endif
  1327  00074C  0008               	tblrd		*
  1328  00074E  50F5               	movf	tablat,w,c
  1329  000750  EC63  F015         	call	_isdigit
  1330  000754  A0D8               	btfss	status,0,c
  1331  000756  D00C               	goto	l2675
  1332  000758  D7D7               	goto	l2661
  1333  00075A                     l2667:
  1334                           
  1335                           ;doprnt.c: 626: prec = 0;
  1336  00075A  0E00               	movlw	0
  1337  00075C  0100               	movlb	0	; () banked
  1338  00075E  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1339  000760  0E00               	movlw	0
  1340  000762  6F81               	movwf	sprintf@prec& (0+255),b
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;doprnt.c: 628: flag |= 0x1000;
  1344  000764  0100               	movlb	0	; () banked
  1345  000766  8976               	bsf	(sprintf@flag+1)& (0+255),4,b
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 630: }
  1349                           ;doprnt.c: 635: switch(c = *f++) {
  1350  000768  D003               	goto	l2675
  1351  00076A                     l2671:
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;doprnt.c: 683: flag |= 0x200;
  1355  00076A  0100               	movlb	0	; () banked
  1356  00076C  8376               	bsf	(sprintf@flag+1)& (0+255),1,b
  1357                           
  1358                           ;doprnt.c: 684: break;
  1359  00076E  D015               	goto	l2677
  1360  000770                     l2675:
  1361  000770  C062  FFF6         	movff	sprintf@f,tblptrl
  1362  000774  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1363  000778  0100               	movlb	0	; () banked
  1364  00077A  4B62               	infsnz	sprintf@f& (0+255),f,b
  1365  00077C  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1366  00077E                     	if	0	;tblptru may be non-zero
  1367  00077E                     	endif
  1368  00077E                     	if	0	;tblptru may be non-zero
  1369  00077E                     	endif
  1370  00077E  0008               	tblrd		*
  1371  000780  CFF5 F086          	movff	tablat,sprintf@c
  1372  000784  0100               	movlb	0	; () banked
  1373  000786  5186               	movf	sprintf@c& (0+255),w,b
  1374                           
  1375                           ; Switch size 1, requested type "space"
  1376                           ; Number of cases is 2, Range of values is 0 to 103
  1377                           ; switch strategies available:
  1378                           ; Name         Instructions Cycles
  1379                           ; simple_byte            7     4 (average)
  1380                           ;	Chosen strategy is simple_byte
  1381  000788  0A00               	xorlw	0	; case 0
  1382  00078A  B4D8               	btfsc	status,2,c
  1383  00078C  EFEB  F00A         	goto	l2987
  1384  000790  0A67               	xorlw	103	; case 103
  1385  000792  B4D8               	btfsc	status,2,c
  1386  000794  D7EA               	goto	l2671
  1387  000796  EFDC  F00A         	goto	l2985
  1388  00079A                     l2677:
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;doprnt.c: 825: if(flag & (0x700)) {
  1392  00079A  0E07               	movlw	7
  1393  00079C  0100               	movlb	0	; () banked
  1394  00079E  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1395  0007A0  B4D8               	btfsc	status,2,c
  1396  0007A2  EF86  F00A         	goto	l2965
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;doprnt.c: 827: if(flag & 0x1000)
  1400  0007A6  0100               	movlb	0	; () banked
  1401  0007A8  A976               	btfss	(sprintf@flag+1)& (0+255),4,b
  1402  0007AA  D005               	goto	l2683
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;doprnt.c: 829: prec = 6;
  1406  0007AC  0E00               	movlw	0
  1407  0007AE  0100               	movlb	0	; () banked
  1408  0007B0  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1409  0007B2  0E06               	movlw	6
  1410  0007B4  6F81               	movwf	sprintf@prec& (0+255),b
  1411  0007B6                     l2683:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1415  0007B6  C070  FFD9         	movff	sprintf@ap,fsr2l
  1416  0007BA  C071  FFDA         	movff	sprintf@ap+1,fsr2h
  1417  0007BE  CFDE F083          	movff	postinc2,sprintf@fval
  1418  0007C2  CFDE F084          	movff	postinc2,sprintf@fval+1
  1419  0007C6  CFDD F085          	movff	postdec2,sprintf@fval+2
  1420                           
  1421                           ; BSR set to: 0
  1422  0007CA  0E03               	movlw	3
  1423  0007CC  0100               	movlb	0	; () banked
  1424  0007CE  2770               	addwf	sprintf@ap& (0+255),f,b
  1425  0007D0  0E00               	movlw	0
  1426  0007D2  2371               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;doprnt.c: 831: if(fval < 0.0) {
  1430  0007D4  0100               	movlb	0	; () banked
  1431  0007D6  AF85               	btfss	(sprintf@fval+2)& (0+255),7,b
  1432  0007D8  D011               	goto	l2693
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 832: fval = -fval;
  1436  0007DA  C083  F02D         	movff	sprintf@fval,___ftneg@f1
  1437  0007DE  C084  F02E         	movff	sprintf@fval+1,___ftneg@f1+1
  1438  0007E2  C085  F02F         	movff	sprintf@fval+2,___ftneg@f1+2
  1439  0007E6  EC1D  F015         	call	___ftneg	;wreg free
  1440  0007EA  C02D  F083         	movff	?___ftneg,sprintf@fval
  1441  0007EE  C02E  F084         	movff	?___ftneg+1,sprintf@fval+1
  1442  0007F2  C02F  F085         	movff	?___ftneg+2,sprintf@fval+2
  1443                           
  1444                           ;doprnt.c: 833: flag |= 0x03;
  1445  0007F6  0E03               	movlw	3
  1446  0007F8  0100               	movlb	0	; () banked
  1447  0007FA  1375               	iorwf	sprintf@flag& (0+255),f,b
  1448  0007FC                     l2693:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 834: }
  1452                           ;doprnt.c: 835: exp = 0;
  1453  0007FC  0E00               	movlw	0
  1454  0007FE  0100               	movlb	0	; () banked
  1455  000800  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  1456  000802  0E00               	movlw	0
  1457  000804  6F7F               	movwf	sprintf@exp& (0+255),b
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;doprnt.c: 836: if( fval!=0) {
  1461  000806  0100               	movlb	0	; () banked
  1462  000808  5183               	movf	sprintf@fval& (0+255),w,b
  1463  00080A  0100               	movlb	0	; () banked
  1464  00080C  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1465  00080E  0100               	movlb	0	; () banked
  1466  000810  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1467  000812  B4D8               	btfsc	status,2,c
  1468  000814  D091               	goto	l2721
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1472  000816  0E82               	movlw	130
  1473  000818  0100               	movlb	0	; () banked
  1474  00081A  6F67               	movwf	??_sprintf& (0+255),b
  1475  00081C  0EFF               	movlw	255
  1476  00081E  0100               	movlb	0	; () banked
  1477  000820  6F68               	movwf	(??_sprintf+1)& (0+255),b
  1478  000822  C083  F069         	movff	sprintf@fval,??_sprintf+2
  1479  000826  C084  F06A         	movff	sprintf@fval+1,??_sprintf+3
  1480  00082A  C085  F06B         	movff	sprintf@fval+2,??_sprintf+4
  1481  00082E  C086  F06C         	movff	sprintf@fval+3,??_sprintf+5
  1482  000832  0E10               	movlw	16
  1483  000834  D006               	goto	u2770
  1484  000836                     u2775:
  1485  000836  0100               	movlb	0	; () banked
  1486  000838  90D8               	bcf	status,0,c
  1487  00083A  336C               	rrcf	(??_sprintf+5)& (0+255),f,b
  1488  00083C  336B               	rrcf	(??_sprintf+4)& (0+255),f,b
  1489  00083E  336A               	rrcf	(??_sprintf+3)& (0+255),f,b
  1490  000840  3369               	rrcf	(??_sprintf+2)& (0+255),f,b
  1491  000842                     u2770:
  1492  000842  2EE8               	decfsz	wreg,f,c
  1493  000844  D7F8               	goto	u2775
  1494  000846  0100               	movlb	0	; () banked
  1495  000848  5169               	movf	(??_sprintf+2)& (0+255),w,b
  1496  00084A  0100               	movlb	0	; () banked
  1497  00084C  2567               	addwf	??_sprintf& (0+255),w,b
  1498  00084E  0100               	movlb	0	; () banked
  1499  000850  6F7F               	movwf	sprintf@exp& (0+255),b
  1500  000852  0E00               	movlw	0
  1501  000854  0100               	movlb	0	; () banked
  1502  000856  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  1503  000858  0100               	movlb	0	; () banked
  1504  00085A  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 838: exp--;
  1508  00085C  0100               	movlb	0	; () banked
  1509  00085E  077F               	decf	sprintf@exp& (0+255),f,b
  1510  000860  A0D8               	btfss	status,0,c
  1511  000862  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;doprnt.c: 839: exp *= 3;
  1515  000864  C07F  F00F         	movff	sprintf@exp,___wmul@multiplier
  1516  000868  C080  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1517  00086C  0E00               	movlw	0
  1518  00086E  6E12               	movwf	___wmul@multiplicand+1,c
  1519  000870  0E03               	movlw	3
  1520  000872  6E11               	movwf	___wmul@multiplicand,c
  1521  000874  EC0A  F015         	call	___wmul	;wreg free
  1522  000878  C00F  F07F         	movff	?___wmul,sprintf@exp
  1523  00087C  C010  F080         	movff	?___wmul+1,sprintf@exp+1
  1524                           
  1525                           ;doprnt.c: 840: exp /= 10;
  1526  000880  C07F  F007         	movff	sprintf@exp,___awdiv@dividend
  1527  000884  C080  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1528  000888  0E00               	movlw	0
  1529  00088A  6E0A               	movwf	___awdiv@divisor+1,c
  1530  00088C  0E0A               	movlw	10
  1531  00088E  6E09               	movwf	___awdiv@divisor,c
  1532  000890  EC71  F013         	call	___awdiv	;wreg free
  1533  000894  C007  F07F         	movff	?___awdiv,sprintf@exp
  1534  000898  C008  F080         	movff	?___awdiv+1,sprintf@exp+1
  1535                           
  1536                           ;doprnt.c: 841: if(exp < 0)
  1537  00089C  0100               	movlb	0	; () banked
  1538  00089E  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  1539  0008A0  D004               	goto	l2709
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 842: exp--;
  1543  0008A2  0100               	movlb	0	; () banked
  1544  0008A4  077F               	decf	sprintf@exp& (0+255),f,b
  1545  0008A6  A0D8               	btfss	status,0,c
  1546  0008A8  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1547  0008AA                     l2709:
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1551  0008AA  0100               	movlb	0	; () banked
  1552  0008AC  517F               	movf	sprintf@exp& (0+255),w,b
  1553  0008AE  0800               	sublw	0
  1554  0008B0  ECF2  F00A         	call	_scale
  1555  0008B4  C03F  F077         	movff	?_scale,sprintf@tmpval
  1556  0008B8  C040  F078         	movff	?_scale+1,sprintf@tmpval+1
  1557  0008BC  C041  F079         	movff	?_scale+2,sprintf@tmpval+2
  1558                           
  1559                           ;doprnt.c: 847: tmpval.integ *= fval;
  1560  0008C0  C077  F030         	movff	sprintf@tmpval,___ftmul@f1
  1561  0008C4  C078  F031         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1562  0008C8  C079  F032         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1563  0008CC  C083  F033         	movff	sprintf@fval,___ftmul@f2
  1564  0008D0  C084  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  1565  0008D4  C085  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  1566  0008D8  EC6B  F011         	call	___ftmul	;wreg free
  1567  0008DC  C030  F077         	movff	?___ftmul,sprintf@tmpval
  1568  0008E0  C031  F078         	movff	?___ftmul+1,sprintf@tmpval+1
  1569  0008E4  C032  F079         	movff	?___ftmul+2,sprintf@tmpval+2
  1570                           
  1571                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1572  0008E8  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  1573  0008EC  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1574  0008F0  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1575  0008F4  0E00               	movlw	0
  1576  0008F6  6E58               	movwf	___ftge@ff2,c
  1577  0008F8  0E80               	movlw	128
  1578  0008FA  6E59               	movwf	___ftge@ff2+1,c
  1579  0008FC  0E3F               	movlw	63
  1580  0008FE  6E5A               	movwf	___ftge@ff2+2,c
  1581  000900  EC29  F013         	call	___ftge	;wreg free
  1582  000904  B0D8               	btfsc	status,0,c
  1583  000906  D005               	goto	l2717
  1584                           
  1585                           ;doprnt.c: 849: exp--;
  1586  000908  0100               	movlb	0	; () banked
  1587  00090A  077F               	decf	sprintf@exp& (0+255),f,b
  1588  00090C  A0D8               	btfss	status,0,c
  1589  00090E  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1590  000910  D013               	goto	l2721
  1591  000912                     l2717:
  1592                           
  1593                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1594  000912  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  1595  000916  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1596  00091A  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1597  00091E  0E00               	movlw	0
  1598  000920  6E58               	movwf	___ftge@ff2,c
  1599  000922  0E20               	movlw	32
  1600  000924  6E59               	movwf	___ftge@ff2+1,c
  1601  000926  0E41               	movlw	65
  1602  000928  6E5A               	movwf	___ftge@ff2+2,c
  1603  00092A  EC29  F013         	call	___ftge	;wreg free
  1604  00092E  A0D8               	btfss	status,0,c
  1605  000930  D003               	goto	l2721
  1606                           
  1607                           ;doprnt.c: 851: exp++;
  1608  000932  0100               	movlb	0	; () banked
  1609  000934  4B7F               	infsnz	sprintf@exp& (0+255),f,b
  1610  000936  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  1611  000938                     l2721:
  1612                           
  1613                           ;doprnt.c: 852: }
  1614                           ;doprnt.c: 854: if(exp <= 0)
  1615  000938  0100               	movlb	0	; () banked
  1616  00093A  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1617  00093C  D007               	goto	l2723
  1618  00093E  0100               	movlb	0	; () banked
  1619  000940  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  1620  000942  E108               	bnz	l130
  1621  000944  0100               	movlb	0	; () banked
  1622  000946  057F               	decf	sprintf@exp& (0+255),w,b
  1623  000948  B0D8               	btfsc	status,0,c
  1624  00094A  D004               	goto	l130
  1625  00094C                     l2723:
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;doprnt.c: 855: c = 1;
  1629  00094C  0E01               	movlw	1
  1630  00094E  0100               	movlb	0	; () banked
  1631  000950  6F86               	movwf	sprintf@c& (0+255),b
  1632  000952  D002               	goto	l131
  1633  000954                     l130:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 856: else
  1637                           ;doprnt.c: 857: c = exp;
  1638  000954  C07F  F086         	movff	sprintf@exp,sprintf@c
  1639  000958                     l131:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;doprnt.c: 858: if(
  1643                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1644                           ;doprnt.c: 868: ) {
  1645  000958  0100               	movlb	0	; () banked
  1646  00095A  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  1647  00095C  D284               	goto	l132
  1648                           
  1649                           ; BSR set to: 0
  1650  00095E  0100               	movlb	0	; () banked
  1651  000960  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  1652  000962  D008               	goto	l2727
  1653  000964  0EFC               	movlw	252
  1654  000966  0100               	movlb	0	; () banked
  1655  000968  5D7F               	subwf	sprintf@exp& (0+255),w,b
  1656  00096A  0EFF               	movlw	255
  1657  00096C  0100               	movlb	0	; () banked
  1658  00096E  5980               	subwfb	(sprintf@exp+1)& (0+255),w,b
  1659  000970  A0D8               	btfss	status,0,c
  1660  000972  D010               	goto	l2729
  1661  000974                     l2727:
  1662                           
  1663                           ; BSR set to: 0
  1664  000974  0100               	movlb	0	; () banked
  1665  000976  5181               	movf	sprintf@prec& (0+255),w,b
  1666  000978  0100               	movlb	0	; () banked
  1667  00097A  5D7F               	subwf	sprintf@exp& (0+255),w,b
  1668  00097C  0100               	movlb	0	; () banked
  1669  00097E  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  1670  000980  0A80               	xorlw	128
  1671  000982  0100               	movlb	0	; () banked
  1672  000984  6F67               	movwf	??_sprintf& (0+255),b
  1673  000986  0100               	movlb	0	; () banked
  1674  000988  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  1675  00098A  0A80               	xorlw	128
  1676  00098C  0100               	movlb	0	; () banked
  1677  00098E  5967               	subwfb	??_sprintf& (0+255),w,b
  1678  000990  A0D8               	btfss	status,0,c
  1679  000992  D269               	goto	l132
  1680  000994                     l2729:
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;doprnt.c: 870: if(prec && flag & 0x200)
  1684  000994  0100               	movlb	0	; () banked
  1685  000996  5181               	movf	sprintf@prec& (0+255),w,b
  1686  000998  0100               	movlb	0	; () banked
  1687  00099A  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1688  00099C  B4D8               	btfsc	status,2,c
  1689  00099E  D007               	goto	l2735
  1690                           
  1691                           ; BSR set to: 0
  1692  0009A0  0100               	movlb	0	; () banked
  1693  0009A2  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  1694  0009A4  D004               	goto	l2735
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 871: prec--;
  1698  0009A6  0100               	movlb	0	; () banked
  1699  0009A8  0781               	decf	sprintf@prec& (0+255),f,b
  1700  0009AA  A0D8               	btfss	status,0,c
  1701  0009AC  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  1702  0009AE                     l2735:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1706  0009AE  0100               	movlb	0	; () banked
  1707  0009B0  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  1708  0009B2  E105               	bnz	u2870
  1709  0009B4  0E09               	movlw	9
  1710  0009B6  0100               	movlb	0	; () banked
  1711  0009B8  5D81               	subwf	sprintf@prec& (0+255),w,b
  1712  0009BA  A0D8               	btfss	status,0,c
  1713  0009BC  D004               	goto	l136
  1714  0009BE                     u2870:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1718  0009BE  0E08               	movlw	8
  1719  0009C0  0100               	movlb	0	; () banked
  1720  0009C2  6F86               	movwf	sprintf@c& (0+255),b
  1721  0009C4  D002               	goto	l2739
  1722  0009C6                     l136:
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;doprnt.c: 875: else
  1726                           ;doprnt.c: 876: c = prec;
  1727  0009C6  C081  F086         	movff	sprintf@prec,sprintf@c
  1728  0009CA                     l2739:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;doprnt.c: 877: if( fval!=0) {
  1732  0009CA  0100               	movlb	0	; () banked
  1733  0009CC  5183               	movf	sprintf@fval& (0+255),w,b
  1734  0009CE  0100               	movlb	0	; () banked
  1735  0009D0  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1736  0009D2  0100               	movlb	0	; () banked
  1737  0009D4  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1738  0009D6  B4D8               	btfsc	status,2,c
  1739  0009D8  D0E6               	goto	l2759
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;doprnt.c: 878: fval /= scale(exp-c);
  1743  0009DA  C083  F046         	movff	sprintf@fval,___ftdiv@f1
  1744  0009DE  C084  F047         	movff	sprintf@fval+1,___ftdiv@f1+1
  1745  0009E2  C085  F048         	movff	sprintf@fval+2,___ftdiv@f1+2
  1746  0009E6  0100               	movlb	0	; () banked
  1747  0009E8  5186               	movf	sprintf@c& (0+255),w,b
  1748  0009EA  0800               	sublw	0
  1749  0009EC  0100               	movlb	0	; () banked
  1750  0009EE  257F               	addwf	sprintf@exp& (0+255),w,b
  1751  0009F0  ECF2  F00A         	call	_scale
  1752  0009F4  C03F  F049         	movff	?_scale,___ftdiv@f2
  1753  0009F8  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  1754  0009FC  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  1755  000A00  EC5F  F012         	call	___ftdiv	;wreg free
  1756  000A04  C046  F083         	movff	?___ftdiv,sprintf@fval
  1757  000A08  C047  F084         	movff	?___ftdiv+1,sprintf@fval+1
  1758  000A0C  C048  F085         	movff	?___ftdiv+2,sprintf@fval+2
  1759                           
  1760                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  1761  000A10  C083  F04C         	movff	sprintf@fval,___ftadd@f2
  1762  000A14  C084  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  1763  000A18  C085  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  1764  000A1C  C083  F015         	movff	sprintf@fval,___fttol@f1
  1765  000A20  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1766  000A24  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1767  000A28  ECE5  F011         	call	___fttol	;wreg free
  1768  000A2C  C015  F024         	movff	?___fttol,___lltoft@c
  1769  000A30  C016  F025         	movff	?___fttol+1,___lltoft@c+1
  1770  000A34  C017  F026         	movff	?___fttol+2,___lltoft@c+2
  1771  000A38  C018  F027         	movff	?___fttol+3,___lltoft@c+3
  1772  000A3C  EC98  F014         	call	___lltoft	;wreg free
  1773  000A40  C024  F02D         	movff	?___lltoft,___ftneg@f1
  1774  000A44  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  1775  000A48  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  1776  000A4C  EC1D  F015         	call	___ftneg	;wreg free
  1777  000A50  C02D  F049         	movff	?___ftneg,___ftadd@f1
  1778  000A54  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  1779  000A58  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  1780  000A5C  EC68  F00F         	call	___ftadd	;wreg free
  1781  000A60  C049  F055         	movff	?___ftadd,___ftge@ff1
  1782  000A64  C04A  F056         	movff	?___ftadd+1,___ftge@ff1+1
  1783  000A68  C04B  F057         	movff	?___ftadd+2,___ftge@ff1+2
  1784  000A6C  0E00               	movlw	0
  1785  000A6E  6E58               	movwf	___ftge@ff2,c
  1786  000A70  0E00               	movlw	0
  1787  000A72  6E59               	movwf	___ftge@ff2+1,c
  1788  000A74  0E3F               	movlw	63
  1789  000A76  6E5A               	movwf	___ftge@ff2+2,c
  1790  000A78  EC29  F013         	call	___ftge	;wreg free
  1791  000A7C  A0D8               	btfss	status,0,c
  1792  000A7E  D014               	goto	l2747
  1793                           
  1794                           ;doprnt.c: 894: fval += 0.5;
  1795  000A80  C083  F049         	movff	sprintf@fval,___ftadd@f1
  1796  000A84  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  1797  000A88  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  1798  000A8C  0E00               	movlw	0
  1799  000A8E  6E4C               	movwf	___ftadd@f2,c
  1800  000A90  0E00               	movlw	0
  1801  000A92  6E4D               	movwf	___ftadd@f2+1,c
  1802  000A94  0E3F               	movlw	63
  1803  000A96  6E4E               	movwf	___ftadd@f2+2,c
  1804  000A98  EC68  F00F         	call	___ftadd	;wreg free
  1805  000A9C  C049  F083         	movff	?___ftadd,sprintf@fval
  1806  000AA0  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  1807  000AA4  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  1808  000AA8                     l2747:
  1809                           
  1810                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  1811  000AA8  C086  F067         	movff	sprintf@c,??_sprintf
  1812  000AAC  0100               	movlb	0	; () banked
  1813  000AAE  6B68               	clrf	(??_sprintf+1)& (0+255),b
  1814  000AB0  BF67               	btfsc	??_sprintf& (0+255),7,b
  1815  000AB2  0768               	decf	(??_sprintf+1)& (0+255),f,b
  1816  000AB4  0100               	movlb	0	; () banked
  1817  000AB6  90D8               	bcf	status,0,c
  1818  000AB8  3767               	rlcf	??_sprintf& (0+255),f,b
  1819  000ABA  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  1820  000ABC  0100               	movlb	0	; () banked
  1821  000ABE  90D8               	bcf	status,0,c
  1822  000AC0  3767               	rlcf	??_sprintf& (0+255),f,b
  1823  000AC2  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  1824  000AC4  0E04               	movlw	4
  1825  000AC6  0100               	movlb	0	; () banked
  1826  000AC8  2767               	addwf	??_sprintf& (0+255),f,b
  1827  000ACA  0E00               	movlw	0
  1828  000ACC  2368               	addwfc	(??_sprintf+1)& (0+255),f,b
  1829  000ACE  0E01               	movlw	low _dpowers
  1830  000AD0  0100               	movlb	0	; () banked
  1831  000AD2  2567               	addwf	??_sprintf& (0+255),w,b
  1832  000AD4  6EF6               	movwf	tblptrl,c
  1833  000AD6  0E06               	movlw	high _dpowers
  1834  000AD8  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  1835  000ADA  6EF7               	movwf	tblptrh,c
  1836  000ADC                     	if	0	;There are less than 3 active tblptr bytes
  1837  000ADC                     	endif
  1838  000ADC  C083  F015         	movff	sprintf@fval,___fttol@f1
  1839  000AE0  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1840  000AE4  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1841  000AE8  ECE5  F011         	call	___fttol	;wreg free
  1842  000AEC  0009               	tblrd		*+
  1843  000AEE  50F5               	movf	tablat,w,c
  1844  000AF0  5C15               	subwf	?___fttol,w,c
  1845  000AF2  0009               	tblrd		*+
  1846  000AF4  50F5               	movf	tablat,w,c
  1847  000AF6  5816               	subwfb	?___fttol+1,w,c
  1848  000AF8  0009               	tblrd		*+
  1849  000AFA  50F5               	movf	tablat,w,c
  1850  000AFC  5817               	subwfb	?___fttol+2,w,c
  1851  000AFE  0009               	tblrd		*+
  1852  000B00  50F5               	movf	tablat,w,c
  1853  000B02  5818               	subwfb	?___fttol+3,w,c
  1854  000B04  A0D8               	btfss	status,0,c
  1855  000B06  D018               	goto	l2753
  1856                           
  1857                           ;doprnt.c: 896: fval *= 1e-1;
  1858  000B08  C083  F030         	movff	sprintf@fval,___ftmul@f1
  1859  000B0C  C084  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  1860  000B10  C085  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  1861  000B14  0ECD               	movlw	205
  1862  000B16  6E33               	movwf	___ftmul@f2,c
  1863  000B18  0ECC               	movlw	204
  1864  000B1A  6E34               	movwf	___ftmul@f2+1,c
  1865  000B1C  0E3D               	movlw	61
  1866  000B1E  6E35               	movwf	___ftmul@f2+2,c
  1867  000B20  EC6B  F011         	call	___ftmul	;wreg free
  1868  000B24  C030  F083         	movff	?___ftmul,sprintf@fval
  1869  000B28  C031  F084         	movff	?___ftmul+1,sprintf@fval+1
  1870  000B2C  C032  F085         	movff	?___ftmul+2,sprintf@fval+2
  1871                           
  1872                           ;doprnt.c: 897: exp++;
  1873  000B30  0100               	movlb	0	; () banked
  1874  000B32  4B7F               	infsnz	sprintf@exp& (0+255),f,b
  1875  000B34  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  1876                           
  1877                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  1878  000B36  D037               	goto	l2759
  1879  000B38                     l2753:
  1880  000B38  0100               	movlb	0	; () banked
  1881  000B3A  5186               	movf	sprintf@c& (0+255),w,b
  1882  000B3C  0D04               	mullw	4
  1883  000B3E  0E01               	movlw	low _dpowers
  1884  000B40  24F3               	addwf	prodl,w,c
  1885  000B42  6EF6               	movwf	tblptrl,c
  1886  000B44  0E06               	movlw	high _dpowers
  1887  000B46  20F4               	addwfc	prodh,w,c
  1888  000B48  6EF7               	movwf	tblptrh,c
  1889  000B4A                     	if	0	;There are less than 3 active tblptr bytes
  1890  000B4A                     	endif
  1891  000B4A  C083  F015         	movff	sprintf@fval,___fttol@f1
  1892  000B4E  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1893  000B52  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1894  000B56  ECE5  F011         	call	___fttol	;wreg free
  1895  000B5A  0009               	tblrd		*+
  1896  000B5C  50F5               	movf	tablat,w,c
  1897  000B5E  5C15               	subwf	?___fttol,w,c
  1898  000B60  0009               	tblrd		*+
  1899  000B62  50F5               	movf	tablat,w,c
  1900  000B64  5816               	subwfb	?___fttol+1,w,c
  1901  000B66  0009               	tblrd		*+
  1902  000B68  50F5               	movf	tablat,w,c
  1903  000B6A  5817               	subwfb	?___fttol+2,w,c
  1904  000B6C  0009               	tblrd		*+
  1905  000B6E  50F5               	movf	tablat,w,c
  1906  000B70  5818               	subwfb	?___fttol+3,w,c
  1907  000B72  B0D8               	btfsc	status,0,c
  1908  000B74  D018               	goto	l2759
  1909                           
  1910                           ;doprnt.c: 899: fval *= 10.0;
  1911  000B76  C083  F030         	movff	sprintf@fval,___ftmul@f1
  1912  000B7A  C084  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  1913  000B7E  C085  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  1914  000B82  0E00               	movlw	0
  1915  000B84  6E33               	movwf	___ftmul@f2,c
  1916  000B86  0E20               	movlw	32
  1917  000B88  6E34               	movwf	___ftmul@f2+1,c
  1918  000B8A  0E41               	movlw	65
  1919  000B8C  6E35               	movwf	___ftmul@f2+2,c
  1920  000B8E  EC6B  F011         	call	___ftmul	;wreg free
  1921  000B92  C030  F083         	movff	?___ftmul,sprintf@fval
  1922  000B96  C031  F084         	movff	?___ftmul+1,sprintf@fval+1
  1923  000B9A  C032  F085         	movff	?___ftmul+2,sprintf@fval+2
  1924                           
  1925                           ;doprnt.c: 900: exp--;
  1926  000B9E  0100               	movlb	0	; () banked
  1927  000BA0  077F               	decf	sprintf@exp& (0+255),f,b
  1928  000BA2  A0D8               	btfss	status,0,c
  1929  000BA4  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1930  000BA6                     l2759:
  1931                           
  1932                           ;doprnt.c: 901: }
  1933                           ;doprnt.c: 903: }
  1934                           ;doprnt.c: 959: {
  1935                           ;doprnt.c: 973: if(flag & 0x03)
  1936  000BA6  0E03               	movlw	3
  1937  000BA8  0100               	movlb	0	; () banked
  1938  000BAA  1575               	andwf	sprintf@flag& (0+255),w,b
  1939  000BAC  0100               	movlb	0	; () banked
  1940  000BAE  6F67               	movwf	??_sprintf& (0+255),b
  1941  000BB0  0E00               	movlw	0
  1942  000BB2  0100               	movlb	0	; () banked
  1943  000BB4  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1944  000BB6  0100               	movlb	0	; () banked
  1945  000BB8  6F68               	movwf	(??_sprintf+1)& (0+255),b
  1946  000BBA  0100               	movlb	0	; () banked
  1947  000BBC  5167               	movf	??_sprintf& (0+255),w,b
  1948  000BBE  0100               	movlb	0	; () banked
  1949  000BC0  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  1950  000BC2  B4D8               	btfsc	status,2,c
  1951  000BC4  D009               	goto	l2765
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;doprnt.c: 974: ((*sp++ = ('-')));
  1955  000BC6  C060  FFD9         	movff	sprintf@sp,fsr2l
  1956  000BCA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1957  000BCE  0E2D               	movlw	45
  1958  000BD0  6EDF               	movwf	indf2,c
  1959                           
  1960                           ; BSR set to: 0
  1961  000BD2  0100               	movlb	0	; () banked
  1962  000BD4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1963  000BD6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1964  000BD8                     l2765:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;doprnt.c: 980: }
  1968                           ;doprnt.c: 985: val = (unsigned long)fval;
  1969  000BD8  C083  F015         	movff	sprintf@fval,___fttol@f1
  1970  000BDC  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1971  000BE0  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1972  000BE4  ECE5  F011         	call	___fttol	;wreg free
  1973  000BE8  C015  F07B         	movff	?___fttol,sprintf@val
  1974  000BEC  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  1975  000BF0  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  1976  000BF4  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  1977                           
  1978                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  1979  000BF8  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  1980  000BFC  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1981  000C00  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1982  000C04  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1983  000C08  0100               	movlb	0	; () banked
  1984  000C0A  5186               	movf	sprintf@c& (0+255),w,b
  1985  000C0C  0D04               	mullw	4
  1986  000C0E  0E01               	movlw	low _dpowers
  1987  000C10  24F3               	addwf	prodl,w,c
  1988  000C12  6EF6               	movwf	tblptrl,c
  1989  000C14  0E06               	movlw	high _dpowers
  1990  000C16  20F4               	addwfc	prodh,w,c
  1991  000C18  6EF7               	movwf	tblptrh,c
  1992  000C1A                     	if	0	;There are less than 3 active tblptr bytes
  1993  000C1A                     	endif
  1994  000C1A  0009               	tblrd		*+
  1995  000C1C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1996  000C20  0009               	tblrd		*+
  1997  000C22  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1998  000C26  0009               	tblrd		*+
  1999  000C28  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2000  000C2C  000A               	tblrd		*-
  2001  000C2E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2002  000C32  ECB3  F013         	call	___lldiv	;wreg free
  2003  000C36  5001               	movf	?___lldiv,w,c
  2004  000C38  0F30               	addlw	48
  2005  000C3A  C060  FFD9         	movff	sprintf@sp,fsr2l
  2006  000C3E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2007  000C42  6EDF               	movwf	indf2,c
  2008  000C44  0100               	movlb	0	; () banked
  2009  000C46  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2010  000C48  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;doprnt.c: 987: val %= dpowers[c];
  2014  000C4A  C07B  F001         	movff	sprintf@val,___llmod@dividend
  2015  000C4E  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2016  000C52  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2017  000C56  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2018  000C5A  0100               	movlb	0	; () banked
  2019  000C5C  5186               	movf	sprintf@c& (0+255),w,b
  2020  000C5E  0D04               	mullw	4
  2021  000C60  0E01               	movlw	low _dpowers
  2022  000C62  24F3               	addwf	prodl,w,c
  2023  000C64  6EF6               	movwf	tblptrl,c
  2024  000C66  0E06               	movlw	high _dpowers
  2025  000C68  20F4               	addwfc	prodh,w,c
  2026  000C6A  6EF7               	movwf	tblptrh,c
  2027  000C6C                     	if	0	;There are less than 3 active tblptr bytes
  2028  000C6C                     	endif
  2029  000C6C  0009               	tblrd		*+
  2030  000C6E  CFF5 F005          	movff	tablat,___llmod@divisor
  2031  000C72  0009               	tblrd		*+
  2032  000C74  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2033  000C78  0009               	tblrd		*+
  2034  000C7A  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2035  000C7E  000A               	tblrd		*-
  2036  000C80  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2037  000C84  EC65  F014         	call	___llmod	;wreg free
  2038  000C88  C001  F07B         	movff	?___llmod,sprintf@val
  2039  000C8C  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  2040  000C90  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  2041  000C94  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  2042                           
  2043                           ;doprnt.c: 992: if(prec)
  2044  000C98  0100               	movlb	0	; () banked
  2045  000C9A  5181               	movf	sprintf@prec& (0+255),w,b
  2046  000C9C  0100               	movlb	0	; () banked
  2047  000C9E  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2048  000CA0  B4D8               	btfsc	status,2,c
  2049  000CA2  D096               	goto	l2801
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 994: {
  2053                           ;doprnt.c: 995: ((*sp++ = ('.')));
  2054  000CA4  C060  FFD9         	movff	sprintf@sp,fsr2l
  2055  000CA8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2056  000CAC  0E2E               	movlw	46
  2057  000CAE  6EDF               	movwf	indf2,c
  2058                           
  2059                           ; BSR set to: 0
  2060  000CB0  0100               	movlb	0	; () banked
  2061  000CB2  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2062  000CB4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;doprnt.c: 996: prec -= c;
  2066  000CB6  0100               	movlb	0	; () banked
  2067  000CB8  5186               	movf	sprintf@c& (0+255),w,b
  2068  000CBA  0100               	movlb	0	; () banked
  2069  000CBC  5F81               	subwf	sprintf@prec& (0+255),f,b
  2070  000CBE  0E00               	movlw	0
  2071  000CC0  0100               	movlb	0	; () banked
  2072  000CC2  BF86               	btfsc	sprintf@c& (0+255),7,b
  2073  000CC4  0EFF               	movlw	255
  2074  000CC6  0100               	movlb	0	; () banked
  2075  000CC8  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2076                           
  2077                           ;doprnt.c: 997: while(c--) {
  2078  000CCA  D068               	goto	l2791
  2079  000CCC                     l146:
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2083  000CCC  0100               	movlb	0	; () banked
  2084  000CCE  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  2085  000CD0  D015               	goto	l2785
  2086                           
  2087                           ; BSR set to: 0
  2088  000CD2  0100               	movlb	0	; () banked
  2089  000CD4  517B               	movf	sprintf@val& (0+255),w,b
  2090  000CD6  0100               	movlb	0	; () banked
  2091  000CD8  117C               	iorwf	(sprintf@val+1)& (0+255),w,b
  2092  000CDA  0100               	movlb	0	; () banked
  2093  000CDC  117D               	iorwf	(sprintf@val+2)& (0+255),w,b
  2094  000CDE  0100               	movlb	0	; () banked
  2095  000CE0  117E               	iorwf	(sprintf@val+3)& (0+255),w,b
  2096  000CE2  A4D8               	btfss	status,2,c
  2097  000CE4  D00B               	goto	l2785
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;doprnt.c: 1003: prec = c = 0;
  2101  000CE6  0E00               	movlw	0
  2102  000CE8  0100               	movlb	0	; () banked
  2103  000CEA  6F86               	movwf	sprintf@c& (0+255),b
  2104  000CEC  0100               	movlb	0	; () banked
  2105  000CEE  5186               	movf	sprintf@c& (0+255),w,b
  2106  000CF0  0100               	movlb	0	; () banked
  2107  000CF2  6F81               	movwf	sprintf@prec& (0+255),b
  2108  000CF4  6B82               	clrf	(sprintf@prec+1)& (0+255),b
  2109  000CF6  BF81               	btfsc	sprintf@prec& (0+255),7,b
  2110  000CF8  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2111                           
  2112                           ;doprnt.c: 1004: break;
  2113  000CFA  D064               	goto	l2799
  2114  000CFC                     l2785:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;doprnt.c: 1005: }
  2118                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  2119  000CFC  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2120  000D00  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2121  000D04  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2122  000D08  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2123  000D0C  0100               	movlb	0	; () banked
  2124  000D0E  5186               	movf	sprintf@c& (0+255),w,b
  2125  000D10  0D04               	mullw	4
  2126  000D12  0E01               	movlw	low _dpowers
  2127  000D14  24F3               	addwf	prodl,w,c
  2128  000D16  6EF6               	movwf	tblptrl,c
  2129  000D18  0E06               	movlw	high _dpowers
  2130  000D1A  20F4               	addwfc	prodh,w,c
  2131  000D1C  6EF7               	movwf	tblptrh,c
  2132  000D1E                     	if	0	;There are less than 3 active tblptr bytes
  2133  000D1E                     	endif
  2134  000D1E  0009               	tblrd		*+
  2135  000D20  CFF5 F005          	movff	tablat,___lldiv@divisor
  2136  000D24  0009               	tblrd		*+
  2137  000D26  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2138  000D2A  0009               	tblrd		*+
  2139  000D2C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2140  000D30  000A               	tblrd		*-
  2141  000D32  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2142  000D36  ECB3  F013         	call	___lldiv	;wreg free
  2143  000D3A  5001               	movf	?___lldiv,w,c
  2144  000D3C  0F30               	addlw	48
  2145  000D3E  C060  FFD9         	movff	sprintf@sp,fsr2l
  2146  000D42  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2147  000D46  6EDF               	movwf	indf2,c
  2148  000D48  0100               	movlb	0	; () banked
  2149  000D4A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2150  000D4C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;doprnt.c: 1008: val %= dpowers[c];
  2154  000D4E  C07B  F001         	movff	sprintf@val,___llmod@dividend
  2155  000D52  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2156  000D56  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2157  000D5A  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2158  000D5E  0100               	movlb	0	; () banked
  2159  000D60  5186               	movf	sprintf@c& (0+255),w,b
  2160  000D62  0D04               	mullw	4
  2161  000D64  0E01               	movlw	low _dpowers
  2162  000D66  24F3               	addwf	prodl,w,c
  2163  000D68  6EF6               	movwf	tblptrl,c
  2164  000D6A  0E06               	movlw	high _dpowers
  2165  000D6C  20F4               	addwfc	prodh,w,c
  2166  000D6E  6EF7               	movwf	tblptrh,c
  2167  000D70                     	if	0	;There are less than 3 active tblptr bytes
  2168  000D70                     	endif
  2169  000D70  0009               	tblrd		*+
  2170  000D72  CFF5 F005          	movff	tablat,___llmod@divisor
  2171  000D76  0009               	tblrd		*+
  2172  000D78  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2173  000D7C  0009               	tblrd		*+
  2174  000D7E  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2175  000D82  000A               	tblrd		*-
  2176  000D84  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2177  000D88  EC65  F014         	call	___llmod	;wreg free
  2178  000D8C  C001  F07B         	movff	?___llmod,sprintf@val
  2179  000D90  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  2180  000D94  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  2181  000D98  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  2182  000D9C                     l2791:
  2183  000D9C  0100               	movlb	0	; () banked
  2184  000D9E  0786               	decf	sprintf@c& (0+255),f,b
  2185  000DA0  0100               	movlb	0	; () banked
  2186  000DA2  2986               	incf	sprintf@c& (0+255),w,b
  2187  000DA4  B4D8               	btfsc	status,2,c
  2188  000DA6  D00E               	goto	l2799
  2189  000DA8  D791               	goto	l146
  2190  000DAA                     l2793:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2194  000DAA  C060  FFD9         	movff	sprintf@sp,fsr2l
  2195  000DAE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2196  000DB2  0E30               	movlw	48
  2197  000DB4  6EDF               	movwf	indf2,c
  2198                           
  2199                           ; BSR set to: 0
  2200  000DB6  0100               	movlb	0	; () banked
  2201  000DB8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2202  000DBA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1013: prec--;
  2206  000DBC  0100               	movlb	0	; () banked
  2207  000DBE  0781               	decf	sprintf@prec& (0+255),f,b
  2208  000DC0  A0D8               	btfss	status,0,c
  2209  000DC2  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2210  000DC4                     l2799:
  2211                           
  2212                           ; BSR set to: 0
  2213  000DC4  0100               	movlb	0	; () banked
  2214  000DC6  5181               	movf	sprintf@prec& (0+255),w,b
  2215  000DC8  0100               	movlb	0	; () banked
  2216  000DCA  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2217  000DCC  A4D8               	btfss	status,2,c
  2218  000DCE  D7ED               	goto	l2793
  2219  000DD0                     l2801:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;doprnt.c: 1014: }
  2223                           ;doprnt.c: 1015: }
  2224                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2225  000DD0  C060  FFD9         	movff	sprintf@sp,fsr2l
  2226  000DD4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2227  000DD8  0E65               	movlw	101
  2228  000DDA  6EDF               	movwf	indf2,c
  2229                           
  2230                           ; BSR set to: 0
  2231  000DDC  0100               	movlb	0	; () banked
  2232  000DDE  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2233  000DE0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 1022: if(exp < 0) {
  2237  000DE2  0100               	movlb	0	; () banked
  2238  000DE4  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  2239  000DE6  D00F               	goto	l2813
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;doprnt.c: 1023: exp = -exp;
  2243  000DE8  0100               	movlb	0	; () banked
  2244  000DEA  6D7F               	negf	sprintf@exp& (0+255),b
  2245  000DEC  1F80               	comf	(sprintf@exp+1)& (0+255),f,b
  2246  000DEE  B0D8               	btfsc	status,0,c
  2247  000DF0  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2251  000DF2  C060  FFD9         	movff	sprintf@sp,fsr2l
  2252  000DF6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2253  000DFA  0E2D               	movlw	45
  2254  000DFC  D009               	goto	L1
  2255  000DFE                     l2811:
  2256                           
  2257                           ; BSR set to: 0
  2258  000DFE  0100               	movlb	0	; () banked
  2259  000E00  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2260  000E02  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2261                           
  2262                           ;doprnt.c: 1025: } else
  2263  000E04  D007               	goto	l2817
  2264  000E06                     l2813:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2268  000E06  C060  FFD9         	movff	sprintf@sp,fsr2l
  2269  000E0A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2270  000E0E  0E2B               	movlw	43
  2271  000E10                     L1:
  2272  000E10  6EDF               	movwf	indf2,c
  2273  000E12  D7F5               	goto	l2811
  2274  000E14                     l2817:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2278  000E14  C07F  F007         	movff	sprintf@exp,___awdiv@dividend
  2279  000E18  C080  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2280  000E1C  0E00               	movlw	0
  2281  000E1E  6E0A               	movwf	___awdiv@divisor+1,c
  2282  000E20  0E0A               	movlw	10
  2283  000E22  6E09               	movwf	___awdiv@divisor,c
  2284  000E24  EC71  F013         	call	___awdiv	;wreg free
  2285  000E28  5007               	movf	?___awdiv,w,c
  2286  000E2A  0F30               	addlw	48
  2287  000E2C  C060  FFD9         	movff	sprintf@sp,fsr2l
  2288  000E30  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2289  000E34  6EDF               	movwf	indf2,c
  2290  000E36  0100               	movlb	0	; () banked
  2291  000E38  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2292  000E3A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2296  000E3C  C07F  F001         	movff	sprintf@exp,___awmod@dividend
  2297  000E40  C080  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2298  000E44  0E00               	movlw	0
  2299  000E46  6E04               	movwf	___awmod@divisor+1,c
  2300  000E48  0E0A               	movlw	10
  2301  000E4A  6E03               	movwf	___awmod@divisor,c
  2302  000E4C  EC2D  F014         	call	___awmod	;wreg free
  2303  000E50  5001               	movf	?___awmod,w,c
  2304  000E52  0F30               	addlw	48
  2305  000E54  C060  FFD9         	movff	sprintf@sp,fsr2l
  2306  000E58  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2307  000E5C  D3AB               	goto	L2
  2308  000E5E                     l2823:
  2309  000E5E  0100               	movlb	0	; () banked
  2310  000E60  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2311  000E62  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2312                           
  2313                           ;doprnt.c: 1047: continue;
  2314  000E64  D3A9               	goto	l2985
  2315  000E66                     l132:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;doprnt.c: 1048: }
  2319                           ;doprnt.c: 1087: if(flag & 0x200) {
  2320  000E66  0100               	movlb	0	; () banked
  2321  000E68  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  2322  000E6A  D104               	goto	l2861
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;doprnt.c: 1088: if(exp < 0)
  2326  000E6C  0100               	movlb	0	; () banked
  2327  000E6E  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  2328  000E70  D012               	goto	l2829
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1089: prec -= (exp+1);
  2332  000E72  0E01               	movlw	1
  2333  000E74  0100               	movlb	0	; () banked
  2334  000E76  257F               	addwf	sprintf@exp& (0+255),w,b
  2335  000E78  0100               	movlb	0	; () banked
  2336  000E7A  6F67               	movwf	??_sprintf& (0+255),b
  2337  000E7C  0E00               	movlw	0
  2338  000E7E  0100               	movlb	0	; () banked
  2339  000E80  2180               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2340  000E82  0100               	movlb	0	; () banked
  2341  000E84  6F68               	movwf	(??_sprintf+1)& (0+255),b
  2342  000E86  0100               	movlb	0	; () banked
  2343  000E88  5167               	movf	??_sprintf& (0+255),w,b
  2344  000E8A  0100               	movlb	0	; () banked
  2345  000E8C  5F81               	subwf	sprintf@prec& (0+255),f,b
  2346  000E8E  0100               	movlb	0	; () banked
  2347  000E90  5168               	movf	(??_sprintf+1)& (0+255),w,b
  2348  000E92  0100               	movlb	0	; () banked
  2349  000E94  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2350  000E96                     l2829:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2354  000E96  C083  F015         	movff	sprintf@fval,___fttol@f1
  2355  000E9A  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2356  000E9E  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2357  000EA2  ECE5  F011         	call	___fttol	;wreg free
  2358  000EA6  C015  F07B         	movff	?___fttol,sprintf@val
  2359  000EAA  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2360  000EAE  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2361  000EB2  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2362                           
  2363                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2364  000EB6  0E00               	movlw	0
  2365  000EB8  0100               	movlb	0	; () banked
  2366  000EBA  6F86               	movwf	sprintf@c& (0+255),b
  2367  000EBC                     l2833:
  2368                           
  2369                           ; BSR set to: 0
  2370  000EBC  0E0A               	movlw	10
  2371  000EBE  0100               	movlb	0	; () banked
  2372  000EC0  1986               	xorwf	sprintf@c& (0+255),w,b
  2373  000EC2  B4D8               	btfsc	status,2,c
  2374  000EC4  D01E               	goto	l2845
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 1093: if(val < dpowers[c])
  2378                           
  2379                           ; BSR set to: 0
  2380                           
  2381                           ; BSR set to: 0
  2382  000EC6  0100               	movlb	0	; () banked
  2383  000EC8  5186               	movf	sprintf@c& (0+255),w,b
  2384  000ECA  0D04               	mullw	4
  2385  000ECC  0E01               	movlw	low _dpowers
  2386  000ECE  24F3               	addwf	prodl,w,c
  2387  000ED0  6EF6               	movwf	tblptrl,c
  2388  000ED2  0E06               	movlw	high _dpowers
  2389  000ED4  20F4               	addwfc	prodh,w,c
  2390  000ED6  6EF7               	movwf	tblptrh,c
  2391  000ED8                     	if	0	;There are less than 3 active tblptr bytes
  2392  000ED8                     	endif
  2393  000ED8  0009               	tblrd		*+
  2394  000EDA  50F5               	movf	tablat,w,c
  2395  000EDC  0100               	movlb	0	; () banked
  2396  000EDE  5D7B               	subwf	sprintf@val& (0+255),w,b
  2397  000EE0  0009               	tblrd		*+
  2398  000EE2  50F5               	movf	tablat,w,c
  2399  000EE4  0100               	movlb	0	; () banked
  2400  000EE6  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  2401  000EE8  0009               	tblrd		*+
  2402  000EEA  50F5               	movf	tablat,w,c
  2403  000EEC  0100               	movlb	0	; () banked
  2404  000EEE  597D               	subwfb	(sprintf@val+2)& (0+255),w,b
  2405  000EF0  0009               	tblrd		*+
  2406  000EF2  50F5               	movf	tablat,w,c
  2407  000EF4  0100               	movlb	0	; () banked
  2408  000EF6  597E               	subwfb	(sprintf@val+3)& (0+255),w,b
  2409  000EF8  A0D8               	btfss	status,0,c
  2410  000EFA  D003               	goto	l2845
  2411                           
  2412                           ; BSR set to: 0
  2413                           
  2414                           ; BSR set to: 0
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;doprnt.c: 1094: break;
  2418  000EFC  0100               	movlb	0	; () banked
  2419  000EFE  2B86               	incf	sprintf@c& (0+255),f,b
  2420  000F00  D7DD               	goto	l2833
  2421  000F02                     l2845:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 1095: prec -= c;
  2425  000F02  0100               	movlb	0	; () banked
  2426  000F04  5186               	movf	sprintf@c& (0+255),w,b
  2427  000F06  0100               	movlb	0	; () banked
  2428  000F08  5F81               	subwf	sprintf@prec& (0+255),f,b
  2429  000F0A  0E00               	movlw	0
  2430  000F0C  0100               	movlb	0	; () banked
  2431  000F0E  BF86               	btfsc	sprintf@c& (0+255),7,b
  2432  000F10  0EFF               	movlw	255
  2433  000F12  0100               	movlb	0	; () banked
  2434  000F14  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2435                           
  2436                           ;doprnt.c: 1096: if(prec <= 12)
  2437  000F16  0100               	movlb	0	; () banked
  2438  000F18  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2439  000F1A  D008               	goto	l2847
  2440  000F1C  0100               	movlb	0	; () banked
  2441  000F1E  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2442  000F20  E11D               	bnz	l159
  2443  000F22  0E0D               	movlw	13
  2444  000F24  0100               	movlb	0	; () banked
  2445  000F26  5D81               	subwf	sprintf@prec& (0+255),w,b
  2446  000F28  B0D8               	btfsc	status,0,c
  2447  000F2A  D018               	goto	l159
  2448  000F2C                     l2847:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;doprnt.c: 1097: fval += fround(prec);
  2452  000F2C  C083  F049         	movff	sprintf@fval,___ftadd@f1
  2453  000F30  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2454  000F34  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2455  000F38  0100               	movlb	0	; () banked
  2456  000F3A  5181               	movf	sprintf@prec& (0+255),w,b
  2457  000F3C  EC45  F00E         	call	_fround
  2458  000F40  C03F  F04C         	movff	?_fround,___ftadd@f2
  2459  000F44  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2460  000F48  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2461  000F4C  EC68  F00F         	call	___ftadd	;wreg free
  2462  000F50  C049  F083         	movff	?___ftadd,sprintf@fval
  2463  000F54  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  2464  000F58  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  2465  000F5C                     l159:
  2466                           
  2467                           ;doprnt.c: 1100: {
  2468                           ;doprnt.c: 1101: double temp;
  2469                           ;doprnt.c: 1102: temp = scale(prec);
  2470  000F5C  0100               	movlb	0	; () banked
  2471  000F5E  5181               	movf	sprintf@prec& (0+255),w,b
  2472  000F60  ECF2  F00A         	call	_scale
  2473  000F64  C03F  F072         	movff	?_scale,sprintf@temp
  2474  000F68  C040  F073         	movff	?_scale+1,sprintf@temp+1
  2475  000F6C  C041  F074         	movff	?_scale+2,sprintf@temp+2
  2476                           
  2477                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2478  000F70  C072  F030         	movff	sprintf@temp,___ftmul@f1
  2479  000F74  C073  F031         	movff	sprintf@temp+1,___ftmul@f1+1
  2480  000F78  C074  F032         	movff	sprintf@temp+2,___ftmul@f1+2
  2481  000F7C  C083  F04C         	movff	sprintf@fval,___ftadd@f2
  2482  000F80  C084  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  2483  000F84  C085  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  2484  000F88  C07B  F024         	movff	sprintf@val,___lltoft@c
  2485  000F8C  C07C  F025         	movff	sprintf@val+1,___lltoft@c+1
  2486  000F90  C07D  F026         	movff	sprintf@val+2,___lltoft@c+2
  2487  000F94  C07E  F027         	movff	sprintf@val+3,___lltoft@c+3
  2488  000F98  EC98  F014         	call	___lltoft	;wreg free
  2489  000F9C  C024  F02D         	movff	?___lltoft,___ftneg@f1
  2490  000FA0  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  2491  000FA4  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  2492  000FA8  EC1D  F015         	call	___ftneg	;wreg free
  2493  000FAC  C02D  F049         	movff	?___ftneg,___ftadd@f1
  2494  000FB0  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  2495  000FB4  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  2496  000FB8  EC68  F00F         	call	___ftadd	;wreg free
  2497  000FBC  C049  F033         	movff	?___ftadd,___ftmul@f2
  2498  000FC0  C04A  F034         	movff	?___ftadd+1,___ftmul@f2+1
  2499  000FC4  C04B  F035         	movff	?___ftadd+2,___ftmul@f2+2
  2500  000FC8  EC6B  F011         	call	___ftmul	;wreg free
  2501  000FCC  C030  F072         	movff	?___ftmul,sprintf@temp
  2502  000FD0  C031  F073         	movff	?___ftmul+1,sprintf@temp+1
  2503  000FD4  C032  F074         	movff	?___ftmul+2,sprintf@temp+2
  2504                           
  2505                           ;doprnt.c: 1104: val = (unsigned long)temp;
  2506  000FD8  C072  F015         	movff	sprintf@temp,___fttol@f1
  2507  000FDC  C073  F016         	movff	sprintf@temp+1,___fttol@f1+1
  2508  000FE0  C074  F017         	movff	sprintf@temp+2,___fttol@f1+2
  2509  000FE4  ECE5  F011         	call	___fttol	;wreg free
  2510  000FE8  C015  F07B         	movff	?___fttol,sprintf@val
  2511  000FEC  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2512  000FF0  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2513  000FF4  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2514                           
  2515                           ;doprnt.c: 1105: }
  2516                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  2517  000FF8  D01E               	goto	l2857
  2518  000FFA                     l2853:
  2519                           
  2520                           ;doprnt.c: 1107: val /= 10;
  2521  000FFA  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2522  000FFE  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2523  001002  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2524  001006  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2525  00100A  0E0A               	movlw	10
  2526  00100C  6E05               	movwf	___lldiv@divisor,c
  2527  00100E  0E00               	movlw	0
  2528  001010  6E06               	movwf	___lldiv@divisor+1,c
  2529  001012  0E00               	movlw	0
  2530  001014  6E07               	movwf	___lldiv@divisor+2,c
  2531  001016  0E00               	movlw	0
  2532  001018  6E08               	movwf	___lldiv@divisor+3,c
  2533  00101A  ECB3  F013         	call	___lldiv	;wreg free
  2534  00101E  C001  F07B         	movff	?___lldiv,sprintf@val
  2535  001022  C002  F07C         	movff	?___lldiv+1,sprintf@val+1
  2536  001026  C003  F07D         	movff	?___lldiv+2,sprintf@val+2
  2537  00102A  C004  F07E         	movff	?___lldiv+3,sprintf@val+3
  2538                           
  2539                           ;doprnt.c: 1108: prec--;
  2540  00102E  0100               	movlb	0	; () banked
  2541  001030  0781               	decf	sprintf@prec& (0+255),f,b
  2542  001032  A0D8               	btfss	status,0,c
  2543  001034  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2544  001036                     l2857:
  2545  001036  0100               	movlb	0	; () banked
  2546  001038  5181               	movf	sprintf@prec& (0+255),w,b
  2547  00103A  0100               	movlb	0	; () banked
  2548  00103C  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2549  00103E  B4D8               	btfsc	status,2,c
  2550  001040  D03C               	goto	l2865
  2551                           
  2552                           ; BSR set to: 0
  2553  001042  C07B  F001         	movff	sprintf@val,___llmod@dividend
  2554  001046  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2555  00104A  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2556  00104E  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2557  001052  0E0A               	movlw	10
  2558  001054  6E05               	movwf	___llmod@divisor,c
  2559  001056  0E00               	movlw	0
  2560  001058  6E06               	movwf	___llmod@divisor+1,c
  2561  00105A  0E00               	movlw	0
  2562  00105C  6E07               	movwf	___llmod@divisor+2,c
  2563  00105E  0E00               	movlw	0
  2564  001060  6E08               	movwf	___llmod@divisor+3,c
  2565  001062  EC65  F014         	call	___llmod	;wreg free
  2566  001066  5001               	movf	?___llmod,w,c
  2567  001068  1002               	iorwf	?___llmod+1,w,c
  2568  00106A  1003               	iorwf	?___llmod+2,w,c
  2569  00106C  1004               	iorwf	?___llmod+3,w,c
  2570  00106E  A4D8               	btfss	status,2,c
  2571  001070  D024               	goto	l2865
  2572  001072  D7C3               	goto	l2853
  2573  001074                     l2861:
  2574                           
  2575                           ;doprnt.c: 1112: if(prec <= 12)
  2576  001074  0100               	movlb	0	; () banked
  2577  001076  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2578  001078  D008               	goto	l2863
  2579  00107A  0100               	movlb	0	; () banked
  2580  00107C  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2581  00107E  E11D               	bnz	l2865
  2582  001080  0E0D               	movlw	13
  2583  001082  0100               	movlb	0	; () banked
  2584  001084  5D81               	subwf	sprintf@prec& (0+255),w,b
  2585  001086  B0D8               	btfsc	status,0,c
  2586  001088  D018               	goto	l2865
  2587  00108A                     l2863:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;doprnt.c: 1113: fval += fround(prec);
  2591  00108A  C083  F049         	movff	sprintf@fval,___ftadd@f1
  2592  00108E  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2593  001092  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2594  001096  0100               	movlb	0	; () banked
  2595  001098  5181               	movf	sprintf@prec& (0+255),w,b
  2596  00109A  EC45  F00E         	call	_fround
  2597  00109E  C03F  F04C         	movff	?_fround,___ftadd@f2
  2598  0010A2  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2599  0010A6  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2600  0010AA  EC68  F00F         	call	___ftadd	;wreg free
  2601  0010AE  C049  F083         	movff	?___ftadd,sprintf@fval
  2602  0010B2  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  2603  0010B6  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  2604  0010BA                     l2865:
  2605                           
  2606                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2607  0010BA  0100               	movlb	0	; () banked
  2608  0010BC  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2609  0010BE  D008               	goto	l2867
  2610  0010C0  0100               	movlb	0	; () banked
  2611  0010C2  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2612  0010C4  E126               	bnz	l2873
  2613  0010C6  0E0A               	movlw	10
  2614  0010C8  0100               	movlb	0	; () banked
  2615  0010CA  5D7F               	subwf	sprintf@exp& (0+255),w,b
  2616  0010CC  B0D8               	btfsc	status,0,c
  2617  0010CE  D021               	goto	l2873
  2618  0010D0                     l2867:
  2619                           
  2620                           ; BSR set to: 0
  2621  0010D0  0100               	movlb	0	; () banked
  2622  0010D2  5183               	movf	sprintf@fval& (0+255),w,b
  2623  0010D4  0100               	movlb	0	; () banked
  2624  0010D6  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2625  0010D8  0100               	movlb	0	; () banked
  2626  0010DA  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2627  0010DC  B4D8               	btfsc	status,2,c
  2628  0010DE  D05B               	goto	l2887
  2629                           
  2630                           ; BSR set to: 0
  2631  0010E0  C083  F015         	movff	sprintf@fval,___fttol@f1
  2632  0010E4  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2633  0010E8  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2634  0010EC  ECE5  F011         	call	___fttol	;wreg free
  2635  0010F0  5015               	movf	?___fttol,w,c
  2636  0010F2  1016               	iorwf	?___fttol+1,w,c
  2637  0010F4  1017               	iorwf	?___fttol+2,w,c
  2638  0010F6  1018               	iorwf	?___fttol+3,w,c
  2639  0010F8  A4D8               	btfss	status,2,c
  2640  0010FA  D04D               	goto	l2887
  2641  0010FC  0100               	movlb	0	; () banked
  2642  0010FE  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2643  001100  D04A               	goto	l2887
  2644  001102  0100               	movlb	0	; () banked
  2645  001104  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2646  001106  E105               	bnz	l2873
  2647  001108  0E02               	movlw	2
  2648  00110A  0100               	movlb	0	; () banked
  2649  00110C  5D7F               	subwf	sprintf@exp& (0+255),w,b
  2650  00110E  A0D8               	btfss	status,0,c
  2651  001110  D042               	goto	l2887
  2652  001112                     l2873:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2656  001112  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  2657  001116  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2658  00111A  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2659  00111E  0E70               	movlw	112
  2660  001120  6E58               	movwf	___ftge@ff2,c
  2661  001122  0E89               	movlw	137
  2662  001124  6E59               	movwf	___ftge@ff2+1,c
  2663  001126  0E40               	movlw	64
  2664  001128  6E5A               	movwf	___ftge@ff2+2,c
  2665  00112A  EC29  F013         	call	___ftge	;wreg free
  2666  00112E  B0D8               	btfsc	status,0,c
  2667  001130  D003               	goto	l2877
  2668                           
  2669                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2670  001132  0100               	movlb	0	; () banked
  2671  001134  0EF7               	movlw	247
  2672  001136  D002               	goto	L3
  2673  001138                     l2877:
  2674                           
  2675                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2676  001138  0100               	movlb	0	; () banked
  2677  00113A  0EF8               	movlw	248
  2678  00113C                     L3:
  2679  00113C  277F               	addwf	sprintf@exp& (0+255),f,b
  2680  00113E  0EFF               	movlw	255
  2681  001140  2380               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;doprnt.c: 1124: }
  2685                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2686                           
  2687                           ; BSR set to: 0
  2688  001142  0100               	movlb	0	; () banked
  2689  001144  517F               	movf	sprintf@exp& (0+255),w,b
  2690  001146  ECF2  F00A         	call	_scale
  2691  00114A  C03F  F077         	movff	?_scale,sprintf@tmpval
  2692  00114E  C040  F078         	movff	?_scale+1,sprintf@tmpval+1
  2693  001152  C041  F079         	movff	?_scale+2,sprintf@tmpval+2
  2694                           
  2695                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2696  001156  C083  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2697  00115A  C084  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2698  00115E  C085  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2699  001162  C077  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2700  001166  C078  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2701  00116A  C079  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2702  00116E  EC3E  F010         	call	__tdiv_to_l_	;wreg free
  2703  001172  C001  F07B         	movff	?__tdiv_to_l_,sprintf@val
  2704  001176  C002  F07C         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2705  00117A  C003  F07D         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2706  00117E  C004  F07E         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2707                           
  2708                           ;doprnt.c: 1129: fval = 0.0;
  2709  001182  0E00               	movlw	0
  2710  001184  0100               	movlb	0	; () banked
  2711  001186  6F83               	movwf	sprintf@fval& (0+255),b
  2712  001188  0E00               	movlw	0
  2713  00118A  0100               	movlb	0	; () banked
  2714  00118C  6F84               	movwf	(sprintf@fval+1)& (0+255),b
  2715  00118E  0E00               	movlw	0
  2716  001190  0100               	movlb	0	; () banked
  2717  001192  6F85               	movwf	(sprintf@fval+2)& (0+255),b
  2718                           
  2719                           ;doprnt.c: 1130: } else {
  2720  001194  D033               	goto	l2891
  2721  001196                     l2887:
  2722                           
  2723                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2724  001196  C083  F015         	movff	sprintf@fval,___fttol@f1
  2725  00119A  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2726  00119E  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2727  0011A2  ECE5  F011         	call	___fttol	;wreg free
  2728  0011A6  C015  F07B         	movff	?___fttol,sprintf@val
  2729  0011AA  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2730  0011AE  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2731  0011B2  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2732                           
  2733                           ;doprnt.c: 1132: fval -= (double)val;
  2734  0011B6  C083  F055         	movff	sprintf@fval,___ftsub@f1
  2735  0011BA  C084  F056         	movff	sprintf@fval+1,___ftsub@f1+1
  2736  0011BE  C085  F057         	movff	sprintf@fval+2,___ftsub@f1+2
  2737  0011C2  C07B  F024         	movff	sprintf@val,___lltoft@c
  2738  0011C6  C07C  F025         	movff	sprintf@val+1,___lltoft@c+1
  2739  0011CA  C07D  F026         	movff	sprintf@val+2,___lltoft@c+2
  2740  0011CE  C07E  F027         	movff	sprintf@val+3,___lltoft@c+3
  2741  0011D2  EC98  F014         	call	___lltoft	;wreg free
  2742  0011D6  C024  F058         	movff	?___lltoft,___ftsub@f2
  2743  0011DA  C025  F059         	movff	?___lltoft+1,___ftsub@f2+1
  2744  0011DE  C026  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  2745  0011E2  ECEA  F014         	call	___ftsub	;wreg free
  2746  0011E6  C055  F083         	movff	?___ftsub,sprintf@fval
  2747  0011EA  C056  F084         	movff	?___ftsub+1,sprintf@fval+1
  2748  0011EE  C057  F085         	movff	?___ftsub+2,sprintf@fval+2
  2749                           
  2750                           ;doprnt.c: 1133: exp = 0;
  2751  0011F2  0E00               	movlw	0
  2752  0011F4  0100               	movlb	0	; () banked
  2753  0011F6  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  2754  0011F8  0E00               	movlw	0
  2755  0011FA  6F7F               	movwf	sprintf@exp& (0+255),b
  2756  0011FC                     l2891:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;doprnt.c: 1134: }
  2760                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2761  0011FC  0E01               	movlw	1
  2762  0011FE  0100               	movlb	0	; () banked
  2763  001200  6F86               	movwf	sprintf@c& (0+255),b
  2764  001202                     l2893:
  2765                           
  2766                           ; BSR set to: 0
  2767  001202  0E0A               	movlw	10
  2768  001204  0100               	movlb	0	; () banked
  2769  001206  1986               	xorwf	sprintf@c& (0+255),w,b
  2770  001208  B4D8               	btfsc	status,2,c
  2771  00120A  D01E               	goto	l2905
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;doprnt.c: 1137: if(val < dpowers[c])
  2775                           
  2776                           ; BSR set to: 0
  2777                           
  2778                           ; BSR set to: 0
  2779  00120C  0100               	movlb	0	; () banked
  2780  00120E  5186               	movf	sprintf@c& (0+255),w,b
  2781  001210  0D04               	mullw	4
  2782  001212  0E01               	movlw	low _dpowers
  2783  001214  24F3               	addwf	prodl,w,c
  2784  001216  6EF6               	movwf	tblptrl,c
  2785  001218  0E06               	movlw	high _dpowers
  2786  00121A  20F4               	addwfc	prodh,w,c
  2787  00121C  6EF7               	movwf	tblptrh,c
  2788  00121E                     	if	0	;There are less than 3 active tblptr bytes
  2789  00121E                     	endif
  2790  00121E  0009               	tblrd		*+
  2791  001220  50F5               	movf	tablat,w,c
  2792  001222  0100               	movlb	0	; () banked
  2793  001224  5D7B               	subwf	sprintf@val& (0+255),w,b
  2794  001226  0009               	tblrd		*+
  2795  001228  50F5               	movf	tablat,w,c
  2796  00122A  0100               	movlb	0	; () banked
  2797  00122C  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  2798  00122E  0009               	tblrd		*+
  2799  001230  50F5               	movf	tablat,w,c
  2800  001232  0100               	movlb	0	; () banked
  2801  001234  597D               	subwfb	(sprintf@val+2)& (0+255),w,b
  2802  001236  0009               	tblrd		*+
  2803  001238  50F5               	movf	tablat,w,c
  2804  00123A  0100               	movlb	0	; () banked
  2805  00123C  597E               	subwfb	(sprintf@val+3)& (0+255),w,b
  2806  00123E  A0D8               	btfss	status,0,c
  2807  001240  D003               	goto	l2905
  2808                           
  2809                           ; BSR set to: 0
  2810                           
  2811                           ; BSR set to: 0
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;doprnt.c: 1138: break;
  2815  001242  0100               	movlb	0	; () banked
  2816  001244  2B86               	incf	sprintf@c& (0+255),f,b
  2817  001246  D7DD               	goto	l2893
  2818  001248                     l2905:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;doprnt.c: 1175: {
  2822                           ;doprnt.c: 1188: if(flag & 0x03)
  2823  001248  0E03               	movlw	3
  2824  00124A  0100               	movlb	0	; () banked
  2825  00124C  1575               	andwf	sprintf@flag& (0+255),w,b
  2826  00124E  0100               	movlb	0	; () banked
  2827  001250  6F67               	movwf	??_sprintf& (0+255),b
  2828  001252  0E00               	movlw	0
  2829  001254  0100               	movlb	0	; () banked
  2830  001256  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2831  001258  0100               	movlb	0	; () banked
  2832  00125A  6F68               	movwf	(??_sprintf+1)& (0+255),b
  2833  00125C  0100               	movlb	0	; () banked
  2834  00125E  5167               	movf	??_sprintf& (0+255),w,b
  2835  001260  0100               	movlb	0	; () banked
  2836  001262  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  2837  001264  B4D8               	btfsc	status,2,c
  2838  001266  D054               	goto	l2919
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2842  001268  C060  FFD9         	movff	sprintf@sp,fsr2l
  2843  00126C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2844  001270  0E2D               	movlw	45
  2845  001272  D04C               	goto	L4
  2846  001274                     l2909:
  2847                           
  2848                           ; BSR set to: 0
  2849  001274  0100               	movlb	0	; () banked
  2850  001276  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2851  001278  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1195: }
  2855                           ;doprnt.c: 1196: while(c--) {
  2856  00127A  D04A               	goto	l2919
  2857  00127C                     l2911:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;doprnt.c: 1200: {
  2861                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2862  00127C  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2863  001280  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2864  001284  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2865  001288  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2866  00128C  0100               	movlb	0	; () banked
  2867  00128E  5186               	movf	sprintf@c& (0+255),w,b
  2868  001290  0D04               	mullw	4
  2869  001292  0E01               	movlw	low _dpowers
  2870  001294  24F3               	addwf	prodl,w,c
  2871  001296  6EF6               	movwf	tblptrl,c
  2872  001298  0E06               	movlw	high _dpowers
  2873  00129A  20F4               	addwfc	prodh,w,c
  2874  00129C  6EF7               	movwf	tblptrh,c
  2875  00129E                     	if	0	;There are less than 3 active tblptr bytes
  2876  00129E                     	endif
  2877  00129E  0009               	tblrd		*+
  2878  0012A0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2879  0012A4  0009               	tblrd		*+
  2880  0012A6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2881  0012AA  0009               	tblrd		*+
  2882  0012AC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2883  0012B0  000A               	tblrd		*-
  2884  0012B2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2885  0012B6  ECB3  F013         	call	___lldiv	;wreg free
  2886  0012BA  C001  F077         	movff	?___lldiv,sprintf@tmpval
  2887  0012BE  C002  F078         	movff	?___lldiv+1,sprintf@tmpval+1
  2888  0012C2  C003  F079         	movff	?___lldiv+2,sprintf@tmpval+2
  2889  0012C6  C004  F07A         	movff	?___lldiv+3,sprintf@tmpval+3
  2890                           
  2891                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2892  0012CA  C077  F001         	movff	sprintf@tmpval,___llmod@dividend
  2893  0012CE  C078  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2894  0012D2  C079  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2895  0012D6  C07A  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2896  0012DA  0E0A               	movlw	10
  2897  0012DC  6E05               	movwf	___llmod@divisor,c
  2898  0012DE  0E00               	movlw	0
  2899  0012E0  6E06               	movwf	___llmod@divisor+1,c
  2900  0012E2  0E00               	movlw	0
  2901  0012E4  6E07               	movwf	___llmod@divisor+2,c
  2902  0012E6  0E00               	movlw	0
  2903  0012E8  6E08               	movwf	___llmod@divisor+3,c
  2904  0012EA  EC65  F014         	call	___llmod	;wreg free
  2905  0012EE  C001  F077         	movff	?___llmod,sprintf@tmpval
  2906  0012F2  C002  F078         	movff	?___llmod+1,sprintf@tmpval+1
  2907  0012F6  C003  F079         	movff	?___llmod+2,sprintf@tmpval+2
  2908  0012FA  C004  F07A         	movff	?___llmod+3,sprintf@tmpval+3
  2909                           
  2910                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2911  0012FE  0100               	movlb	0	; () banked
  2912  001300  5177               	movf	sprintf@tmpval& (0+255),w,b
  2913  001302  0F30               	addlw	48
  2914  001304  C060  FFD9         	movff	sprintf@sp,fsr2l
  2915  001308  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2916  00130C                     L4:
  2917  00130C  6EDF               	movwf	indf2,c
  2918  00130E  D7B2               	goto	l2909
  2919  001310                     l2919:
  2920                           
  2921                           ; BSR set to: 0
  2922  001310  0100               	movlb	0	; () banked
  2923  001312  0786               	decf	sprintf@c& (0+255),f,b
  2924  001314  0100               	movlb	0	; () banked
  2925  001316  2986               	incf	sprintf@c& (0+255),w,b
  2926  001318  B4D8               	btfsc	status,2,c
  2927  00131A  D00E               	goto	l2927
  2928  00131C  D7AF               	goto	l2911
  2929  00131E                     l2921:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2933  00131E  C060  FFD9         	movff	sprintf@sp,fsr2l
  2934  001322  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2935  001326  0E30               	movlw	48
  2936  001328  6EDF               	movwf	indf2,c
  2937                           
  2938                           ; BSR set to: 0
  2939  00132A  0100               	movlb	0	; () banked
  2940  00132C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2941  00132E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;doprnt.c: 1209: exp--;
  2945  001330  0100               	movlb	0	; () banked
  2946  001332  077F               	decf	sprintf@exp& (0+255),f,b
  2947  001334  A0D8               	btfss	status,0,c
  2948  001336  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  2949  001338                     l2927:
  2950                           
  2951                           ; BSR set to: 0
  2952  001338  0100               	movlb	0	; () banked
  2953  00133A  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2954  00133C  D007               	goto	l2929
  2955  00133E  0100               	movlb	0	; () banked
  2956  001340  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2957  001342  E1ED               	bnz	l2921
  2958  001344  0100               	movlb	0	; () banked
  2959  001346  057F               	decf	sprintf@exp& (0+255),w,b
  2960  001348  B0D8               	btfsc	status,0,c
  2961  00134A  D7E9               	goto	l2921
  2962  00134C                     l2929:
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;doprnt.c: 1210: }
  2966                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2967  00134C  0100               	movlb	0	; () banked
  2968  00134E  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2969  001350  D00C               	goto	l187
  2970  001352  0100               	movlb	0	; () banked
  2971  001354  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2972  001356  E105               	bnz	u3190
  2973  001358  0E09               	movlw	9
  2974  00135A  0100               	movlb	0	; () banked
  2975  00135C  5D81               	subwf	sprintf@prec& (0+255),w,b
  2976  00135E  A0D8               	btfss	status,0,c
  2977  001360  D004               	goto	l187
  2978  001362                     u3190:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2982  001362  0E08               	movlw	8
  2983  001364  0100               	movlb	0	; () banked
  2984  001366  6F86               	movwf	sprintf@c& (0+255),b
  2985  001368  D002               	goto	l2933
  2986  00136A                     l187:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 1213: else
  2990                           ;doprnt.c: 1214: c = prec;
  2991  00136A  C081  F086         	movff	sprintf@prec,sprintf@c
  2992  00136E                     l2933:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;doprnt.c: 1215: prec -= c;
  2996  00136E  0100               	movlb	0	; () banked
  2997  001370  5186               	movf	sprintf@c& (0+255),w,b
  2998  001372  0100               	movlb	0	; () banked
  2999  001374  5F81               	subwf	sprintf@prec& (0+255),f,b
  3000  001376  0E00               	movlw	0
  3001  001378  0100               	movlb	0	; () banked
  3002  00137A  BF86               	btfsc	sprintf@c& (0+255),7,b
  3003  00137C  0EFF               	movlw	255
  3004  00137E  0100               	movlb	0	; () banked
  3005  001380  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;doprnt.c: 1219: if(c)
  3009  001382  0100               	movlb	0	; () banked
  3010  001384  5186               	movf	sprintf@c& (0+255),w,b
  3011  001386  0100               	movlb	0	; () banked
  3012  001388  B4D8               	btfsc	status,2,c
  3013  00138A  D009               	goto	l2941
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3017  00138C  C060  FFD9         	movff	sprintf@sp,fsr2l
  3018  001390  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3019  001394  0E2E               	movlw	46
  3020  001396  6EDF               	movwf	indf2,c
  3021                           
  3022                           ; BSR set to: 0
  3023  001398  0100               	movlb	0	; () banked
  3024  00139A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3025  00139C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3026  00139E                     l2941:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3030  00139E  0100               	movlb	0	; () banked
  3031  0013A0  5186               	movf	sprintf@c& (0+255),w,b
  3032  0013A2  ECF2  F00A         	call	_scale
  3033  0013A6  C03F  F06D         	movff	?_scale,_sprintf$905
  3034  0013AA  C040  F06E         	movff	?_scale+1,_sprintf$905+1
  3035  0013AE  C041  F06F         	movff	?_scale+2,_sprintf$905+2
  3036                           
  3037                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3038  0013B2  C083  F033         	movff	sprintf@fval,___ftmul@f2
  3039  0013B6  C084  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  3040  0013BA  C085  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  3041  0013BE  C06D  F030         	movff	_sprintf$905,___ftmul@f1
  3042  0013C2  C06E  F031         	movff	_sprintf$905+1,___ftmul@f1+1
  3043  0013C6  C06F  F032         	movff	_sprintf$905+2,___ftmul@f1+2
  3044  0013CA  EC6B  F011         	call	___ftmul	;wreg free
  3045  0013CE  C030  F015         	movff	?___ftmul,___fttol@f1
  3046  0013D2  C031  F016         	movff	?___ftmul+1,___fttol@f1+1
  3047  0013D6  C032  F017         	movff	?___ftmul+2,___fttol@f1+2
  3048  0013DA  ECE5  F011         	call	___fttol	;wreg free
  3049  0013DE  C015  F07B         	movff	?___fttol,sprintf@val
  3050  0013E2  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  3051  0013E6  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  3052  0013EA  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  3053                           
  3054                           ;doprnt.c: 1228: while(c--) {
  3055  0013EE  D073               	goto	l2955
  3056  0013F0                     l2945:
  3057                           
  3058                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3059  0013F0  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  3060  0013F4  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3061  0013F8  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3062  0013FC  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3063  001400  0100               	movlb	0	; () banked
  3064  001402  5186               	movf	sprintf@c& (0+255),w,b
  3065  001404  0D04               	mullw	4
  3066  001406  0E01               	movlw	low _dpowers
  3067  001408  24F3               	addwf	prodl,w,c
  3068  00140A  6EF6               	movwf	tblptrl,c
  3069  00140C  0E06               	movlw	high _dpowers
  3070  00140E  20F4               	addwfc	prodh,w,c
  3071  001410  6EF7               	movwf	tblptrh,c
  3072  001412                     	if	0	;There are less than 3 active tblptr bytes
  3073  001412                     	endif
  3074  001412  0009               	tblrd		*+
  3075  001414  CFF5 F005          	movff	tablat,___lldiv@divisor
  3076  001418  0009               	tblrd		*+
  3077  00141A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3078  00141E  0009               	tblrd		*+
  3079  001420  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3080  001424  000A               	tblrd		*-
  3081  001426  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3082  00142A  ECB3  F013         	call	___lldiv	;wreg free
  3083  00142E  C001  F077         	movff	?___lldiv,sprintf@tmpval
  3084  001432  C002  F078         	movff	?___lldiv+1,sprintf@tmpval+1
  3085  001436  C003  F079         	movff	?___lldiv+2,sprintf@tmpval+2
  3086  00143A  C004  F07A         	movff	?___lldiv+3,sprintf@tmpval+3
  3087                           
  3088                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3089  00143E  C077  F001         	movff	sprintf@tmpval,___llmod@dividend
  3090  001442  C078  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3091  001446  C079  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3092  00144A  C07A  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3093  00144E  0E0A               	movlw	10
  3094  001450  6E05               	movwf	___llmod@divisor,c
  3095  001452  0E00               	movlw	0
  3096  001454  6E06               	movwf	___llmod@divisor+1,c
  3097  001456  0E00               	movlw	0
  3098  001458  6E07               	movwf	___llmod@divisor+2,c
  3099  00145A  0E00               	movlw	0
  3100  00145C  6E08               	movwf	___llmod@divisor+3,c
  3101  00145E  EC65  F014         	call	___llmod	;wreg free
  3102  001462  C001  F077         	movff	?___llmod,sprintf@tmpval
  3103  001466  C002  F078         	movff	?___llmod+1,sprintf@tmpval+1
  3104  00146A  C003  F079         	movff	?___llmod+2,sprintf@tmpval+2
  3105  00146E  C004  F07A         	movff	?___llmod+3,sprintf@tmpval+3
  3106                           
  3107                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3108  001472  0100               	movlb	0	; () banked
  3109  001474  5177               	movf	sprintf@tmpval& (0+255),w,b
  3110  001476  0F30               	addlw	48
  3111  001478  C060  FFD9         	movff	sprintf@sp,fsr2l
  3112  00147C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3113  001480  6EDF               	movwf	indf2,c
  3114                           
  3115                           ; BSR set to: 0
  3116  001482  0100               	movlb	0	; () banked
  3117  001484  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3118  001486  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 1232: val %= dpowers[c];
  3122  001488  C07B  F001         	movff	sprintf@val,___llmod@dividend
  3123  00148C  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  3124  001490  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  3125  001494  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  3126  001498  0100               	movlb	0	; () banked
  3127  00149A  5186               	movf	sprintf@c& (0+255),w,b
  3128  00149C  0D04               	mullw	4
  3129  00149E  0E01               	movlw	low _dpowers
  3130  0014A0  24F3               	addwf	prodl,w,c
  3131  0014A2  6EF6               	movwf	tblptrl,c
  3132  0014A4  0E06               	movlw	high _dpowers
  3133  0014A6  20F4               	addwfc	prodh,w,c
  3134  0014A8  6EF7               	movwf	tblptrh,c
  3135  0014AA                     	if	0	;There are less than 3 active tblptr bytes
  3136  0014AA                     	endif
  3137  0014AA  0009               	tblrd		*+
  3138  0014AC  CFF5 F005          	movff	tablat,___llmod@divisor
  3139  0014B0  0009               	tblrd		*+
  3140  0014B2  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3141  0014B6  0009               	tblrd		*+
  3142  0014B8  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3143  0014BC  000A               	tblrd		*-
  3144  0014BE  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3145  0014C2  EC65  F014         	call	___llmod	;wreg free
  3146  0014C6  C001  F07B         	movff	?___llmod,sprintf@val
  3147  0014CA  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  3148  0014CE  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  3149  0014D2  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  3150  0014D6                     l2955:
  3151  0014D6  0100               	movlb	0	; () banked
  3152  0014D8  0786               	decf	sprintf@c& (0+255),f,b
  3153  0014DA  0100               	movlb	0	; () banked
  3154  0014DC  2986               	incf	sprintf@c& (0+255),w,b
  3155  0014DE  B4D8               	btfsc	status,2,c
  3156  0014E0  D00E               	goto	l2963
  3157  0014E2  D786               	goto	l2945
  3158  0014E4                     l2957:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3162  0014E4  C060  FFD9         	movff	sprintf@sp,fsr2l
  3163  0014E8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3164  0014EC  0E30               	movlw	48
  3165  0014EE  6EDF               	movwf	indf2,c
  3166                           
  3167                           ; BSR set to: 0
  3168  0014F0  0100               	movlb	0	; () banked
  3169  0014F2  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3170  0014F4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;doprnt.c: 1237: prec--;
  3174  0014F6  0100               	movlb	0	; () banked
  3175  0014F8  0781               	decf	sprintf@prec& (0+255),f,b
  3176  0014FA  A0D8               	btfss	status,0,c
  3177  0014FC  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  3178  0014FE                     l2963:
  3179                           
  3180                           ; BSR set to: 0
  3181  0014FE  0100               	movlb	0	; () banked
  3182  001500  5181               	movf	sprintf@prec& (0+255),w,b
  3183  001502  0100               	movlb	0	; () banked
  3184  001504  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3185  001506  B4D8               	btfsc	status,2,c
  3186  001508  D057               	goto	l2985
  3187  00150A  D7EC               	goto	l2957
  3188  00150C                     l2965:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 1246: }
  3192                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3193  00150C  0100               	movlb	0	; () banked
  3194  00150E  5181               	movf	sprintf@prec& (0+255),w,b
  3195  001510  0100               	movlb	0	; () banked
  3196  001512  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3197  001514  A4D8               	btfss	status,2,c
  3198  001516  D00D               	goto	l2971
  3199                           
  3200                           ; BSR set to: 0
  3201  001518  0100               	movlb	0	; () banked
  3202  00151A  517B               	movf	sprintf@val& (0+255),w,b
  3203  00151C  0100               	movlb	0	; () banked
  3204  00151E  117C               	iorwf	(sprintf@val+1)& (0+255),w,b
  3205  001520  0100               	movlb	0	; () banked
  3206  001522  117D               	iorwf	(sprintf@val+2)& (0+255),w,b
  3207  001524  0100               	movlb	0	; () banked
  3208  001526  117E               	iorwf	(sprintf@val+3)& (0+255),w,b
  3209  001528  A4D8               	btfss	status,2,c
  3210  00152A  D003               	goto	l2971
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;doprnt.c: 1291: prec++;
  3214  00152C  0100               	movlb	0	; () banked
  3215  00152E  4B81               	infsnz	sprintf@prec& (0+255),f,b
  3216  001530  2B82               	incf	(sprintf@prec+1)& (0+255),f,b
  3217  001532                     l2971:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;doprnt.c: 1339: if(c < prec)
  3221  001532  0E80               	movlw	128
  3222  001534  0100               	movlb	0	; () banked
  3223  001536  BF86               	btfsc	sprintf@c& (0+255),7,b
  3224  001538  0E7F               	movlw	127
  3225  00153A  0100               	movlb	0	; () banked
  3226  00153C  6F67               	movwf	??_sprintf& (0+255),b
  3227  00153E  0100               	movlb	0	; () banked
  3228  001540  5181               	movf	sprintf@prec& (0+255),w,b
  3229  001542  0100               	movlb	0	; () banked
  3230  001544  5D86               	subwf	sprintf@c& (0+255),w,b
  3231  001546  0100               	movlb	0	; () banked
  3232  001548  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3233  00154A  0A80               	xorlw	128
  3234  00154C  0100               	movlb	0	; () banked
  3235  00154E  5967               	subwfb	??_sprintf& (0+255),w,b
  3236  001550  B0D8               	btfsc	status,0,c
  3237  001552  D003               	goto	l2975
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;doprnt.c: 1340: c = prec;
  3241  001554  C081  F086         	movff	sprintf@prec,sprintf@c
  3242  001558  D018               	goto	l2979
  3243  00155A                     l2975:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;doprnt.c: 1341: else if(prec < c)
  3247  00155A  0100               	movlb	0	; () banked
  3248  00155C  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3249  00155E  0A80               	xorlw	128
  3250  001560  0100               	movlb	0	; () banked
  3251  001562  6F67               	movwf	??_sprintf& (0+255),b
  3252  001564  0100               	movlb	0	; () banked
  3253  001566  5186               	movf	sprintf@c& (0+255),w,b
  3254  001568  0100               	movlb	0	; () banked
  3255  00156A  5D81               	subwf	sprintf@prec& (0+255),w,b
  3256  00156C  0E80               	movlw	128
  3257  00156E  0100               	movlb	0	; () banked
  3258  001570  BF86               	btfsc	sprintf@c& (0+255),7,b
  3259  001572  0E7F               	movlw	127
  3260  001574  0100               	movlb	0	; () banked
  3261  001576  5967               	subwfb	??_sprintf& (0+255),w,b
  3262  001578  B0D8               	btfsc	status,0,c
  3263  00157A  D007               	goto	l2979
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;doprnt.c: 1342: prec = c;
  3267  00157C  0100               	movlb	0	; () banked
  3268  00157E  5186               	movf	sprintf@c& (0+255),w,b
  3269  001580  0100               	movlb	0	; () banked
  3270  001582  6F81               	movwf	sprintf@prec& (0+255),b
  3271  001584  6B82               	clrf	(sprintf@prec+1)& (0+255),b
  3272  001586  BF81               	btfsc	sprintf@prec& (0+255),7,b
  3273  001588  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  3274  00158A                     l2979:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1422: {
  3278                           ;doprnt.c: 1438: if(flag & 0x03)
  3279  00158A  0E03               	movlw	3
  3280  00158C  0100               	movlb	0	; () banked
  3281  00158E  1575               	andwf	sprintf@flag& (0+255),w,b
  3282  001590  0100               	movlb	0	; () banked
  3283  001592  6F67               	movwf	??_sprintf& (0+255),b
  3284  001594  0E00               	movlw	0
  3285  001596  0100               	movlb	0	; () banked
  3286  001598  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  3287  00159A  0100               	movlb	0	; () banked
  3288  00159C  6F68               	movwf	(??_sprintf+1)& (0+255),b
  3289  00159E  0100               	movlb	0	; () banked
  3290  0015A0  5167               	movf	??_sprintf& (0+255),w,b
  3291  0015A2  0100               	movlb	0	; () banked
  3292  0015A4  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  3293  0015A6  B4D8               	btfsc	status,2,c
  3294  0015A8  D007               	goto	l2985
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3298  0015AA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3299  0015AE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3300  0015B2  0E2D               	movlw	45
  3301  0015B4                     L2:
  3302  0015B4  6EDF               	movwf	indf2,c
  3303  0015B6  D453               	goto	l2823
  3304  0015B8                     l2985:
  3305                           
  3306                           ; BSR set to: 0
  3307  0015B8  C062  FFF6         	movff	sprintf@f,tblptrl
  3308  0015BC  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3309  0015C0  0100               	movlb	0	; () banked
  3310  0015C2  4B62               	infsnz	sprintf@f& (0+255),f,b
  3311  0015C4  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3312  0015C6                     	if	0	;tblptru may be non-zero
  3313  0015C6                     	endif
  3314  0015C6                     	if	0	;tblptru may be non-zero
  3315  0015C6                     	endif
  3316  0015C6  0008               	tblrd		*
  3317  0015C8  CFF5 F086          	movff	tablat,sprintf@c
  3318  0015CC  0100               	movlb	0	; () banked
  3319  0015CE  5186               	movf	sprintf@c& (0+255),w,b
  3320  0015D0  A4D8               	btfss	status,2,c
  3321  0015D2  EF5F  F003         	goto	l2647
  3322  0015D6                     l2987:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;doprnt.c: 1538: *sp = 0;
  3326  0015D6  C060  FFD9         	movff	sprintf@sp,fsr2l
  3327  0015DA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3328  0015DE  0E00               	movlw	0
  3329  0015E0  6EDF               	movwf	indf2,c
  3330  0015E2  0012               	return	
  3331  0015E4                     __end_of_sprintf:
  3332                           	opt stack 0
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           wreg	equ	0xFE8
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _scale *****************
  3348 ;; Defined at:
  3349 ;;		line 425 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  scl             1    wreg     char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  scl             1   68[COMRAM] char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  3   62[COMRAM] char 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         3       0       0       0       0       0       0
  3364 ;;      Locals:         4       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         7       0       0       0       0       0       0
  3367 ;;Total ram usage:        7 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    2
  3370 ;; This function calls:
  3371 ;;		___awdiv
  3372 ;;		___awmod
  3373 ;;		___ftmul
  3374 ;;		___wmul
  3375 ;; This function is called by:
  3376 ;;		_sprintf
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text2
  3381  0015E4                     __ptext2:
  3382                           	opt stack 0
  3383  0015E4                     _scale:
  3384                           	opt stack 27
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;incstack = 0
  3388                           ;scale@scl stored from wreg
  3389  0015E4  6E45               	movwf	scale@scl,c
  3390                           
  3391                           ;doprnt.c: 428: if(scl < 0) {
  3392  0015E6  AE45               	btfss	scale@scl,7,c
  3393  0015E8  D0FB               	goto	l2303
  3394                           
  3395                           ;doprnt.c: 429: scl = -scl;
  3396  0015EA  6C45               	negf	scale@scl,c
  3397                           
  3398                           ;doprnt.c: 430: if(scl>=110)
  3399  0015EC  5045               	movf	scale@scl,w,c
  3400  0015EE  0A80               	xorlw	128
  3401  0015F0  0F12               	addlw	-238
  3402  0015F2  A0D8               	btfss	status,0,c
  3403  0015F4  D091               	goto	l2293
  3404                           
  3405                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3406  0015F6  0E00               	movlw	0
  3407  0015F8  6E12               	movwf	___wmul@multiplicand+1,c
  3408  0015FA  0E03               	movlw	3
  3409  0015FC  6E11               	movwf	___wmul@multiplicand,c
  3410  0015FE  0E00               	movlw	0
  3411  001600  6E0A               	movwf	___awdiv@divisor+1,c
  3412  001602  0E0A               	movlw	10
  3413  001604  6E09               	movwf	___awdiv@divisor,c
  3414  001606  0E00               	movlw	0
  3415  001608  6E04               	movwf	___awmod@divisor+1,c
  3416  00160A  0E64               	movlw	100
  3417  00160C  6E03               	movwf	___awmod@divisor,c
  3418  00160E  5045               	movf	scale@scl,w,c
  3419  001610  6E01               	movwf	___awmod@dividend,c
  3420  001612  6A02               	clrf	___awmod@dividend+1,c
  3421  001614  BE01               	btfsc	___awmod@dividend,7,c
  3422  001616  0602               	decf	___awmod@dividend+1,f,c
  3423  001618  EC2D  F014         	call	___awmod	;wreg free
  3424  00161C  C001  F007         	movff	?___awmod,___awdiv@dividend
  3425  001620  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3426  001624  EC71  F013         	call	___awdiv	;wreg free
  3427  001628  0E09               	movlw	9
  3428  00162A  2407               	addwf	?___awdiv,w,c
  3429  00162C  6E0F               	movwf	___wmul@multiplier,c
  3430  00162E  0E00               	movlw	0
  3431  001630  2008               	addwfc	?___awdiv+1,w,c
  3432  001632  6E10               	movwf	___wmul@multiplier+1,c
  3433  001634  EC0A  F015         	call	___wmul	;wreg free
  3434  001638  0E50               	movlw	low __npowers_
  3435  00163A  240F               	addwf	?___wmul,w,c
  3436  00163C  6EF6               	movwf	tblptrl,c
  3437  00163E  0E06               	movlw	high __npowers_
  3438  001640  2010               	addwfc	?___wmul+1,w,c
  3439  001642  6EF7               	movwf	tblptrh,c
  3440  001644                     	if	0	;There are less than 3 active tblptr bytes
  3441  001644                     	endif
  3442  001644  0009               	tblrd		*+
  3443  001646  CFF5 F033          	movff	tablat,___ftmul@f2
  3444  00164A  0009               	tblrd		*+
  3445  00164C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3446  001650  000A               	tblrd		*-
  3447  001652  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3448  001656  0E00               	movlw	0
  3449  001658  6E0A               	movwf	___awdiv@divisor+1,c
  3450  00165A  0E64               	movlw	100
  3451  00165C  6E09               	movwf	___awdiv@divisor,c
  3452  00165E  5045               	movf	scale@scl,w,c
  3453  001660  6E07               	movwf	___awdiv@dividend,c
  3454  001662  6A08               	clrf	___awdiv@dividend+1,c
  3455  001664  BE07               	btfsc	___awdiv@dividend,7,c
  3456  001666  0608               	decf	___awdiv@dividend+1,f,c
  3457  001668  EC71  F013         	call	___awdiv	;wreg free
  3458  00166C  0E12               	movlw	18
  3459  00166E  2407               	addwf	?___awdiv,w,c
  3460  001670  6E0F               	movwf	___wmul@multiplier,c
  3461  001672  0E00               	movlw	0
  3462  001674  2008               	addwfc	?___awdiv+1,w,c
  3463  001676  6E10               	movwf	___wmul@multiplier+1,c
  3464  001678  0E00               	movlw	0
  3465  00167A  6E12               	movwf	___wmul@multiplicand+1,c
  3466  00167C  0E03               	movlw	3
  3467  00167E  6E11               	movwf	___wmul@multiplicand,c
  3468  001680  EC0A  F015         	call	___wmul	;wreg free
  3469  001684  0E50               	movlw	low __npowers_
  3470  001686  240F               	addwf	?___wmul,w,c
  3471  001688  6EF6               	movwf	tblptrl,c
  3472  00168A  0E06               	movlw	high __npowers_
  3473  00168C  2010               	addwfc	?___wmul+1,w,c
  3474  00168E  6EF7               	movwf	tblptrh,c
  3475  001690                     	if	0	;There are less than 3 active tblptr bytes
  3476  001690                     	endif
  3477  001690  0009               	tblrd		*+
  3478  001692  CFF5 F030          	movff	tablat,___ftmul@f1
  3479  001696  0009               	tblrd		*+
  3480  001698  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3481  00169C  000A               	tblrd		*-
  3482  00169E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3483  0016A2  EC6B  F011         	call	___ftmul	;wreg free
  3484  0016A6  C030  F042         	movff	?___ftmul,_scale$904
  3485  0016AA  C031  F043         	movff	?___ftmul+1,_scale$904+1
  3486  0016AE  C032  F044         	movff	?___ftmul+2,_scale$904+2
  3487                           
  3488                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3489  0016B2  C042  F030         	movff	_scale$904,___ftmul@f1
  3490  0016B6  C043  F031         	movff	_scale$904+1,___ftmul@f1+1
  3491  0016BA  C044  F032         	movff	_scale$904+2,___ftmul@f1+2
  3492  0016BE  0E00               	movlw	0
  3493  0016C0  6E12               	movwf	___wmul@multiplicand+1,c
  3494  0016C2  0E03               	movlw	3
  3495  0016C4  6E11               	movwf	___wmul@multiplicand,c
  3496  0016C6  0E00               	movlw	0
  3497  0016C8  6E04               	movwf	___awmod@divisor+1,c
  3498  0016CA  0E0A               	movlw	10
  3499  0016CC  6E03               	movwf	___awmod@divisor,c
  3500  0016CE  5045               	movf	scale@scl,w,c
  3501  0016D0  6E01               	movwf	___awmod@dividend,c
  3502  0016D2  6A02               	clrf	___awmod@dividend+1,c
  3503  0016D4  BE01               	btfsc	___awmod@dividend,7,c
  3504  0016D6  0602               	decf	___awmod@dividend+1,f,c
  3505  0016D8  EC2D  F014         	call	___awmod	;wreg free
  3506  0016DC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3507  0016E0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3508  0016E4  EC0A  F015         	call	___wmul	;wreg free
  3509  0016E8  0E50               	movlw	low __npowers_
  3510  0016EA  240F               	addwf	?___wmul,w,c
  3511  0016EC  6EF6               	movwf	tblptrl,c
  3512  0016EE  0E06               	movlw	high __npowers_
  3513  0016F0  2010               	addwfc	?___wmul+1,w,c
  3514  0016F2  6EF7               	movwf	tblptrh,c
  3515  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  3516  0016F4                     	endif
  3517  0016F4  0009               	tblrd		*+
  3518  0016F6  CFF5 F033          	movff	tablat,___ftmul@f2
  3519  0016FA  0009               	tblrd		*+
  3520  0016FC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3521  001700  000A               	tblrd		*-
  3522  001702  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3523  001706  EC6B  F011         	call	___ftmul	;wreg free
  3524  00170A  C030  F03F         	movff	?___ftmul,?_scale
  3525  00170E  C031  F040         	movff	?___ftmul+1,?_scale+1
  3526  001712  C032  F041         	movff	?___ftmul+2,?_scale+2
  3527  001716  0012               	return	
  3528  001718                     l2293:
  3529                           
  3530                           ;doprnt.c: 432: else if(scl > 10)
  3531  001718  5045               	movf	scale@scl,w,c
  3532  00171A  0A80               	xorlw	128
  3533  00171C  0F75               	addlw	-139
  3534  00171E  A0D8               	btfss	status,0,c
  3535  001720  D04D               	goto	l2299
  3536                           
  3537                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3538  001722  0E00               	movlw	0
  3539  001724  6E0A               	movwf	___awdiv@divisor+1,c
  3540  001726  0E0A               	movlw	10
  3541  001728  6E09               	movwf	___awdiv@divisor,c
  3542  00172A  5045               	movf	scale@scl,w,c
  3543  00172C  6E07               	movwf	___awdiv@dividend,c
  3544  00172E  6A08               	clrf	___awdiv@dividend+1,c
  3545  001730  BE07               	btfsc	___awdiv@dividend,7,c
  3546  001732  0608               	decf	___awdiv@dividend+1,f,c
  3547  001734  EC71  F013         	call	___awdiv	;wreg free
  3548  001738  0E09               	movlw	9
  3549  00173A  2407               	addwf	?___awdiv,w,c
  3550  00173C  6E0F               	movwf	___wmul@multiplier,c
  3551  00173E  0E00               	movlw	0
  3552  001740  2008               	addwfc	?___awdiv+1,w,c
  3553  001742  6E10               	movwf	___wmul@multiplier+1,c
  3554  001744  0E00               	movlw	0
  3555  001746  6E12               	movwf	___wmul@multiplicand+1,c
  3556  001748  0E03               	movlw	3
  3557  00174A  6E11               	movwf	___wmul@multiplicand,c
  3558  00174C  EC0A  F015         	call	___wmul	;wreg free
  3559  001750  0E50               	movlw	low __npowers_
  3560  001752  240F               	addwf	?___wmul,w,c
  3561  001754  6EF6               	movwf	tblptrl,c
  3562  001756  0E06               	movlw	high __npowers_
  3563  001758  2010               	addwfc	?___wmul+1,w,c
  3564  00175A  6EF7               	movwf	tblptrh,c
  3565  00175C                     	if	0	;There are less than 3 active tblptr bytes
  3566  00175C                     	endif
  3567  00175C  0009               	tblrd		*+
  3568  00175E  CFF5 F030          	movff	tablat,___ftmul@f1
  3569  001762  0009               	tblrd		*+
  3570  001764  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3571  001768  000A               	tblrd		*-
  3572  00176A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3573  00176E  0E00               	movlw	0
  3574  001770  6E12               	movwf	___wmul@multiplicand+1,c
  3575  001772  0E03               	movlw	3
  3576  001774  6E11               	movwf	___wmul@multiplicand,c
  3577  001776  0E00               	movlw	0
  3578  001778  6E04               	movwf	___awmod@divisor+1,c
  3579  00177A  0E0A               	movlw	10
  3580  00177C  6E03               	movwf	___awmod@divisor,c
  3581  00177E  5045               	movf	scale@scl,w,c
  3582  001780  6E01               	movwf	___awmod@dividend,c
  3583  001782  6A02               	clrf	___awmod@dividend+1,c
  3584  001784  BE01               	btfsc	___awmod@dividend,7,c
  3585  001786  0602               	decf	___awmod@dividend+1,f,c
  3586  001788  EC2D  F014         	call	___awmod	;wreg free
  3587  00178C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3588  001790  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3589  001794  EC0A  F015         	call	___wmul	;wreg free
  3590  001798  0E50               	movlw	low __npowers_
  3591  00179A  240F               	addwf	?___wmul,w,c
  3592  00179C  6EF6               	movwf	tblptrl,c
  3593  00179E  0E06               	movlw	high __npowers_
  3594  0017A0  2010               	addwfc	?___wmul+1,w,c
  3595  0017A2  6EF7               	movwf	tblptrh,c
  3596  0017A4                     	if	0	;There are less than 3 active tblptr bytes
  3597  0017A4                     	endif
  3598  0017A4  0009               	tblrd		*+
  3599  0017A6  CFF5 F033          	movff	tablat,___ftmul@f2
  3600  0017AA  0009               	tblrd		*+
  3601  0017AC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3602  0017B0  000A               	tblrd		*-
  3603  0017B2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3604  0017B6  EC6B  F011         	call	___ftmul	;wreg free
  3605  0017BA  D7A7               	goto	L5
  3606  0017BC                     l2299:
  3607                           
  3608                           ;doprnt.c: 434: return _npowers_[scl];
  3609  0017BC  5045               	movf	scale@scl,w,c
  3610  0017BE  0D03               	mullw	3
  3611  0017C0  0E50               	movlw	low __npowers_
  3612  0017C2  24F3               	addwf	prodl,w,c
  3613  0017C4  6EF6               	movwf	tblptrl,c
  3614  0017C6  0E06               	movlw	high __npowers_
  3615  0017C8  20F4               	addwfc	prodh,w,c
  3616  0017CA  6EF7               	movwf	tblptrh,c
  3617  0017CC                     	if	0	;There are less than 3 active tblptr bytes
  3618  0017CC                     	endif
  3619  0017CC  0009               	tblrd		*+
  3620  0017CE  CFF5 F03F          	movff	tablat,?_scale
  3621  0017D2  0009               	tblrd		*+
  3622  0017D4  CFF5 F040          	movff	tablat,?_scale+1
  3623  0017D8  000A               	tblrd		*-
  3624  0017DA  CFF5 F041          	movff	tablat,?_scale+2
  3625  0017DE  0012               	return	
  3626  0017E0                     l2303:
  3627                           
  3628                           ;doprnt.c: 435: }
  3629                           ;doprnt.c: 436: if(scl>=110)
  3630  0017E0  5045               	movf	scale@scl,w,c
  3631  0017E2  0A80               	xorlw	128
  3632  0017E4  0F12               	addlw	-238
  3633  0017E6  A0D8               	btfss	status,0,c
  3634  0017E8  D091               	goto	l2311
  3635                           
  3636                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3637  0017EA  0E00               	movlw	0
  3638  0017EC  6E12               	movwf	___wmul@multiplicand+1,c
  3639  0017EE  0E03               	movlw	3
  3640  0017F0  6E11               	movwf	___wmul@multiplicand,c
  3641  0017F2  0E00               	movlw	0
  3642  0017F4  6E0A               	movwf	___awdiv@divisor+1,c
  3643  0017F6  0E0A               	movlw	10
  3644  0017F8  6E09               	movwf	___awdiv@divisor,c
  3645  0017FA  0E00               	movlw	0
  3646  0017FC  6E04               	movwf	___awmod@divisor+1,c
  3647  0017FE  0E64               	movlw	100
  3648  001800  6E03               	movwf	___awmod@divisor,c
  3649  001802  5045               	movf	scale@scl,w,c
  3650  001804  6E01               	movwf	___awmod@dividend,c
  3651  001806  6A02               	clrf	___awmod@dividend+1,c
  3652  001808  BE01               	btfsc	___awmod@dividend,7,c
  3653  00180A  0602               	decf	___awmod@dividend+1,f,c
  3654  00180C  EC2D  F014         	call	___awmod	;wreg free
  3655  001810  C001  F007         	movff	?___awmod,___awdiv@dividend
  3656  001814  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3657  001818  EC71  F013         	call	___awdiv	;wreg free
  3658  00181C  0E09               	movlw	9
  3659  00181E  2407               	addwf	?___awdiv,w,c
  3660  001820  6E0F               	movwf	___wmul@multiplier,c
  3661  001822  0E00               	movlw	0
  3662  001824  2008               	addwfc	?___awdiv+1,w,c
  3663  001826  6E10               	movwf	___wmul@multiplier+1,c
  3664  001828  EC0A  F015         	call	___wmul	;wreg free
  3665  00182C  0E29               	movlw	low __powers_
  3666  00182E  240F               	addwf	?___wmul,w,c
  3667  001830  6EF6               	movwf	tblptrl,c
  3668  001832  0E06               	movlw	high __powers_
  3669  001834  2010               	addwfc	?___wmul+1,w,c
  3670  001836  6EF7               	movwf	tblptrh,c
  3671  001838                     	if	0	;There are less than 3 active tblptr bytes
  3672  001838                     	endif
  3673  001838  0009               	tblrd		*+
  3674  00183A  CFF5 F033          	movff	tablat,___ftmul@f2
  3675  00183E  0009               	tblrd		*+
  3676  001840  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3677  001844  000A               	tblrd		*-
  3678  001846  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3679  00184A  0E00               	movlw	0
  3680  00184C  6E0A               	movwf	___awdiv@divisor+1,c
  3681  00184E  0E64               	movlw	100
  3682  001850  6E09               	movwf	___awdiv@divisor,c
  3683  001852  5045               	movf	scale@scl,w,c
  3684  001854  6E07               	movwf	___awdiv@dividend,c
  3685  001856  6A08               	clrf	___awdiv@dividend+1,c
  3686  001858  BE07               	btfsc	___awdiv@dividend,7,c
  3687  00185A  0608               	decf	___awdiv@dividend+1,f,c
  3688  00185C  EC71  F013         	call	___awdiv	;wreg free
  3689  001860  0E12               	movlw	18
  3690  001862  2407               	addwf	?___awdiv,w,c
  3691  001864  6E0F               	movwf	___wmul@multiplier,c
  3692  001866  0E00               	movlw	0
  3693  001868  2008               	addwfc	?___awdiv+1,w,c
  3694  00186A  6E10               	movwf	___wmul@multiplier+1,c
  3695  00186C  0E00               	movlw	0
  3696  00186E  6E12               	movwf	___wmul@multiplicand+1,c
  3697  001870  0E03               	movlw	3
  3698  001872  6E11               	movwf	___wmul@multiplicand,c
  3699  001874  EC0A  F015         	call	___wmul	;wreg free
  3700  001878  0E29               	movlw	low __powers_
  3701  00187A  240F               	addwf	?___wmul,w,c
  3702  00187C  6EF6               	movwf	tblptrl,c
  3703  00187E  0E06               	movlw	high __powers_
  3704  001880  2010               	addwfc	?___wmul+1,w,c
  3705  001882  6EF7               	movwf	tblptrh,c
  3706  001884                     	if	0	;There are less than 3 active tblptr bytes
  3707  001884                     	endif
  3708  001884  0009               	tblrd		*+
  3709  001886  CFF5 F030          	movff	tablat,___ftmul@f1
  3710  00188A  0009               	tblrd		*+
  3711  00188C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3712  001890  000A               	tblrd		*-
  3713  001892  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3714  001896  EC6B  F011         	call	___ftmul	;wreg free
  3715  00189A  C030  F042         	movff	?___ftmul,_scale$904
  3716  00189E  C031  F043         	movff	?___ftmul+1,_scale$904+1
  3717  0018A2  C032  F044         	movff	?___ftmul+2,_scale$904+2
  3718                           
  3719                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3720  0018A6  C042  F030         	movff	_scale$904,___ftmul@f1
  3721  0018AA  C043  F031         	movff	_scale$904+1,___ftmul@f1+1
  3722  0018AE  C044  F032         	movff	_scale$904+2,___ftmul@f1+2
  3723  0018B2  0E00               	movlw	0
  3724  0018B4  6E12               	movwf	___wmul@multiplicand+1,c
  3725  0018B6  0E03               	movlw	3
  3726  0018B8  6E11               	movwf	___wmul@multiplicand,c
  3727  0018BA  0E00               	movlw	0
  3728  0018BC  6E04               	movwf	___awmod@divisor+1,c
  3729  0018BE  0E0A               	movlw	10
  3730  0018C0  6E03               	movwf	___awmod@divisor,c
  3731  0018C2  5045               	movf	scale@scl,w,c
  3732  0018C4  6E01               	movwf	___awmod@dividend,c
  3733  0018C6  6A02               	clrf	___awmod@dividend+1,c
  3734  0018C8  BE01               	btfsc	___awmod@dividend,7,c
  3735  0018CA  0602               	decf	___awmod@dividend+1,f,c
  3736  0018CC  EC2D  F014         	call	___awmod	;wreg free
  3737  0018D0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3738  0018D4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3739  0018D8  EC0A  F015         	call	___wmul	;wreg free
  3740  0018DC  0E29               	movlw	low __powers_
  3741  0018DE  240F               	addwf	?___wmul,w,c
  3742  0018E0  6EF6               	movwf	tblptrl,c
  3743  0018E2  0E06               	movlw	high __powers_
  3744  0018E4  2010               	addwfc	?___wmul+1,w,c
  3745  0018E6  6EF7               	movwf	tblptrh,c
  3746  0018E8                     	if	0	;There are less than 3 active tblptr bytes
  3747  0018E8                     	endif
  3748  0018E8  0009               	tblrd		*+
  3749  0018EA  CFF5 F033          	movff	tablat,___ftmul@f2
  3750  0018EE  0009               	tblrd		*+
  3751  0018F0  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3752  0018F4  000A               	tblrd		*-
  3753  0018F6  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3754  0018FA  EC6B  F011         	call	___ftmul	;wreg free
  3755  0018FE  C030  F03F         	movff	?___ftmul,?_scale
  3756  001902  C031  F040         	movff	?___ftmul+1,?_scale+1
  3757  001906  C032  F041         	movff	?___ftmul+2,?_scale+2
  3758  00190A  0012               	return	
  3759  00190C                     l2311:
  3760                           
  3761                           ;doprnt.c: 438: else if(scl > 10)
  3762  00190C  5045               	movf	scale@scl,w,c
  3763  00190E  0A80               	xorlw	128
  3764  001910  0F75               	addlw	-139
  3765  001912  A0D8               	btfss	status,0,c
  3766  001914  D04D               	goto	l2317
  3767                           
  3768                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3769  001916  0E00               	movlw	0
  3770  001918  6E0A               	movwf	___awdiv@divisor+1,c
  3771  00191A  0E0A               	movlw	10
  3772  00191C  6E09               	movwf	___awdiv@divisor,c
  3773  00191E  5045               	movf	scale@scl,w,c
  3774  001920  6E07               	movwf	___awdiv@dividend,c
  3775  001922  6A08               	clrf	___awdiv@dividend+1,c
  3776  001924  BE07               	btfsc	___awdiv@dividend,7,c
  3777  001926  0608               	decf	___awdiv@dividend+1,f,c
  3778  001928  EC71  F013         	call	___awdiv	;wreg free
  3779  00192C  0E09               	movlw	9
  3780  00192E  2407               	addwf	?___awdiv,w,c
  3781  001930  6E0F               	movwf	___wmul@multiplier,c
  3782  001932  0E00               	movlw	0
  3783  001934  2008               	addwfc	?___awdiv+1,w,c
  3784  001936  6E10               	movwf	___wmul@multiplier+1,c
  3785  001938  0E00               	movlw	0
  3786  00193A  6E12               	movwf	___wmul@multiplicand+1,c
  3787  00193C  0E03               	movlw	3
  3788  00193E  6E11               	movwf	___wmul@multiplicand,c
  3789  001940  EC0A  F015         	call	___wmul	;wreg free
  3790  001944  0E29               	movlw	low __powers_
  3791  001946  240F               	addwf	?___wmul,w,c
  3792  001948  6EF6               	movwf	tblptrl,c
  3793  00194A  0E06               	movlw	high __powers_
  3794  00194C  2010               	addwfc	?___wmul+1,w,c
  3795  00194E  6EF7               	movwf	tblptrh,c
  3796  001950                     	if	0	;There are less than 3 active tblptr bytes
  3797  001950                     	endif
  3798  001950  0009               	tblrd		*+
  3799  001952  CFF5 F030          	movff	tablat,___ftmul@f1
  3800  001956  0009               	tblrd		*+
  3801  001958  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3802  00195C  000A               	tblrd		*-
  3803  00195E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3804  001962  0E00               	movlw	0
  3805  001964  6E12               	movwf	___wmul@multiplicand+1,c
  3806  001966  0E03               	movlw	3
  3807  001968  6E11               	movwf	___wmul@multiplicand,c
  3808  00196A  0E00               	movlw	0
  3809  00196C  6E04               	movwf	___awmod@divisor+1,c
  3810  00196E  0E0A               	movlw	10
  3811  001970  6E03               	movwf	___awmod@divisor,c
  3812  001972  5045               	movf	scale@scl,w,c
  3813  001974  6E01               	movwf	___awmod@dividend,c
  3814  001976  6A02               	clrf	___awmod@dividend+1,c
  3815  001978  BE01               	btfsc	___awmod@dividend,7,c
  3816  00197A  0602               	decf	___awmod@dividend+1,f,c
  3817  00197C  EC2D  F014         	call	___awmod	;wreg free
  3818  001980  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3819  001984  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3820  001988  EC0A  F015         	call	___wmul	;wreg free
  3821  00198C  0E29               	movlw	low __powers_
  3822  00198E  240F               	addwf	?___wmul,w,c
  3823  001990  6EF6               	movwf	tblptrl,c
  3824  001992  0E06               	movlw	high __powers_
  3825  001994  2010               	addwfc	?___wmul+1,w,c
  3826  001996  6EF7               	movwf	tblptrh,c
  3827  001998                     	if	0	;There are less than 3 active tblptr bytes
  3828  001998                     	endif
  3829  001998  0009               	tblrd		*+
  3830  00199A  CFF5 F033          	movff	tablat,___ftmul@f2
  3831  00199E  0009               	tblrd		*+
  3832  0019A0  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3833  0019A4  000A               	tblrd		*-
  3834  0019A6  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3835  0019AA  EC6B  F011         	call	___ftmul	;wreg free
  3836  0019AE  D7A7               	goto	L6
  3837  0019B0                     l2317:
  3838                           
  3839                           ;doprnt.c: 440: return _powers_[scl];
  3840  0019B0  5045               	movf	scale@scl,w,c
  3841  0019B2  0D03               	mullw	3
  3842  0019B4  0E29               	movlw	low __powers_
  3843  0019B6  24F3               	addwf	prodl,w,c
  3844  0019B8  6EF6               	movwf	tblptrl,c
  3845  0019BA  0E06               	movlw	high __powers_
  3846  0019BC  20F4               	addwfc	prodh,w,c
  3847  0019BE  6EF7               	movwf	tblptrh,c
  3848  0019C0                     	if	0	;There are less than 3 active tblptr bytes
  3849  0019C0                     	endif
  3850  0019C0  0009               	tblrd		*+
  3851  0019C2  CFF5 F03F          	movff	tablat,?_scale
  3852  0019C6  0009               	tblrd		*+
  3853  0019C8  CFF5 F040          	movff	tablat,?_scale+1
  3854  0019CC  000A               	tblrd		*-
  3855  0019CE  CFF5 F041          	movff	tablat,?_scale+2
  3856  0019D2  0012               	return	
  3857  0019D4                     __end_of_scale:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           wreg	equ	0xFE8
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _isdigit *****************
  3874 ;; Defined at:
  3875 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  c               1    wreg     unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  c               1    2[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3889 ;;      Params:         0       0       0       0       0       0       0
  3890 ;;      Locals:         2       0       0       0       0       0       0
  3891 ;;      Temps:          1       0       0       0       0       0       0
  3892 ;;      Totals:         3       0       0       0       0       0       0
  3893 ;;Total ram usage:        3 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_sprintf
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text3
  3903  002AC6                     __ptext3:
  3904                           	opt stack 0
  3905  002AC6                     _isdigit:
  3906                           	opt stack 29
  3907                           
  3908                           ;incstack = 0
  3909                           ;isdigit@c stored from wreg
  3910  002AC6  6E03               	movwf	isdigit@c,c
  3911  002AC8  0E00               	movlw	0
  3912  002ACA  6E02               	movwf	_isdigit$575,c
  3913  002ACC  0E3A               	movlw	58
  3914  002ACE  6003               	cpfslt	isdigit@c,c
  3915  002AD0  D005               	goto	l2329
  3916  002AD2  0E2F               	movlw	47
  3917  002AD4  6403               	cpfsgt	isdigit@c,c
  3918  002AD6  D002               	goto	l2329
  3919  002AD8  0E01               	movlw	1
  3920  002ADA  6E02               	movwf	_isdigit$575,c
  3921  002ADC                     l2329:
  3922  002ADC  C002  F001         	movff	_isdigit$575,??_isdigit
  3923  002AE0  3001               	rrcf	??_isdigit,w,c
  3924  002AE2  0012               	return	
  3925  002AE4                     __end_of_isdigit:
  3926                           	opt stack 0
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           wreg	equ	0xFE8
  3934                           indf2	equ	0xFDF
  3935                           postinc2	equ	0xFDE
  3936                           postdec2	equ	0xFDD
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _fround *****************
  3942 ;; Defined at:
  3943 ;;		line 409 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  prec            1    wreg     unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  prec            1   71[COMRAM] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  3   62[COMRAM] unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3957 ;;      Params:         3       0       0       0       0       0       0
  3958 ;;      Locals:         7       0       0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0
  3960 ;;      Totals:        10       0       0       0       0       0       0
  3961 ;;Total ram usage:       10 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    2
  3964 ;; This function calls:
  3965 ;;		___awdiv
  3966 ;;		___awmod
  3967 ;;		___ftmul
  3968 ;;		___wmul
  3969 ;; This function is called by:
  3970 ;;		_sprintf
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text4
  3975  001C8A                     __ptext4:
  3976                           	opt stack 0
  3977  001C8A                     _fround:
  3978                           	opt stack 27
  3979                           
  3980                           ;incstack = 0
  3981                           ;fround@prec stored from wreg
  3982  001C8A  6E48               	movwf	fround@prec,c
  3983                           
  3984                           ;doprnt.c: 413: if(prec>=110)
  3985  001C8C  0E6D               	movlw	109
  3986  001C8E  6448               	cpfsgt	fround@prec,c
  3987  001C90  D09F               	goto	l2271
  3988                           
  3989                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3990  001C92  0E00               	movlw	0
  3991  001C94  6E12               	movwf	___wmul@multiplicand+1,c
  3992  001C96  0E03               	movlw	3
  3993  001C98  6E11               	movwf	___wmul@multiplicand,c
  3994  001C9A  0E00               	movlw	0
  3995  001C9C  6E0A               	movwf	___awdiv@divisor+1,c
  3996  001C9E  0E0A               	movlw	10
  3997  001CA0  6E09               	movwf	___awdiv@divisor,c
  3998  001CA2  0E00               	movlw	0
  3999  001CA4  6E04               	movwf	___awmod@divisor+1,c
  4000  001CA6  0E64               	movlw	100
  4001  001CA8  6E03               	movwf	___awmod@divisor,c
  4002  001CAA  C048  F001         	movff	fround@prec,___awmod@dividend
  4003  001CAE  6A02               	clrf	___awmod@dividend+1,c
  4004  001CB0  EC2D  F014         	call	___awmod	;wreg free
  4005  001CB4  C001  F007         	movff	?___awmod,___awdiv@dividend
  4006  001CB8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4007  001CBC  EC71  F013         	call	___awdiv	;wreg free
  4008  001CC0  0E09               	movlw	9
  4009  001CC2  2407               	addwf	?___awdiv,w,c
  4010  001CC4  6E0F               	movwf	___wmul@multiplier,c
  4011  001CC6  0E00               	movlw	0
  4012  001CC8  2008               	addwfc	?___awdiv+1,w,c
  4013  001CCA  6E10               	movwf	___wmul@multiplier+1,c
  4014  001CCC  EC0A  F015         	call	___wmul	;wreg free
  4015  001CD0  0E50               	movlw	low __npowers_
  4016  001CD2  240F               	addwf	?___wmul,w,c
  4017  001CD4  6EF6               	movwf	tblptrl,c
  4018  001CD6  0E06               	movlw	high __npowers_
  4019  001CD8  2010               	addwfc	?___wmul+1,w,c
  4020  001CDA  6EF7               	movwf	tblptrh,c
  4021  001CDC                     	if	0	;There are less than 3 active tblptr bytes
  4022  001CDC                     	endif
  4023  001CDC  0009               	tblrd		*+
  4024  001CDE  CFF5 F033          	movff	tablat,___ftmul@f2
  4025  001CE2  0009               	tblrd		*+
  4026  001CE4  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4027  001CE8  000A               	tblrd		*-
  4028  001CEA  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4029  001CEE  0E00               	movlw	0
  4030  001CF0  6E0A               	movwf	___awdiv@divisor+1,c
  4031  001CF2  0E64               	movlw	100
  4032  001CF4  6E09               	movwf	___awdiv@divisor,c
  4033  001CF6  C048  F007         	movff	fround@prec,___awdiv@dividend
  4034  001CFA  6A08               	clrf	___awdiv@dividend+1,c
  4035  001CFC  EC71  F013         	call	___awdiv	;wreg free
  4036  001D00  0E12               	movlw	18
  4037  001D02  2407               	addwf	?___awdiv,w,c
  4038  001D04  6E0F               	movwf	___wmul@multiplier,c
  4039  001D06  0E00               	movlw	0
  4040  001D08  2008               	addwfc	?___awdiv+1,w,c
  4041  001D0A  6E10               	movwf	___wmul@multiplier+1,c
  4042  001D0C  0E00               	movlw	0
  4043  001D0E  6E12               	movwf	___wmul@multiplicand+1,c
  4044  001D10  0E03               	movlw	3
  4045  001D12  6E11               	movwf	___wmul@multiplicand,c
  4046  001D14  EC0A  F015         	call	___wmul	;wreg free
  4047  001D18  0E50               	movlw	low __npowers_
  4048  001D1A  240F               	addwf	?___wmul,w,c
  4049  001D1C  6EF6               	movwf	tblptrl,c
  4050  001D1E  0E06               	movlw	high __npowers_
  4051  001D20  2010               	addwfc	?___wmul+1,w,c
  4052  001D22  6EF7               	movwf	tblptrh,c
  4053  001D24                     	if	0	;There are less than 3 active tblptr bytes
  4054  001D24                     	endif
  4055  001D24  0009               	tblrd		*+
  4056  001D26  CFF5 F030          	movff	tablat,___ftmul@f1
  4057  001D2A  0009               	tblrd		*+
  4058  001D2C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4059  001D30  000A               	tblrd		*-
  4060  001D32  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4061  001D36  EC6B  F011         	call	___ftmul	;wreg free
  4062  001D3A  C030  F045         	movff	?___ftmul,_fround$902
  4063  001D3E  C031  F046         	movff	?___ftmul+1,_fround$902+1
  4064  001D42  C032  F047         	movff	?___ftmul+2,_fround$902+2
  4065                           
  4066                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4067  001D46  0E00               	movlw	0
  4068  001D48  6E12               	movwf	___wmul@multiplicand+1,c
  4069  001D4A  0E03               	movlw	3
  4070  001D4C  6E11               	movwf	___wmul@multiplicand,c
  4071  001D4E  0E00               	movlw	0
  4072  001D50  6E04               	movwf	___awmod@divisor+1,c
  4073  001D52  0E0A               	movlw	10
  4074  001D54  6E03               	movwf	___awmod@divisor,c
  4075  001D56  C048  F001         	movff	fround@prec,___awmod@dividend
  4076  001D5A  6A02               	clrf	___awmod@dividend+1,c
  4077  001D5C  EC2D  F014         	call	___awmod	;wreg free
  4078  001D60  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4079  001D64  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4080  001D68  EC0A  F015         	call	___wmul	;wreg free
  4081  001D6C  0E50               	movlw	low __npowers_
  4082  001D6E  240F               	addwf	?___wmul,w,c
  4083  001D70  6EF6               	movwf	tblptrl,c
  4084  001D72  0E06               	movlw	high __npowers_
  4085  001D74  2010               	addwfc	?___wmul+1,w,c
  4086  001D76  6EF7               	movwf	tblptrh,c
  4087  001D78                     	if	0	;There are less than 3 active tblptr bytes
  4088  001D78                     	endif
  4089  001D78  0009               	tblrd		*+
  4090  001D7A  CFF5 F033          	movff	tablat,___ftmul@f2
  4091  001D7E  0009               	tblrd		*+
  4092  001D80  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4093  001D84  000A               	tblrd		*-
  4094  001D86  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4095  001D8A  C045  F030         	movff	_fround$902,___ftmul@f1
  4096  001D8E  C046  F031         	movff	_fround$902+1,___ftmul@f1+1
  4097  001D92  C047  F032         	movff	_fround$902+2,___ftmul@f1+2
  4098  001D96  EC6B  F011         	call	___ftmul	;wreg free
  4099  001D9A  C030  F042         	movff	?___ftmul,_fround$903
  4100  001D9E  C031  F043         	movff	?___ftmul+1,_fround$903+1
  4101  001DA2  C032  F044         	movff	?___ftmul+2,_fround$903+2
  4102                           
  4103                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4104  001DA6  C042  F030         	movff	_fround$903,___ftmul@f1
  4105  001DAA  C043  F031         	movff	_fround$903+1,___ftmul@f1+1
  4106  001DAE  C044  F032         	movff	_fround$903+2,___ftmul@f1+2
  4107  001DB2  0E00               	movlw	0
  4108  001DB4  6E33               	movwf	___ftmul@f2,c
  4109  001DB6  0E00               	movlw	0
  4110  001DB8  6E34               	movwf	___ftmul@f2+1,c
  4111  001DBA  0E3F               	movlw	63
  4112  001DBC  6E35               	movwf	___ftmul@f2+2,c
  4113  001DBE  EC6B  F011         	call	___ftmul	;wreg free
  4114  001DC2  C030  F03F         	movff	?___ftmul,?_fround
  4115  001DC6  C031  F040         	movff	?___ftmul+1,?_fround+1
  4116  001DCA  C032  F041         	movff	?___ftmul+2,?_fround+2
  4117  001DCE  0012               	return	
  4118  001DD0                     l2271:
  4119                           
  4120                           ;doprnt.c: 415: else if(prec > 10)
  4121  001DD0  0E0A               	movlw	10
  4122  001DD2  6448               	cpfsgt	fround@prec,c
  4123  001DD4  D05D               	goto	l2279
  4124                           
  4125                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4126  001DD6  0E00               	movlw	0
  4127  001DD8  6E12               	movwf	___wmul@multiplicand+1,c
  4128  001DDA  0E03               	movlw	3
  4129  001DDC  6E11               	movwf	___wmul@multiplicand,c
  4130  001DDE  0E00               	movlw	0
  4131  001DE0  6E04               	movwf	___awmod@divisor+1,c
  4132  001DE2  0E0A               	movlw	10
  4133  001DE4  6E03               	movwf	___awmod@divisor,c
  4134  001DE6  C048  F001         	movff	fround@prec,___awmod@dividend
  4135  001DEA  6A02               	clrf	___awmod@dividend+1,c
  4136  001DEC  EC2D  F014         	call	___awmod	;wreg free
  4137  001DF0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4138  001DF4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4139  001DF8  EC0A  F015         	call	___wmul	;wreg free
  4140  001DFC  0E50               	movlw	low __npowers_
  4141  001DFE  240F               	addwf	?___wmul,w,c
  4142  001E00  6EF6               	movwf	tblptrl,c
  4143  001E02  0E06               	movlw	high __npowers_
  4144  001E04  2010               	addwfc	?___wmul+1,w,c
  4145  001E06  6EF7               	movwf	tblptrh,c
  4146  001E08                     	if	0	;There are less than 3 active tblptr bytes
  4147  001E08                     	endif
  4148  001E08  0009               	tblrd		*+
  4149  001E0A  CFF5 F033          	movff	tablat,___ftmul@f2
  4150  001E0E  0009               	tblrd		*+
  4151  001E10  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4152  001E14  000A               	tblrd		*-
  4153  001E16  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4154  001E1A  0E00               	movlw	0
  4155  001E1C  6E0A               	movwf	___awdiv@divisor+1,c
  4156  001E1E  0E0A               	movlw	10
  4157  001E20  6E09               	movwf	___awdiv@divisor,c
  4158  001E22  C048  F007         	movff	fround@prec,___awdiv@dividend
  4159  001E26  6A08               	clrf	___awdiv@dividend+1,c
  4160  001E28  EC71  F013         	call	___awdiv	;wreg free
  4161  001E2C  0E09               	movlw	9
  4162  001E2E  2407               	addwf	?___awdiv,w,c
  4163  001E30  6E0F               	movwf	___wmul@multiplier,c
  4164  001E32  0E00               	movlw	0
  4165  001E34  2008               	addwfc	?___awdiv+1,w,c
  4166  001E36  6E10               	movwf	___wmul@multiplier+1,c
  4167  001E38  0E00               	movlw	0
  4168  001E3A  6E12               	movwf	___wmul@multiplicand+1,c
  4169  001E3C  0E03               	movlw	3
  4170  001E3E  6E11               	movwf	___wmul@multiplicand,c
  4171  001E40  EC0A  F015         	call	___wmul	;wreg free
  4172  001E44  0E50               	movlw	low __npowers_
  4173  001E46  240F               	addwf	?___wmul,w,c
  4174  001E48  6EF6               	movwf	tblptrl,c
  4175  001E4A  0E06               	movlw	high __npowers_
  4176  001E4C  2010               	addwfc	?___wmul+1,w,c
  4177  001E4E  6EF7               	movwf	tblptrh,c
  4178  001E50                     	if	0	;There are less than 3 active tblptr bytes
  4179  001E50                     	endif
  4180  001E50  0009               	tblrd		*+
  4181  001E52  CFF5 F030          	movff	tablat,___ftmul@f1
  4182  001E56  0009               	tblrd		*+
  4183  001E58  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4184  001E5C  000A               	tblrd		*-
  4185  001E5E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4186  001E62  EC6B  F011         	call	___ftmul	;wreg free
  4187  001E66  C030  F045         	movff	?___ftmul,_fround$902
  4188  001E6A  C031  F046         	movff	?___ftmul+1,_fround$902+1
  4189  001E6E  C032  F047         	movff	?___ftmul+2,_fround$902+2
  4190                           
  4191                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4192  001E72  C045  F030         	movff	_fround$902,___ftmul@f1
  4193  001E76  C046  F031         	movff	_fround$902+1,___ftmul@f1+1
  4194  001E7A  C047  F032         	movff	_fround$902+2,___ftmul@f1+2
  4195  001E7E  0E00               	movlw	0
  4196  001E80  6E33               	movwf	___ftmul@f2,c
  4197  001E82  0E00               	movlw	0
  4198  001E84  6E34               	movwf	___ftmul@f2+1,c
  4199  001E86  0E3F               	movlw	63
  4200  001E88  6E35               	movwf	___ftmul@f2+2,c
  4201  001E8A  EC6B  F011         	call	___ftmul	;wreg free
  4202  001E8E  D799               	goto	L7
  4203  001E90                     l2279:
  4204                           
  4205                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4206  001E90  5048               	movf	fround@prec,w,c
  4207  001E92  0D03               	mullw	3
  4208  001E94  0E50               	movlw	low __npowers_
  4209  001E96  24F3               	addwf	prodl,w,c
  4210  001E98  6EF6               	movwf	tblptrl,c
  4211  001E9A  0E06               	movlw	high __npowers_
  4212  001E9C  20F4               	addwfc	prodh,w,c
  4213  001E9E  6EF7               	movwf	tblptrh,c
  4214  001EA0                     	if	0	;There are less than 3 active tblptr bytes
  4215  001EA0                     	endif
  4216  001EA0  0009               	tblrd		*+
  4217  001EA2  CFF5 F030          	movff	tablat,___ftmul@f1
  4218  001EA6  0009               	tblrd		*+
  4219  001EA8  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4220  001EAC  000A               	tblrd		*-
  4221  001EAE  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4222  001EB2  0E00               	movlw	0
  4223  001EB4  6E33               	movwf	___ftmul@f2,c
  4224  001EB6  0E00               	movlw	0
  4225  001EB8  6E34               	movwf	___ftmul@f2+1,c
  4226  001EBA  0E3F               	movlw	63
  4227  001EBC  6E35               	movwf	___ftmul@f2+2,c
  4228  001EBE  EC6B  F011         	call	___ftmul	;wreg free
  4229  001EC2  C030  F03F         	movff	?___ftmul,?_fround
  4230  001EC6  C031  F040         	movff	?___ftmul+1,?_fround+1
  4231  001ECA  C032  F041         	movff	?___ftmul+2,?_fround+2
  4232  001ECE  0012               	return	
  4233  001ED0                     __end_of_fround:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           wreg	equ	0xFE8
  4242                           indf2	equ	0xFDF
  4243                           postinc2	equ	0xFDE
  4244                           postdec2	equ	0xFDD
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function ___wmul *****************
  4250 ;; Defined at:
  4251 ;;		line 15 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  multiplier      2   14[COMRAM] unsigned int 
  4254 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  product         2   18[COMRAM] unsigned int 
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  2   14[COMRAM] unsigned int 
  4259 ;; Registers used:
  4260 ;;		wreg, status,2, status,0, prodl, prodh
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4266 ;;      Params:         4       0       0       0       0       0       0
  4267 ;;      Locals:         2       0       0       0       0       0       0
  4268 ;;      Temps:          0       0       0       0       0       0       0
  4269 ;;      Totals:         6       0       0       0       0       0       0
  4270 ;;Total ram usage:        6 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; This function calls:
  4273 ;;		Nothing
  4274 ;; This function is called by:
  4275 ;;		_fround
  4276 ;;		_scale
  4277 ;;		_sprintf
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text5
  4282  002A14                     __ptext5:
  4283                           	opt stack 0
  4284  002A14                     ___wmul:
  4285                           	opt stack 28
  4286                           
  4287                           ;incstack = 0
  4288  002A14  500F               	movf	___wmul@multiplier,w,c
  4289  002A16  0211               	mulwf	___wmul@multiplicand,c
  4290  002A18  CFF3 F013          	movff	prodl,___wmul@product
  4291  002A1C  CFF4 F014          	movff	prodh,___wmul@product+1
  4292  002A20  500F               	movf	___wmul@multiplier,w,c
  4293  002A22  0212               	mulwf	___wmul@multiplicand+1,c
  4294  002A24  50F3               	movf	prodl,w,c
  4295  002A26  2614               	addwf	___wmul@product+1,f,c
  4296  002A28  5010               	movf	___wmul@multiplier+1,w,c
  4297  002A2A  0211               	mulwf	___wmul@multiplicand,c
  4298  002A2C  50F3               	movf	prodl,w,c
  4299  002A2E  2614               	addwf	___wmul@product+1,f,c
  4300  002A30  C013  F00F         	movff	___wmul@product,?___wmul
  4301  002A34  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4302  002A38  0012               	return	
  4303  002A3A                     __end_of___wmul:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           wreg	equ	0xFE8
  4312                           indf2	equ	0xFDF
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function ___ftmul *****************
  4320 ;; Defined at:
  4321 ;;		line 62 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  f1              3   47[COMRAM] float 
  4324 ;;  f2              3   50[COMRAM] float 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  4327 ;;  sign            1   61[COMRAM] unsigned char 
  4328 ;;  cntr            1   60[COMRAM] unsigned char 
  4329 ;;  exp             1   56[COMRAM] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  3   47[COMRAM] float 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4339 ;;      Params:         6       0       0       0       0       0       0
  4340 ;;      Locals:         6       0       0       0       0       0       0
  4341 ;;      Temps:          3       0       0       0       0       0       0
  4342 ;;      Totals:        15       0       0       0       0       0       0
  4343 ;;Total ram usage:       15 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    1
  4346 ;; This function calls:
  4347 ;;		___ftpack
  4348 ;; This function is called by:
  4349 ;;		_main
  4350 ;;		_fround
  4351 ;;		_scale
  4352 ;;		_sprintf
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text6
  4357  0022D6                     __ptext6:
  4358                           	opt stack 0
  4359  0022D6                     ___ftmul:
  4360                           	opt stack 27
  4361                           
  4362                           ;incstack = 0
  4363  0022D6  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  4364  0022DA  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4365  0022DC  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4366  0022DE  3431               	rlcf	___ftmul@f1+1,w,c
  4367  0022E0  3636               	rlcf	??___ftmul& (0+255),f,c
  4368  0022E2  E301               	bnc	u1961
  4369  0022E4  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4370  0022E6                     u1961:
  4371  0022E6  5036               	movf	??___ftmul,w,c
  4372  0022E8  6E39               	movwf	___ftmul@exp,c
  4373  0022EA  5039               	movf	___ftmul@exp,w,c
  4374  0022EC  A4D8               	btfss	status,2,c
  4375  0022EE  D007               	goto	l2097
  4376  0022F0  0E00               	movlw	0
  4377  0022F2  6E30               	movwf	?___ftmul,c
  4378  0022F4  0E00               	movlw	0
  4379  0022F6  6E31               	movwf	?___ftmul+1,c
  4380  0022F8  0E00               	movlw	0
  4381  0022FA  6E32               	movwf	?___ftmul+2,c
  4382  0022FC  0012               	return	
  4383  0022FE                     l2097:
  4384  0022FE  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  4385  002302  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4386  002304  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4387  002306  3434               	rlcf	___ftmul@f2+1,w,c
  4388  002308  3636               	rlcf	??___ftmul& (0+255),f,c
  4389  00230A  E301               	bnc	u1981
  4390  00230C  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4391  00230E                     u1981:
  4392  00230E  5036               	movf	??___ftmul,w,c
  4393  002310  6E3E               	movwf	___ftmul@sign,c
  4394  002312  503E               	movf	___ftmul@sign,w,c
  4395  002314  A4D8               	btfss	status,2,c
  4396  002316  D007               	goto	l2103
  4397  002318  0E00               	movlw	0
  4398  00231A  6E30               	movwf	?___ftmul,c
  4399  00231C  0E00               	movlw	0
  4400  00231E  6E31               	movwf	?___ftmul+1,c
  4401  002320  0E00               	movlw	0
  4402  002322  6E32               	movwf	?___ftmul+2,c
  4403  002324  0012               	return	
  4404  002326                     l2103:
  4405  002326  503E               	movf	___ftmul@sign,w,c
  4406  002328  0F7B               	addlw	123
  4407  00232A  2639               	addwf	___ftmul@exp,f,c
  4408  00232C  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  4409  002330  5035               	movf	___ftmul@f2+2,w,c
  4410  002332  1A3E               	xorwf	___ftmul@sign,f,c
  4411  002334  0E80               	movlw	128
  4412  002336  163E               	andwf	___ftmul@sign,f,c
  4413  002338  8E31               	bsf	___ftmul@f1+1,7,c
  4414  00233A  8E34               	bsf	___ftmul@f2+1,7,c
  4415  00233C  0EFF               	movlw	255
  4416  00233E  1633               	andwf	___ftmul@f2,f,c
  4417  002340  0EFF               	movlw	255
  4418  002342  1634               	andwf	___ftmul@f2+1,f,c
  4419  002344  0E00               	movlw	0
  4420  002346  1635               	andwf	___ftmul@f2+2,f,c
  4421  002348  0E00               	movlw	0
  4422  00234A  6E3A               	movwf	___ftmul@f3_as_product,c
  4423  00234C  0E00               	movlw	0
  4424  00234E  6E3B               	movwf	___ftmul@f3_as_product+1,c
  4425  002350  0E00               	movlw	0
  4426  002352  6E3C               	movwf	___ftmul@f3_as_product+2,c
  4427  002354  0E07               	movlw	7
  4428  002356  6E3D               	movwf	___ftmul@cntr,c
  4429  002358                     l2117:
  4430  002358  A030               	btfss	___ftmul@f1,0,c
  4431  00235A  D006               	goto	l2121
  4432  00235C  5033               	movf	___ftmul@f2,w,c
  4433  00235E  263A               	addwf	___ftmul@f3_as_product,f,c
  4434  002360  5034               	movf	___ftmul@f2+1,w,c
  4435  002362  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4436  002364  5035               	movf	___ftmul@f2+2,w,c
  4437  002366  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4438  002368                     l2121:
  4439  002368  90D8               	bcf	status,0,c
  4440  00236A  3232               	rrcf	___ftmul@f1+2,f,c
  4441  00236C  3231               	rrcf	___ftmul@f1+1,f,c
  4442  00236E  3230               	rrcf	___ftmul@f1,f,c
  4443  002370  90D8               	bcf	status,0,c
  4444  002372  3633               	rlcf	___ftmul@f2,f,c
  4445  002374  3634               	rlcf	___ftmul@f2+1,f,c
  4446  002376  3635               	rlcf	___ftmul@f2+2,f,c
  4447  002378  2E3D               	decfsz	___ftmul@cntr,f,c
  4448  00237A  D7EE               	goto	l2117
  4449  00237C  0E09               	movlw	9
  4450  00237E  6E3D               	movwf	___ftmul@cntr,c
  4451  002380                     l2127:
  4452  002380  A030               	btfss	___ftmul@f1,0,c
  4453  002382  D006               	goto	l2131
  4454  002384  5033               	movf	___ftmul@f2,w,c
  4455  002386  263A               	addwf	___ftmul@f3_as_product,f,c
  4456  002388  5034               	movf	___ftmul@f2+1,w,c
  4457  00238A  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4458  00238C  5035               	movf	___ftmul@f2+2,w,c
  4459  00238E  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4460  002390                     l2131:
  4461  002390  90D8               	bcf	status,0,c
  4462  002392  3232               	rrcf	___ftmul@f1+2,f,c
  4463  002394  3231               	rrcf	___ftmul@f1+1,f,c
  4464  002396  3230               	rrcf	___ftmul@f1,f,c
  4465  002398  90D8               	bcf	status,0,c
  4466  00239A  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  4467  00239C  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  4468  00239E  323A               	rrcf	___ftmul@f3_as_product,f,c
  4469  0023A0  2E3D               	decfsz	___ftmul@cntr,f,c
  4470  0023A2  D7EE               	goto	l2127
  4471  0023A4  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4472  0023A8  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4473  0023AC  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4474  0023B0  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  4475  0023B4  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  4476  0023B8  ECD2  F012         	call	___ftpack	;wreg free
  4477  0023BC  C001  F030         	movff	?___ftpack,?___ftmul
  4478  0023C0  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  4479  0023C4  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  4480  0023C8  0012               	return	
  4481  0023CA                     __end_of___ftmul:
  4482                           	opt stack 0
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           prodh	equ	0xFF4
  4488                           prodl	equ	0xFF3
  4489                           wreg	equ	0xFE8
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function ___awmod *****************
  4498 ;; Defined at:
  4499 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\awmod.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  dividend        2    0[COMRAM] int 
  4502 ;;  divisor         2    2[COMRAM] int 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  sign            1    5[COMRAM] unsigned char 
  4505 ;;  counter         1    4[COMRAM] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  2    0[COMRAM] int 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4515 ;;      Params:         4       0       0       0       0       0       0
  4516 ;;      Locals:         2       0       0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0
  4518 ;;      Totals:         6       0       0       0       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_fround
  4525 ;;		_scale
  4526 ;;		_sprintf
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text7
  4531  00285A                     __ptext7:
  4532                           	opt stack 0
  4533  00285A                     ___awmod:
  4534                           	opt stack 28
  4535                           
  4536                           ;incstack = 0
  4537  00285A  0E00               	movlw	0
  4538  00285C  6E06               	movwf	___awmod@sign,c
  4539  00285E  AE02               	btfss	___awmod@dividend+1,7,c
  4540  002860  D006               	goto	l2191
  4541  002862  6C01               	negf	___awmod@dividend,c
  4542  002864  1E02               	comf	___awmod@dividend+1,f,c
  4543  002866  B0D8               	btfsc	status,0,c
  4544  002868  2A02               	incf	___awmod@dividend+1,f,c
  4545  00286A  0E01               	movlw	1
  4546  00286C  6E06               	movwf	___awmod@sign,c
  4547  00286E                     l2191:
  4548  00286E  AE04               	btfss	___awmod@divisor+1,7,c
  4549  002870  D004               	goto	l2195
  4550  002872  6C03               	negf	___awmod@divisor,c
  4551  002874  1E04               	comf	___awmod@divisor+1,f,c
  4552  002876  B0D8               	btfsc	status,0,c
  4553  002878  2A04               	incf	___awmod@divisor+1,f,c
  4554  00287A                     l2195:
  4555  00287A  5003               	movf	___awmod@divisor,w,c
  4556  00287C  1004               	iorwf	___awmod@divisor+1,w,c
  4557  00287E  B4D8               	btfsc	status,2,c
  4558  002880  D018               	goto	l2211
  4559  002882  0E01               	movlw	1
  4560  002884  6E05               	movwf	___awmod@counter,c
  4561  002886  D004               	goto	l2201
  4562  002888                     l2199:
  4563  002888  90D8               	bcf	status,0,c
  4564  00288A  3603               	rlcf	___awmod@divisor,f,c
  4565  00288C  3604               	rlcf	___awmod@divisor+1,f,c
  4566  00288E  2A05               	incf	___awmod@counter,f,c
  4567  002890                     l2201:
  4568  002890  AE04               	btfss	___awmod@divisor+1,7,c
  4569  002892  D7FA               	goto	l2199
  4570  002894                     l2203:
  4571  002894  5003               	movf	___awmod@divisor,w,c
  4572  002896  5C01               	subwf	___awmod@dividend,w,c
  4573  002898  5004               	movf	___awmod@divisor+1,w,c
  4574  00289A  5802               	subwfb	___awmod@dividend+1,w,c
  4575  00289C  A0D8               	btfss	status,0,c
  4576  00289E  D004               	goto	l2207
  4577  0028A0  5003               	movf	___awmod@divisor,w,c
  4578  0028A2  5E01               	subwf	___awmod@dividend,f,c
  4579  0028A4  5004               	movf	___awmod@divisor+1,w,c
  4580  0028A6  5A02               	subwfb	___awmod@dividend+1,f,c
  4581  0028A8                     l2207:
  4582  0028A8  90D8               	bcf	status,0,c
  4583  0028AA  3204               	rrcf	___awmod@divisor+1,f,c
  4584  0028AC  3203               	rrcf	___awmod@divisor,f,c
  4585  0028AE  2E05               	decfsz	___awmod@counter,f,c
  4586  0028B0  D7F1               	goto	l2203
  4587  0028B2                     l2211:
  4588  0028B2  5006               	movf	___awmod@sign,w,c
  4589  0028B4  B4D8               	btfsc	status,2,c
  4590  0028B6  D004               	goto	l2215
  4591  0028B8  6C01               	negf	___awmod@dividend,c
  4592  0028BA  1E02               	comf	___awmod@dividend+1,f,c
  4593  0028BC  B0D8               	btfsc	status,0,c
  4594  0028BE  2A02               	incf	___awmod@dividend+1,f,c
  4595  0028C0                     l2215:
  4596  0028C0  C001  F001         	movff	___awmod@dividend,?___awmod
  4597  0028C4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4598  0028C8  0012               	return	
  4599  0028CA                     __end_of___awmod:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           prodh	equ	0xFF4
  4606                           prodl	equ	0xFF3
  4607                           wreg	equ	0xFE8
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function ___awdiv *****************
  4616 ;; Defined at:
  4617 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\awdiv.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  dividend        2    6[COMRAM] int 
  4620 ;;  divisor         2    8[COMRAM] int 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  quotient        2   12[COMRAM] int 
  4623 ;;  sign            1   11[COMRAM] unsigned char 
  4624 ;;  counter         1   10[COMRAM] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  2    6[COMRAM] int 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2, status,0
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4634 ;;      Params:         4       0       0       0       0       0       0
  4635 ;;      Locals:         4       0       0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0
  4637 ;;      Totals:         8       0       0       0       0       0       0
  4638 ;;Total ram usage:        8 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_fround
  4644 ;;		_scale
  4645 ;;		_sprintf
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           	psect	text8
  4650  0026E2                     __ptext8:
  4651                           	opt stack 0
  4652  0026E2                     ___awdiv:
  4653                           	opt stack 28
  4654                           
  4655                           ;incstack = 0
  4656  0026E2  0E00               	movlw	0
  4657  0026E4  6E0C               	movwf	___awdiv@sign,c
  4658  0026E6  AE0A               	btfss	___awdiv@divisor+1,7,c
  4659  0026E8  D006               	goto	l2147
  4660  0026EA  6C09               	negf	___awdiv@divisor,c
  4661  0026EC  1E0A               	comf	___awdiv@divisor+1,f,c
  4662  0026EE  B0D8               	btfsc	status,0,c
  4663  0026F0  2A0A               	incf	___awdiv@divisor+1,f,c
  4664  0026F2  0E01               	movlw	1
  4665  0026F4  6E0C               	movwf	___awdiv@sign,c
  4666  0026F6                     l2147:
  4667  0026F6  AE08               	btfss	___awdiv@dividend+1,7,c
  4668  0026F8  D006               	goto	l2153
  4669  0026FA  6C07               	negf	___awdiv@dividend,c
  4670  0026FC  1E08               	comf	___awdiv@dividend+1,f,c
  4671  0026FE  B0D8               	btfsc	status,0,c
  4672  002700  2A08               	incf	___awdiv@dividend+1,f,c
  4673  002702  0E01               	movlw	1
  4674  002704  1A0C               	xorwf	___awdiv@sign,f,c
  4675  002706                     l2153:
  4676  002706  0E00               	movlw	0
  4677  002708  6E0E               	movwf	___awdiv@quotient+1,c
  4678  00270A  0E00               	movlw	0
  4679  00270C  6E0D               	movwf	___awdiv@quotient,c
  4680  00270E  5009               	movf	___awdiv@divisor,w,c
  4681  002710  100A               	iorwf	___awdiv@divisor+1,w,c
  4682  002712  B4D8               	btfsc	status,2,c
  4683  002714  D01C               	goto	l2175
  4684  002716  0E01               	movlw	1
  4685  002718  6E0B               	movwf	___awdiv@counter,c
  4686  00271A  D004               	goto	l2161
  4687  00271C                     l2159:
  4688  00271C  90D8               	bcf	status,0,c
  4689  00271E  3609               	rlcf	___awdiv@divisor,f,c
  4690  002720  360A               	rlcf	___awdiv@divisor+1,f,c
  4691  002722  2A0B               	incf	___awdiv@counter,f,c
  4692  002724                     l2161:
  4693  002724  AE0A               	btfss	___awdiv@divisor+1,7,c
  4694  002726  D7FA               	goto	l2159
  4695  002728                     l2163:
  4696  002728  90D8               	bcf	status,0,c
  4697  00272A  360D               	rlcf	___awdiv@quotient,f,c
  4698  00272C  360E               	rlcf	___awdiv@quotient+1,f,c
  4699  00272E  5009               	movf	___awdiv@divisor,w,c
  4700  002730  5C07               	subwf	___awdiv@dividend,w,c
  4701  002732  500A               	movf	___awdiv@divisor+1,w,c
  4702  002734  5808               	subwfb	___awdiv@dividend+1,w,c
  4703  002736  A0D8               	btfss	status,0,c
  4704  002738  D005               	goto	l2171
  4705  00273A  5009               	movf	___awdiv@divisor,w,c
  4706  00273C  5E07               	subwf	___awdiv@dividend,f,c
  4707  00273E  500A               	movf	___awdiv@divisor+1,w,c
  4708  002740  5A08               	subwfb	___awdiv@dividend+1,f,c
  4709  002742  800D               	bsf	___awdiv@quotient,0,c
  4710  002744                     l2171:
  4711  002744  90D8               	bcf	status,0,c
  4712  002746  320A               	rrcf	___awdiv@divisor+1,f,c
  4713  002748  3209               	rrcf	___awdiv@divisor,f,c
  4714  00274A  2E0B               	decfsz	___awdiv@counter,f,c
  4715  00274C  D7ED               	goto	l2163
  4716  00274E                     l2175:
  4717  00274E  500C               	movf	___awdiv@sign,w,c
  4718  002750  B4D8               	btfsc	status,2,c
  4719  002752  D004               	goto	l2179
  4720  002754  6C0D               	negf	___awdiv@quotient,c
  4721  002756  1E0E               	comf	___awdiv@quotient+1,f,c
  4722  002758  B0D8               	btfsc	status,0,c
  4723  00275A  2A0E               	incf	___awdiv@quotient+1,f,c
  4724  00275C                     l2179:
  4725  00275C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4726  002760  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4727  002764  0012               	return	
  4728  002766                     __end_of___awdiv:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           wreg	equ	0xFE8
  4737                           indf2	equ	0xFDF
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function __tdiv_to_l_ *****************
  4745 ;; Defined at:
  4746 ;;		line 60 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  f1              3    0[COMRAM] float 
  4749 ;;  f2              3    3[COMRAM] float 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  quot            4    9[COMRAM] unsigned long 
  4752 ;;  exp1            1   14[COMRAM] unsigned char 
  4753 ;;  cntr            1   13[COMRAM] unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  4    0[COMRAM] unsigned long 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4763 ;;      Params:         6       0       0       0       0       0       0
  4764 ;;      Locals:         6       0       0       0       0       0       0
  4765 ;;      Temps:          3       0       0       0       0       0       0
  4766 ;;      Totals:        15       0       0       0       0       0       0
  4767 ;;Total ram usage:       15 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_sprintf
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text9
  4777  00207C                     __ptext9:
  4778                           	opt stack 0
  4779  00207C                     __tdiv_to_l_:
  4780                           	opt stack 29
  4781                           
  4782                           ;incstack = 0
  4783  00207C  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4784  002080  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4785  002082  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4786  002084  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4787  002086  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4788  002088  E301               	bnc	u2251
  4789  00208A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4790  00208C                     u2251:
  4791  00208C  5007               	movf	??__tdiv_to_l_,w,c
  4792  00208E  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4793  002090  500F               	movf	__tdiv_to_l_@exp1,w,c
  4794  002092  A4D8               	btfss	status,2,c
  4795  002094  D009               	goto	l2339
  4796  002096  0E00               	movlw	0
  4797  002098  6E01               	movwf	?__tdiv_to_l_,c
  4798  00209A  0E00               	movlw	0
  4799  00209C  6E02               	movwf	?__tdiv_to_l_+1,c
  4800  00209E  0E00               	movlw	0
  4801  0020A0  6E03               	movwf	?__tdiv_to_l_+2,c
  4802  0020A2  0E00               	movlw	0
  4803  0020A4  6E04               	movwf	?__tdiv_to_l_+3,c
  4804  0020A6  0012               	return	
  4805  0020A8                     l2339:
  4806  0020A8  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4807  0020AC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4808  0020AE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4809  0020B0  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4810  0020B2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4811  0020B4  E301               	bnc	u2271
  4812  0020B6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4813  0020B8                     u2271:
  4814  0020B8  5007               	movf	??__tdiv_to_l_,w,c
  4815  0020BA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4816  0020BC  500E               	movf	__tdiv_to_l_@cntr,w,c
  4817  0020BE  A4D8               	btfss	status,2,c
  4818  0020C0  D009               	goto	l2345
  4819  0020C2  0E00               	movlw	0
  4820  0020C4  6E01               	movwf	?__tdiv_to_l_,c
  4821  0020C6  0E00               	movlw	0
  4822  0020C8  6E02               	movwf	?__tdiv_to_l_+1,c
  4823  0020CA  0E00               	movlw	0
  4824  0020CC  6E03               	movwf	?__tdiv_to_l_+2,c
  4825  0020CE  0E00               	movlw	0
  4826  0020D0  6E04               	movwf	?__tdiv_to_l_+3,c
  4827  0020D2  0012               	return	
  4828  0020D4                     l2345:
  4829  0020D4  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4830  0020D6  0EFF               	movlw	255
  4831  0020D8  1601               	andwf	__tdiv_to_l_@f1,f,c
  4832  0020DA  0EFF               	movlw	255
  4833  0020DC  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4834  0020DE  0E00               	movlw	0
  4835  0020E0  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4836  0020E2  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4837  0020E4  0EFF               	movlw	255
  4838  0020E6  1604               	andwf	__tdiv_to_l_@f2,f,c
  4839  0020E8  0EFF               	movlw	255
  4840  0020EA  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4841  0020EC  0E00               	movlw	0
  4842  0020EE  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4843  0020F0  0E00               	movlw	0
  4844  0020F2  6E0A               	movwf	__tdiv_to_l_@quot,c
  4845  0020F4  0E00               	movlw	0
  4846  0020F6  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4847  0020F8  0E00               	movlw	0
  4848  0020FA  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4849  0020FC  0E00               	movlw	0
  4850  0020FE  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4851  002100  0E7F               	movlw	127
  4852  002102  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4853  002104  500E               	movf	__tdiv_to_l_@cntr,w,c
  4854  002106  0F98               	addlw	152
  4855  002108  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4856  00210A  0E18               	movlw	24
  4857  00210C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4858  00210E                     l509:
  4859  00210E  90D8               	bcf	status,0,c
  4860  002110  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4861  002112  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4862  002114  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4863  002116  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4864  002118  5004               	movf	__tdiv_to_l_@f2,w,c
  4865  00211A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4866  00211C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4867  00211E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4868  002120  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4869  002122  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4870  002124  A0D8               	btfss	status,0,c
  4871  002126  D007               	goto	l510
  4872  002128  5004               	movf	__tdiv_to_l_@f2,w,c
  4873  00212A  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4874  00212C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4875  00212E  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4876  002130  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4877  002132  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4878  002134  800A               	bsf	__tdiv_to_l_@quot,0,c
  4879  002136                     l510:
  4880  002136  90D8               	bcf	status,0,c
  4881  002138  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4882  00213A  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4883  00213C  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4884  00213E  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4885  002140  D7E6               	goto	l509
  4886  002142  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4887  002144  D016               	goto	l2379
  4888  002146  500F               	movf	__tdiv_to_l_@exp1,w,c
  4889  002148  0A80               	xorlw	128
  4890  00214A  0F97               	addlw	151
  4891  00214C  B0D8               	btfsc	status,0,c
  4892  00214E  D009               	goto	l2375
  4893  002150  0E00               	movlw	0
  4894  002152  6E01               	movwf	?__tdiv_to_l_,c
  4895  002154  0E00               	movlw	0
  4896  002156  6E02               	movwf	?__tdiv_to_l_+1,c
  4897  002158  0E00               	movlw	0
  4898  00215A  6E03               	movwf	?__tdiv_to_l_+2,c
  4899  00215C  0E00               	movlw	0
  4900  00215E  6E04               	movwf	?__tdiv_to_l_+3,c
  4901  002160  0012               	return	
  4902  002162                     l2375:
  4903  002162  90D8               	bcf	status,0,c
  4904  002164  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4905  002166  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4906  002168  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4907  00216A  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4908  00216C  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4909  00216E  D7F9               	goto	l2375
  4910  002170  D015               	goto	l516
  4911  002172                     l2379:
  4912  002172  0E17               	movlw	23
  4913  002174  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4914  002176  D00F               	goto	l2387
  4915  002178  0E00               	movlw	0
  4916  00217A  6E01               	movwf	?__tdiv_to_l_,c
  4917  00217C  0E00               	movlw	0
  4918  00217E  6E02               	movwf	?__tdiv_to_l_+1,c
  4919  002180  0E00               	movlw	0
  4920  002182  6E03               	movwf	?__tdiv_to_l_+2,c
  4921  002184  0E00               	movlw	0
  4922  002186  6E04               	movwf	?__tdiv_to_l_+3,c
  4923  002188  0012               	return	
  4924  00218A                     l2385:
  4925  00218A  90D8               	bcf	status,0,c
  4926  00218C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4927  00218E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4928  002190  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4929  002192  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4930  002194  060F               	decf	__tdiv_to_l_@exp1,f,c
  4931  002196                     l2387:
  4932  002196  500F               	movf	__tdiv_to_l_@exp1,w,c
  4933  002198  A4D8               	btfss	status,2,c
  4934  00219A  D7F7               	goto	l2385
  4935  00219C                     l516:
  4936  00219C  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4937  0021A0  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4938  0021A4  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4939  0021A8  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4940  0021AC  0012               	return		;funcret
  4941  0021AE                     __end_of__tdiv_to_l_:
  4942                           	opt stack 0
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           wreg	equ	0xFE8
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function __div_to_l_ *****************
  4958 ;; Defined at:
  4959 ;;		line 60 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  f1              3    0[COMRAM] unsigned long 
  4962 ;;  f2              3    3[COMRAM] unsigned long 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  quot            4    6[COMRAM] unsigned long 
  4965 ;;  exp1            1   11[COMRAM] unsigned char 
  4966 ;;  cntr            1   10[COMRAM] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  4    0[COMRAM] unsigned long 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4976 ;;      Params:         6       0       0       0       0       0       0
  4977 ;;      Locals:         6       0       0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0
  4979 ;;      Totals:        12       0       0       0       0       0       0
  4980 ;;Total ram usage:       12 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_sprintf
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text10
  4990  0021AE                     __ptext10:
  4991                           	opt stack 0
  4992  0021AE                     __div_to_l_:
  4993                           	opt stack 29
  4994                           
  4995                           ;incstack = 0
  4996  0021AE  3403               	rlcf	__div_to_l_@f1+2,w,c
  4997  0021B0  3404               	rlcf	__div_to_l_@f1+3,w,c
  4998  0021B2  6E0C               	movwf	__div_to_l_@exp1,c
  4999  0021B4  500C               	movf	__div_to_l_@exp1,w,c
  5000  0021B6  A4D8               	btfss	status,2,c
  5001  0021B8  D009               	goto	l2395
  5002  0021BA  0E00               	movlw	0
  5003  0021BC  6E01               	movwf	?__div_to_l_,c
  5004  0021BE  0E00               	movlw	0
  5005  0021C0  6E02               	movwf	?__div_to_l_+1,c
  5006  0021C2  0E00               	movlw	0
  5007  0021C4  6E03               	movwf	?__div_to_l_+2,c
  5008  0021C6  0E00               	movlw	0
  5009  0021C8  6E04               	movwf	?__div_to_l_+3,c
  5010  0021CA  0012               	return	
  5011  0021CC                     l2395:
  5012  0021CC  3406               	rlcf	__div_to_l_@f2+2,w,c
  5013  0021CE  3407               	rlcf	__div_to_l_@f2+3,w,c
  5014  0021D0  6E0B               	movwf	__div_to_l_@cntr,c
  5015  0021D2  500B               	movf	__div_to_l_@cntr,w,c
  5016  0021D4  A4D8               	btfss	status,2,c
  5017  0021D6  D009               	goto	l2401
  5018  0021D8  0E00               	movlw	0
  5019  0021DA  6E01               	movwf	?__div_to_l_,c
  5020  0021DC  0E00               	movlw	0
  5021  0021DE  6E02               	movwf	?__div_to_l_+1,c
  5022  0021E0  0E00               	movlw	0
  5023  0021E2  6E03               	movwf	?__div_to_l_+2,c
  5024  0021E4  0E00               	movlw	0
  5025  0021E6  6E04               	movwf	?__div_to_l_+3,c
  5026  0021E8  0012               	return	
  5027  0021EA                     l2401:
  5028  0021EA  8E03               	bsf	__div_to_l_@f1+2,7,c
  5029  0021EC  0EFF               	movlw	255
  5030  0021EE  1601               	andwf	__div_to_l_@f1,f,c
  5031  0021F0  0EFF               	movlw	255
  5032  0021F2  1602               	andwf	__div_to_l_@f1+1,f,c
  5033  0021F4  0EFF               	movlw	255
  5034  0021F6  1603               	andwf	__div_to_l_@f1+2,f,c
  5035  0021F8  0E00               	movlw	0
  5036  0021FA  1604               	andwf	__div_to_l_@f1+3,f,c
  5037  0021FC  8E06               	bsf	__div_to_l_@f2+2,7,c
  5038  0021FE  0EFF               	movlw	255
  5039  002200  1604               	andwf	__div_to_l_@f2,f,c
  5040  002202  0EFF               	movlw	255
  5041  002204  1605               	andwf	__div_to_l_@f2+1,f,c
  5042  002206  0EFF               	movlw	255
  5043  002208  1606               	andwf	__div_to_l_@f2+2,f,c
  5044  00220A  0E00               	movlw	0
  5045  00220C  1607               	andwf	__div_to_l_@f2+3,f,c
  5046  00220E  0E00               	movlw	0
  5047  002210  6E07               	movwf	__div_to_l_@quot,c
  5048  002212  0E00               	movlw	0
  5049  002214  6E08               	movwf	__div_to_l_@quot+1,c
  5050  002216  0E00               	movlw	0
  5051  002218  6E09               	movwf	__div_to_l_@quot+2,c
  5052  00221A  0E00               	movlw	0
  5053  00221C  6E0A               	movwf	__div_to_l_@quot+3,c
  5054  00221E  0E7F               	movlw	127
  5055  002220  5E0C               	subwf	__div_to_l_@exp1,f,c
  5056  002222  500B               	movf	__div_to_l_@cntr,w,c
  5057  002224  0FA0               	addlw	160
  5058  002226  5E0C               	subwf	__div_to_l_@exp1,f,c
  5059  002228  0E20               	movlw	32
  5060  00222A  6E0B               	movwf	__div_to_l_@cntr,c
  5061  00222C                     l2415:
  5062  00222C  90D8               	bcf	status,0,c
  5063  00222E  3607               	rlcf	__div_to_l_@quot,f,c
  5064  002230  3608               	rlcf	__div_to_l_@quot+1,f,c
  5065  002232  3609               	rlcf	__div_to_l_@quot+2,f,c
  5066  002234  360A               	rlcf	__div_to_l_@quot+3,f,c
  5067  002236  5004               	movf	__div_to_l_@f2,w,c
  5068  002238  5C01               	subwf	__div_to_l_@f1,w,c
  5069  00223A  5005               	movf	__div_to_l_@f2+1,w,c
  5070  00223C  5802               	subwfb	__div_to_l_@f1+1,w,c
  5071  00223E  5006               	movf	__div_to_l_@f2+2,w,c
  5072  002240  5803               	subwfb	__div_to_l_@f1+2,w,c
  5073  002242  5007               	movf	__div_to_l_@f2+3,w,c
  5074  002244  5804               	subwfb	__div_to_l_@f1+3,w,c
  5075  002246  A0D8               	btfss	status,0,c
  5076  002248  D009               	goto	l2423
  5077  00224A  5004               	movf	__div_to_l_@f2,w,c
  5078  00224C  5E01               	subwf	__div_to_l_@f1,f,c
  5079  00224E  5005               	movf	__div_to_l_@f2+1,w,c
  5080  002250  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5081  002252  5006               	movf	__div_to_l_@f2+2,w,c
  5082  002254  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5083  002256  5007               	movf	__div_to_l_@f2+3,w,c
  5084  002258  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5085  00225A  8007               	bsf	__div_to_l_@quot,0,c
  5086  00225C                     l2423:
  5087  00225C  90D8               	bcf	status,0,c
  5088  00225E  3601               	rlcf	__div_to_l_@f1,f,c
  5089  002260  3602               	rlcf	__div_to_l_@f1+1,f,c
  5090  002262  3603               	rlcf	__div_to_l_@f1+2,f,c
  5091  002264  3604               	rlcf	__div_to_l_@f1+3,f,c
  5092  002266  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5093  002268  D7E1               	goto	l2415
  5094  00226A  AE0C               	btfss	__div_to_l_@exp1,7,c
  5095  00226C  D016               	goto	l2439
  5096  00226E  500C               	movf	__div_to_l_@exp1,w,c
  5097  002270  0A80               	xorlw	128
  5098  002272  0F9F               	addlw	159
  5099  002274  B0D8               	btfsc	status,0,c
  5100  002276  D009               	goto	l2435
  5101  002278  0E00               	movlw	0
  5102  00227A  6E01               	movwf	?__div_to_l_,c
  5103  00227C  0E00               	movlw	0
  5104  00227E  6E02               	movwf	?__div_to_l_+1,c
  5105  002280  0E00               	movlw	0
  5106  002282  6E03               	movwf	?__div_to_l_+2,c
  5107  002284  0E00               	movlw	0
  5108  002286  6E04               	movwf	?__div_to_l_+3,c
  5109  002288  0012               	return	
  5110  00228A                     l2435:
  5111  00228A  90D8               	bcf	status,0,c
  5112  00228C  320A               	rrcf	__div_to_l_@quot+3,f,c
  5113  00228E  3209               	rrcf	__div_to_l_@quot+2,f,c
  5114  002290  3208               	rrcf	__div_to_l_@quot+1,f,c
  5115  002292  3207               	rrcf	__div_to_l_@quot,f,c
  5116  002294  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5117  002296  D7F9               	goto	l2435
  5118  002298  D015               	goto	l412
  5119  00229A                     l2439:
  5120  00229A  0E1F               	movlw	31
  5121  00229C  640C               	cpfsgt	__div_to_l_@exp1,c
  5122  00229E  D00F               	goto	l2447
  5123  0022A0  0E00               	movlw	0
  5124  0022A2  6E01               	movwf	?__div_to_l_,c
  5125  0022A4  0E00               	movlw	0
  5126  0022A6  6E02               	movwf	?__div_to_l_+1,c
  5127  0022A8  0E00               	movlw	0
  5128  0022AA  6E03               	movwf	?__div_to_l_+2,c
  5129  0022AC  0E00               	movlw	0
  5130  0022AE  6E04               	movwf	?__div_to_l_+3,c
  5131  0022B0  0012               	return	
  5132  0022B2                     l2445:
  5133  0022B2  90D8               	bcf	status,0,c
  5134  0022B4  3607               	rlcf	__div_to_l_@quot,f,c
  5135  0022B6  3608               	rlcf	__div_to_l_@quot+1,f,c
  5136  0022B8  3609               	rlcf	__div_to_l_@quot+2,f,c
  5137  0022BA  360A               	rlcf	__div_to_l_@quot+3,f,c
  5138  0022BC  060C               	decf	__div_to_l_@exp1,f,c
  5139  0022BE                     l2447:
  5140  0022BE  500C               	movf	__div_to_l_@exp1,w,c
  5141  0022C0  A4D8               	btfss	status,2,c
  5142  0022C2  D7F7               	goto	l2445
  5143  0022C4                     l412:
  5144  0022C4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5145  0022C8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5146  0022CC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5147  0022D0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5148  0022D4  0012               	return		;funcret
  5149  0022D6                     __end_of__div_to_l_:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           wreg	equ	0xFE8
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function ___lltoft *****************
  5166 ;; Defined at:
  5167 ;;		line 35 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\lltoft.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  c               4   35[COMRAM] unsigned long 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  exp             1   43[COMRAM] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  3   35[COMRAM] float 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5181 ;;      Params:         4       0       0       0       0       0       0
  5182 ;;      Locals:         1       0       0       0       0       0       0
  5183 ;;      Temps:          4       0       0       0       0       0       0
  5184 ;;      Totals:         9       0       0       0       0       0       0
  5185 ;;Total ram usage:        9 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    1
  5188 ;; This function calls:
  5189 ;;		___ftpack
  5190 ;; This function is called by:
  5191 ;;		_sprintf
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text11
  5196  002930                     __ptext11:
  5197                           	opt stack 0
  5198  002930                     ___lltoft:
  5199                           	opt stack 28
  5200                           
  5201                           ;incstack = 0
  5202  002930  0E8E               	movlw	142
  5203  002932  6E2C               	movwf	___lltoft@exp,c
  5204  002934  D006               	goto	l2613
  5205  002936                     l2611:
  5206  002936  90D8               	bcf	status,0,c
  5207  002938  3227               	rrcf	___lltoft@c+3,f,c
  5208  00293A  3226               	rrcf	___lltoft@c+2,f,c
  5209  00293C  3225               	rrcf	___lltoft@c+1,f,c
  5210  00293E  3224               	rrcf	___lltoft@c,f,c
  5211  002940  2A2C               	incf	___lltoft@exp,f,c
  5212  002942                     l2613:
  5213  002942  0E00               	movlw	0
  5214  002944  1424               	andwf	___lltoft@c,w,c
  5215  002946  6E28               	movwf	??___lltoft& (0+255),c
  5216  002948  0E00               	movlw	0
  5217  00294A  1425               	andwf	___lltoft@c+1,w,c
  5218  00294C  6E29               	movwf	(??___lltoft+1)& (0+255),c
  5219  00294E  0E00               	movlw	0
  5220  002950  1426               	andwf	___lltoft@c+2,w,c
  5221  002952  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  5222  002954  0EFF               	movlw	255
  5223  002956  1427               	andwf	___lltoft@c+3,w,c
  5224  002958  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  5225  00295A  5028               	movf	??___lltoft,w,c
  5226  00295C  1029               	iorwf	??___lltoft+1,w,c
  5227  00295E  102A               	iorwf	??___lltoft+2,w,c
  5228  002960  102B               	iorwf	??___lltoft+3,w,c
  5229  002962  A4D8               	btfss	status,2,c
  5230  002964  D7E8               	goto	l2611
  5231  002966  C024  F001         	movff	___lltoft@c,___ftpack@arg
  5232  00296A  C025  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5233  00296E  C026  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5234  002972  C02C  F004         	movff	___lltoft@exp,___ftpack@exp
  5235  002976  0E00               	movlw	0
  5236  002978  6E05               	movwf	___ftpack@sign,c
  5237  00297A  ECD2  F012         	call	___ftpack	;wreg free
  5238  00297E  C001  F024         	movff	?___ftpack,?___lltoft
  5239  002982  C002  F025         	movff	?___ftpack+1,?___lltoft+1
  5240  002986  C003  F026         	movff	?___ftpack+2,?___lltoft+2
  5241  00298A  0012               	return	
  5242  00298C                     __end_of___lltoft:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           wreg	equ	0xFE8
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function ___llmod *****************
  5259 ;; Defined at:
  5260 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\llmod.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  dividend        4    0[COMRAM] unsigned long 
  5263 ;;  divisor         4    4[COMRAM] unsigned long 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  counter         1    8[COMRAM] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  4    0[COMRAM] unsigned long 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5275 ;;      Params:         8       0       0       0       0       0       0
  5276 ;;      Locals:         1       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0
  5278 ;;      Totals:         9       0       0       0       0       0       0
  5279 ;;Total ram usage:        9 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_sprintf
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text12
  5289  0028CA                     __ptext12:
  5290                           	opt stack 0
  5291  0028CA                     ___llmod:
  5292                           	opt stack 29
  5293                           
  5294                           ;incstack = 0
  5295  0028CA  5005               	movf	___llmod@divisor,w,c
  5296  0028CC  1006               	iorwf	___llmod@divisor+1,w,c
  5297  0028CE  1007               	iorwf	___llmod@divisor+2,w,c
  5298  0028D0  1008               	iorwf	___llmod@divisor+3,w,c
  5299  0028D2  B4D8               	btfsc	status,2,c
  5300  0028D4  D024               	goto	l601
  5301  0028D6  0E01               	movlw	1
  5302  0028D8  6E09               	movwf	___llmod@counter,c
  5303  0028DA  D006               	goto	l2599
  5304  0028DC                     l2597:
  5305  0028DC  90D8               	bcf	status,0,c
  5306  0028DE  3605               	rlcf	___llmod@divisor,f,c
  5307  0028E0  3606               	rlcf	___llmod@divisor+1,f,c
  5308  0028E2  3607               	rlcf	___llmod@divisor+2,f,c
  5309  0028E4  3608               	rlcf	___llmod@divisor+3,f,c
  5310  0028E6  2A09               	incf	___llmod@counter,f,c
  5311  0028E8                     l2599:
  5312  0028E8  AE08               	btfss	___llmod@divisor+3,7,c
  5313  0028EA  D7F8               	goto	l2597
  5314  0028EC                     l2601:
  5315  0028EC  5005               	movf	___llmod@divisor,w,c
  5316  0028EE  5C01               	subwf	___llmod@dividend,w,c
  5317  0028F0  5006               	movf	___llmod@divisor+1,w,c
  5318  0028F2  5802               	subwfb	___llmod@dividend+1,w,c
  5319  0028F4  5007               	movf	___llmod@divisor+2,w,c
  5320  0028F6  5803               	subwfb	___llmod@dividend+2,w,c
  5321  0028F8  5008               	movf	___llmod@divisor+3,w,c
  5322  0028FA  5804               	subwfb	___llmod@dividend+3,w,c
  5323  0028FC  A0D8               	btfss	status,0,c
  5324  0028FE  D008               	goto	l2605
  5325  002900  5005               	movf	___llmod@divisor,w,c
  5326  002902  5E01               	subwf	___llmod@dividend,f,c
  5327  002904  5006               	movf	___llmod@divisor+1,w,c
  5328  002906  5A02               	subwfb	___llmod@dividend+1,f,c
  5329  002908  5007               	movf	___llmod@divisor+2,w,c
  5330  00290A  5A03               	subwfb	___llmod@dividend+2,f,c
  5331  00290C  5008               	movf	___llmod@divisor+3,w,c
  5332  00290E  5A04               	subwfb	___llmod@dividend+3,f,c
  5333  002910                     l2605:
  5334  002910  90D8               	bcf	status,0,c
  5335  002912  3208               	rrcf	___llmod@divisor+3,f,c
  5336  002914  3207               	rrcf	___llmod@divisor+2,f,c
  5337  002916  3206               	rrcf	___llmod@divisor+1,f,c
  5338  002918  3205               	rrcf	___llmod@divisor,f,c
  5339  00291A  2E09               	decfsz	___llmod@counter,f,c
  5340  00291C  D7E7               	goto	l2601
  5341  00291E                     l601:
  5342  00291E  C001  F001         	movff	___llmod@dividend,?___llmod
  5343  002922  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5344  002926  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5345  00292A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5346  00292E  0012               	return		;funcret
  5347  002930                     __end_of___llmod:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           wreg	equ	0xFE8
  5356                           indf2	equ	0xFDF
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           
  5363 ;; *************** function ___lldiv *****************
  5364 ;; Defined at:
  5365 ;;		line 8 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\lldiv.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  dividend        4    0[COMRAM] unsigned long 
  5368 ;;  divisor         4    4[COMRAM] unsigned long 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  quotient        4    8[COMRAM] unsigned long 
  5371 ;;  counter         1   12[COMRAM] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  4    0[COMRAM] unsigned long 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5381 ;;      Params:         8       0       0       0       0       0       0
  5382 ;;      Locals:         5       0       0       0       0       0       0
  5383 ;;      Temps:          0       0       0       0       0       0       0
  5384 ;;      Totals:        13       0       0       0       0       0       0
  5385 ;;Total ram usage:       13 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_sprintf
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text13
  5395  002766                     __ptext13:
  5396                           	opt stack 0
  5397  002766                     ___lldiv:
  5398                           	opt stack 29
  5399                           
  5400                           ;incstack = 0
  5401  002766  0E00               	movlw	0
  5402  002768  6E09               	movwf	___lldiv@quotient,c
  5403  00276A  0E00               	movlw	0
  5404  00276C  6E0A               	movwf	___lldiv@quotient+1,c
  5405  00276E  0E00               	movlw	0
  5406  002770  6E0B               	movwf	___lldiv@quotient+2,c
  5407  002772  0E00               	movlw	0
  5408  002774  6E0C               	movwf	___lldiv@quotient+3,c
  5409  002776  5005               	movf	___lldiv@divisor,w,c
  5410  002778  1006               	iorwf	___lldiv@divisor+1,w,c
  5411  00277A  1007               	iorwf	___lldiv@divisor+2,w,c
  5412  00277C  1008               	iorwf	___lldiv@divisor+3,w,c
  5413  00277E  B4D8               	btfsc	status,2,c
  5414  002780  D02A               	goto	l591
  5415  002782  0E01               	movlw	1
  5416  002784  6E0D               	movwf	___lldiv@counter,c
  5417  002786  D006               	goto	l2579
  5418  002788                     l2577:
  5419  002788  90D8               	bcf	status,0,c
  5420  00278A  3605               	rlcf	___lldiv@divisor,f,c
  5421  00278C  3606               	rlcf	___lldiv@divisor+1,f,c
  5422  00278E  3607               	rlcf	___lldiv@divisor+2,f,c
  5423  002790  3608               	rlcf	___lldiv@divisor+3,f,c
  5424  002792  2A0D               	incf	___lldiv@counter,f,c
  5425  002794                     l2579:
  5426  002794  AE08               	btfss	___lldiv@divisor+3,7,c
  5427  002796  D7F8               	goto	l2577
  5428  002798                     l2581:
  5429  002798  90D8               	bcf	status,0,c
  5430  00279A  3609               	rlcf	___lldiv@quotient,f,c
  5431  00279C  360A               	rlcf	___lldiv@quotient+1,f,c
  5432  00279E  360B               	rlcf	___lldiv@quotient+2,f,c
  5433  0027A0  360C               	rlcf	___lldiv@quotient+3,f,c
  5434  0027A2  5005               	movf	___lldiv@divisor,w,c
  5435  0027A4  5C01               	subwf	___lldiv@dividend,w,c
  5436  0027A6  5006               	movf	___lldiv@divisor+1,w,c
  5437  0027A8  5802               	subwfb	___lldiv@dividend+1,w,c
  5438  0027AA  5007               	movf	___lldiv@divisor+2,w,c
  5439  0027AC  5803               	subwfb	___lldiv@dividend+2,w,c
  5440  0027AE  5008               	movf	___lldiv@divisor+3,w,c
  5441  0027B0  5804               	subwfb	___lldiv@dividend+3,w,c
  5442  0027B2  A0D8               	btfss	status,0,c
  5443  0027B4  D009               	goto	l2589
  5444  0027B6  5005               	movf	___lldiv@divisor,w,c
  5445  0027B8  5E01               	subwf	___lldiv@dividend,f,c
  5446  0027BA  5006               	movf	___lldiv@divisor+1,w,c
  5447  0027BC  5A02               	subwfb	___lldiv@dividend+1,f,c
  5448  0027BE  5007               	movf	___lldiv@divisor+2,w,c
  5449  0027C0  5A03               	subwfb	___lldiv@dividend+2,f,c
  5450  0027C2  5008               	movf	___lldiv@divisor+3,w,c
  5451  0027C4  5A04               	subwfb	___lldiv@dividend+3,f,c
  5452  0027C6  8009               	bsf	___lldiv@quotient,0,c
  5453  0027C8                     l2589:
  5454  0027C8  90D8               	bcf	status,0,c
  5455  0027CA  3208               	rrcf	___lldiv@divisor+3,f,c
  5456  0027CC  3207               	rrcf	___lldiv@divisor+2,f,c
  5457  0027CE  3206               	rrcf	___lldiv@divisor+1,f,c
  5458  0027D0  3205               	rrcf	___lldiv@divisor,f,c
  5459  0027D2  2E0D               	decfsz	___lldiv@counter,f,c
  5460  0027D4  D7E1               	goto	l2581
  5461  0027D6                     l591:
  5462  0027D6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5463  0027DA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5464  0027DE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5465  0027E2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5466  0027E6  0012               	return		;funcret
  5467  0027E8                     __end_of___lldiv:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           wreg	equ	0xFE8
  5476                           indf2	equ	0xFDF
  5477                           postinc2	equ	0xFDE
  5478                           postdec2	equ	0xFDD
  5479                           fsr2h	equ	0xFDA
  5480                           fsr2l	equ	0xFD9
  5481                           status	equ	0xFD8
  5482                           
  5483 ;; *************** function ___fttol *****************
  5484 ;; Defined at:
  5485 ;;		line 44 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\fttol.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  f1              3   20[COMRAM] float 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  lval            4   30[COMRAM] unsigned long 
  5490 ;;  exp1            1   34[COMRAM] unsigned char 
  5491 ;;  sign1           1   29[COMRAM] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  4   20[COMRAM] long 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5501 ;;      Params:         4       0       0       0       0       0       0
  5502 ;;      Locals:         6       0       0       0       0       0       0
  5503 ;;      Temps:          5       0       0       0       0       0       0
  5504 ;;      Totals:        15       0       0       0       0       0       0
  5505 ;;Total ram usage:       15 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_sprintf
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text14
  5515  0023CA                     __ptext14:
  5516                           	opt stack 0
  5517  0023CA                     ___fttol:
  5518                           	opt stack 29
  5519                           
  5520                           ;incstack = 0
  5521  0023CA  C017  F019         	movff	___fttol@f1+2,??___fttol
  5522  0023CE  6A1A               	clrf	(??___fttol+1)& (0+255),c
  5523  0023D0  6A1B               	clrf	(??___fttol+2)& (0+255),c
  5524  0023D2  3416               	rlcf	___fttol@f1+1,w,c
  5525  0023D4  3619               	rlcf	??___fttol& (0+255),f,c
  5526  0023D6  E301               	bnc	u2511
  5527  0023D8  801A               	bsf	(??___fttol+1)& (0+255),0,c
  5528  0023DA                     u2511:
  5529  0023DA  5019               	movf	??___fttol,w,c
  5530  0023DC  6E23               	movwf	___fttol@exp1,c
  5531  0023DE  5023               	movf	___fttol@exp1,w,c
  5532  0023E0  A4D8               	btfss	status,2,c
  5533  0023E2  D009               	goto	l2531
  5534  0023E4  0E00               	movlw	0
  5535  0023E6  6E15               	movwf	?___fttol,c
  5536  0023E8  0E00               	movlw	0
  5537  0023EA  6E16               	movwf	?___fttol+1,c
  5538  0023EC  0E00               	movlw	0
  5539  0023EE  6E17               	movwf	?___fttol+2,c
  5540  0023F0  0E00               	movlw	0
  5541  0023F2  6E18               	movwf	?___fttol+3,c
  5542  0023F4  0012               	return	
  5543  0023F6                     l2531:
  5544  0023F6  0E17               	movlw	23
  5545  0023F8  6E19               	movwf	??___fttol& (0+255),c
  5546  0023FA  C015  F01A         	movff	___fttol@f1,??___fttol+1
  5547  0023FE  C016  F01B         	movff	___fttol@f1+1,??___fttol+2
  5548  002402  C017  F01C         	movff	___fttol@f1+2,??___fttol+3
  5549  002406  2819               	incf	??___fttol,w,c
  5550  002408  6E1D               	movwf	(??___fttol+4)& (0+255),c
  5551  00240A  D004               	goto	u2530
  5552  00240C                     u2535:
  5553  00240C  90D8               	bcf	status,0,c
  5554  00240E  321C               	rrcf	??___fttol+3,f,c
  5555  002410  321B               	rrcf	??___fttol+2,f,c
  5556  002412  321A               	rrcf	??___fttol+1,f,c
  5557  002414                     u2530:
  5558  002414  2E1D               	decfsz	(??___fttol+4)& (0+255),f,c
  5559  002416  D7FA               	goto	u2535
  5560  002418  501A               	movf	??___fttol+1,w,c
  5561  00241A  6E1E               	movwf	___fttol@sign1,c
  5562  00241C  8E16               	bsf	___fttol@f1+1,7,c
  5563  00241E  0EFF               	movlw	255
  5564  002420  1615               	andwf	___fttol@f1,f,c
  5565  002422  0EFF               	movlw	255
  5566  002424  1616               	andwf	___fttol@f1+1,f,c
  5567  002426  0E00               	movlw	0
  5568  002428  1617               	andwf	___fttol@f1+2,f,c
  5569  00242A  5015               	movf	___fttol@f1,w,c
  5570  00242C  6E1F               	movwf	___fttol@lval,c
  5571  00242E  5016               	movf	___fttol@f1+1,w,c
  5572  002430  6E20               	movwf	___fttol@lval+1,c
  5573  002432  5017               	movf	___fttol@f1+2,w,c
  5574  002434  6E21               	movwf	___fttol@lval+2,c
  5575  002436  6A22               	clrf	___fttol@lval+3,c
  5576  002438  0E8E               	movlw	142
  5577  00243A  5E23               	subwf	___fttol@exp1,f,c
  5578  00243C  AE23               	btfss	___fttol@exp1,7,c
  5579  00243E  D016               	goto	l2553
  5580  002440  5023               	movf	___fttol@exp1,w,c
  5581  002442  0A80               	xorlw	128
  5582  002444  0F8F               	addlw	143
  5583  002446  B0D8               	btfsc	status,0,c
  5584  002448  D009               	goto	l2549
  5585  00244A  0E00               	movlw	0
  5586  00244C  6E15               	movwf	?___fttol,c
  5587  00244E  0E00               	movlw	0
  5588  002450  6E16               	movwf	?___fttol+1,c
  5589  002452  0E00               	movlw	0
  5590  002454  6E17               	movwf	?___fttol+2,c
  5591  002456  0E00               	movlw	0
  5592  002458  6E18               	movwf	?___fttol+3,c
  5593  00245A  0012               	return	
  5594  00245C                     l2549:
  5595  00245C  90D8               	bcf	status,0,c
  5596  00245E  3222               	rrcf	___fttol@lval+3,f,c
  5597  002460  3221               	rrcf	___fttol@lval+2,f,c
  5598  002462  3220               	rrcf	___fttol@lval+1,f,c
  5599  002464  321F               	rrcf	___fttol@lval,f,c
  5600  002466  3E23               	incfsz	___fttol@exp1,f,c
  5601  002468  D7F9               	goto	l2549
  5602  00246A  D015               	goto	l2563
  5603  00246C                     l2553:
  5604  00246C  0E17               	movlw	23
  5605  00246E  6423               	cpfsgt	___fttol@exp1,c
  5606  002470  D00F               	goto	l2561
  5607  002472  0E00               	movlw	0
  5608  002474  6E15               	movwf	?___fttol,c
  5609  002476  0E00               	movlw	0
  5610  002478  6E16               	movwf	?___fttol+1,c
  5611  00247A  0E00               	movlw	0
  5612  00247C  6E17               	movwf	?___fttol+2,c
  5613  00247E  0E00               	movlw	0
  5614  002480  6E18               	movwf	?___fttol+3,c
  5615  002482  0012               	return	
  5616  002484                     l2559:
  5617  002484  90D8               	bcf	status,0,c
  5618  002486  361F               	rlcf	___fttol@lval,f,c
  5619  002488  3620               	rlcf	___fttol@lval+1,f,c
  5620  00248A  3621               	rlcf	___fttol@lval+2,f,c
  5621  00248C  3622               	rlcf	___fttol@lval+3,f,c
  5622  00248E  0623               	decf	___fttol@exp1,f,c
  5623  002490                     l2561:
  5624  002490  5023               	movf	___fttol@exp1,w,c
  5625  002492  A4D8               	btfss	status,2,c
  5626  002494  D7F7               	goto	l2559
  5627  002496                     l2563:
  5628  002496  501E               	movf	___fttol@sign1,w,c
  5629  002498  B4D8               	btfsc	status,2,c
  5630  00249A  D008               	goto	l2567
  5631  00249C  1E22               	comf	___fttol@lval+3,f,c
  5632  00249E  1E21               	comf	___fttol@lval+2,f,c
  5633  0024A0  1E20               	comf	___fttol@lval+1,f,c
  5634  0024A2  6C1F               	negf	___fttol@lval,c
  5635  0024A4  0E00               	movlw	0
  5636  0024A6  2220               	addwfc	___fttol@lval+1,f,c
  5637  0024A8  2221               	addwfc	___fttol@lval+2,f,c
  5638  0024AA  2222               	addwfc	___fttol@lval+3,f,c
  5639  0024AC                     l2567:
  5640  0024AC  C01F  F015         	movff	___fttol@lval,?___fttol
  5641  0024B0  C020  F016         	movff	___fttol@lval+1,?___fttol+1
  5642  0024B4  C021  F017         	movff	___fttol@lval+2,?___fttol+2
  5643  0024B8  C022  F018         	movff	___fttol@lval+3,?___fttol+3
  5644  0024BC  0012               	return	
  5645  0024BE                     __end_of___fttol:
  5646                           	opt stack 0
  5647                           tblptru	equ	0xFF8
  5648                           tblptrh	equ	0xFF7
  5649                           tblptrl	equ	0xFF6
  5650                           tablat	equ	0xFF5
  5651                           prodh	equ	0xFF4
  5652                           prodl	equ	0xFF3
  5653                           wreg	equ	0xFE8
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function ___ftsub *****************
  5662 ;; Defined at:
  5663 ;;		line 20 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftsub.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  f1              3   84[COMRAM] float 
  5666 ;;  f2              3   87[COMRAM] float 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  3   84[COMRAM] float 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5678 ;;      Params:         6       0       0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0       0       0
  5681 ;;      Totals:         6       0       0       0       0       0       0
  5682 ;;Total ram usage:        6 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    2
  5685 ;; This function calls:
  5686 ;;		___ftadd
  5687 ;; This function is called by:
  5688 ;;		_sprintf
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text15
  5693  0029D4                     __ptext15:
  5694                           	opt stack 0
  5695  0029D4                     ___ftsub:
  5696                           	opt stack 27
  5697                           
  5698                           ;incstack = 0
  5699  0029D4  5058               	movf	___ftsub@f2,w,c
  5700  0029D6  1059               	iorwf	___ftsub@f2+1,w,c
  5701  0029D8  105A               	iorwf	___ftsub@f2+2,w,c
  5702  0029DA  B4D8               	btfsc	status,2,c
  5703  0029DC  D006               	goto	l2499
  5704  0029DE  0E00               	movlw	0
  5705  0029E0  1A58               	xorwf	___ftsub@f2,f,c
  5706  0029E2  0E00               	movlw	0
  5707  0029E4  1A59               	xorwf	___ftsub@f2+1,f,c
  5708  0029E6  0E80               	movlw	128
  5709  0029E8  1A5A               	xorwf	___ftsub@f2+2,f,c
  5710  0029EA                     l2499:
  5711  0029EA  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  5712  0029EE  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  5713  0029F2  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  5714  0029F6  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  5715  0029FA  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  5716  0029FE  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  5717  002A02  EC68  F00F         	call	___ftadd	;wreg free
  5718  002A06  C049  F055         	movff	?___ftadd,?___ftsub
  5719  002A0A  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  5720  002A0E  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  5721  002A12  0012               	return	
  5722  002A14                     __end_of___ftsub:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           prodh	equ	0xFF4
  5729                           prodl	equ	0xFF3
  5730                           wreg	equ	0xFE8
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function ___ftadd *****************
  5739 ;; Defined at:
  5740 ;;		line 86 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  f1              3   72[COMRAM] float 
  5743 ;;  f2              3   75[COMRAM] float 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  exp1            1   83[COMRAM] unsigned char 
  5746 ;;  exp2            1   82[COMRAM] unsigned char 
  5747 ;;  sign            1   81[COMRAM] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  3   72[COMRAM] float 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5757 ;;      Params:         6       0       0       0       0       0       0
  5758 ;;      Locals:         3       0       0       0       0       0       0
  5759 ;;      Temps:          3       0       0       0       0       0       0
  5760 ;;      Totals:        12       0       0       0       0       0       0
  5761 ;;Total ram usage:       12 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    1
  5764 ;; This function calls:
  5765 ;;		___ftpack
  5766 ;; This function is called by:
  5767 ;;		_sprintf
  5768 ;;		___ftsub
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text16
  5773  001ED0                     __ptext16:
  5774                           	opt stack 0
  5775  001ED0                     ___ftadd:
  5776                           	opt stack 27
  5777                           
  5778                           ;incstack = 0
  5779  001ED0  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  5780  001ED4  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5781  001ED6  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5782  001ED8  344A               	rlcf	___ftadd@f1+1,w,c
  5783  001EDA  364F               	rlcf	??___ftadd& (0+255),f,c
  5784  001EDC  E301               	bnc	u1751
  5785  001EDE  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5786  001EE0                     u1751:
  5787  001EE0  504F               	movf	??___ftadd,w,c
  5788  001EE2  6E54               	movwf	___ftadd@exp1,c
  5789  001EE4  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  5790  001EE8  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5791  001EEA  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5792  001EEC  344D               	rlcf	___ftadd@f2+1,w,c
  5793  001EEE  364F               	rlcf	??___ftadd& (0+255),f,c
  5794  001EF0  E301               	bnc	u1761
  5795  001EF2  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5796  001EF4                     u1761:
  5797  001EF4  504F               	movf	??___ftadd,w,c
  5798  001EF6  6E53               	movwf	___ftadd@exp2,c
  5799  001EF8  5054               	movf	___ftadd@exp1,w,c
  5800  001EFA  B4D8               	btfsc	status,2,c
  5801  001EFC  D00B               	goto	l467
  5802  001EFE  5053               	movf	___ftadd@exp2,w,c
  5803  001F00  5C54               	subwf	___ftadd@exp1,w,c
  5804  001F02  B0D8               	btfsc	status,0,c
  5805  001F04  D00E               	goto	l2029
  5806  001F06  5054               	movf	___ftadd@exp1,w,c
  5807  001F08  0800               	sublw	0
  5808  001F0A  2453               	addwf	___ftadd@exp2,w,c
  5809  001F0C  6E4F               	movwf	??___ftadd& (0+255),c
  5810  001F0E  0E18               	movlw	24
  5811  001F10  644F               	cpfsgt	??___ftadd,c
  5812  001F12  D007               	goto	l2029
  5813  001F14                     l467:
  5814  001F14  C04C  F049         	movff	___ftadd@f2,?___ftadd
  5815  001F18  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  5816  001F1C  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  5817  001F20  0012               	return	
  5818  001F22                     l2029:
  5819  001F22  5053               	movf	___ftadd@exp2,w,c
  5820  001F24  B4D8               	btfsc	status,2,c
  5821  001F26  D00B               	goto	l471
  5822  001F28  5054               	movf	___ftadd@exp1,w,c
  5823  001F2A  5C53               	subwf	___ftadd@exp2,w,c
  5824  001F2C  B0D8               	btfsc	status,0,c
  5825  001F2E  D00E               	goto	l2035
  5826  001F30  5053               	movf	___ftadd@exp2,w,c
  5827  001F32  0800               	sublw	0
  5828  001F34  2454               	addwf	___ftadd@exp1,w,c
  5829  001F36  6E4F               	movwf	??___ftadd& (0+255),c
  5830  001F38  0E18               	movlw	24
  5831  001F3A  644F               	cpfsgt	??___ftadd,c
  5832  001F3C  D007               	goto	l2035
  5833  001F3E                     l471:
  5834  001F3E  C049  F049         	movff	___ftadd@f1,?___ftadd
  5835  001F42  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  5836  001F46  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  5837  001F4A  0012               	return	
  5838  001F4C                     l2035:
  5839  001F4C  0E06               	movlw	6
  5840  001F4E  6E52               	movwf	___ftadd@sign,c
  5841  001F50  BE4B               	btfsc	___ftadd@f1+2,7,c
  5842  001F52  8E52               	bsf	___ftadd@sign,7,c
  5843  001F54  BE4E               	btfsc	___ftadd@f2+2,7,c
  5844  001F56  8C52               	bsf	___ftadd@sign,6,c
  5845  001F58  8E4A               	bsf	___ftadd@f1+1,7,c
  5846  001F5A  0EFF               	movlw	255
  5847  001F5C  1649               	andwf	___ftadd@f1,f,c
  5848  001F5E  0EFF               	movlw	255
  5849  001F60  164A               	andwf	___ftadd@f1+1,f,c
  5850  001F62  0E00               	movlw	0
  5851  001F64  164B               	andwf	___ftadd@f1+2,f,c
  5852  001F66  8E4D               	bsf	___ftadd@f2+1,7,c
  5853  001F68  0EFF               	movlw	255
  5854  001F6A  164C               	andwf	___ftadd@f2,f,c
  5855  001F6C  0EFF               	movlw	255
  5856  001F6E  164D               	andwf	___ftadd@f2+1,f,c
  5857  001F70  0E00               	movlw	0
  5858  001F72  164E               	andwf	___ftadd@f2+2,f,c
  5859  001F74  5053               	movf	___ftadd@exp2,w,c
  5860  001F76  5C54               	subwf	___ftadd@exp1,w,c
  5861  001F78  B0D8               	btfsc	status,0,c
  5862  001F7A  D01B               	goto	l2061
  5863  001F7C                     l2051:
  5864  001F7C  90D8               	bcf	status,0,c
  5865  001F7E  364C               	rlcf	___ftadd@f2,f,c
  5866  001F80  364D               	rlcf	___ftadd@f2+1,f,c
  5867  001F82  364E               	rlcf	___ftadd@f2+2,f,c
  5868  001F84  0653               	decf	___ftadd@exp2,f,c
  5869  001F86  5054               	movf	___ftadd@exp1,w,c
  5870  001F88  1853               	xorwf	___ftadd@exp2,w,c
  5871  001F8A  B4D8               	btfsc	status,2,c
  5872  001F8C  D00D               	goto	l2059
  5873  001F8E  0652               	decf	___ftadd@sign,f,c
  5874  001F90  C052  F04F         	movff	___ftadd@sign,??___ftadd
  5875  001F94  0E07               	movlw	7
  5876  001F96  164F               	andwf	??___ftadd,f,c
  5877  001F98  B4D8               	btfsc	status,2,c
  5878  001F9A  D006               	goto	l2059
  5879  001F9C  D7EF               	goto	l2051
  5880  001F9E                     l2057:
  5881  001F9E  90D8               	bcf	status,0,c
  5882  001FA0  324B               	rrcf	___ftadd@f1+2,f,c
  5883  001FA2  324A               	rrcf	___ftadd@f1+1,f,c
  5884  001FA4  3249               	rrcf	___ftadd@f1,f,c
  5885  001FA6  2A54               	incf	___ftadd@exp1,f,c
  5886  001FA8                     l2059:
  5887  001FA8  5053               	movf	___ftadd@exp2,w,c
  5888  001FAA  1854               	xorwf	___ftadd@exp1,w,c
  5889  001FAC  B4D8               	btfsc	status,2,c
  5890  001FAE  D01F               	goto	l482
  5891  001FB0  D7F6               	goto	l2057
  5892  001FB2                     l2061:
  5893  001FB2  5054               	movf	___ftadd@exp1,w,c
  5894  001FB4  5C53               	subwf	___ftadd@exp2,w,c
  5895  001FB6  B0D8               	btfsc	status,0,c
  5896  001FB8  D01A               	goto	l482
  5897  001FBA                     l2063:
  5898  001FBA  90D8               	bcf	status,0,c
  5899  001FBC  3649               	rlcf	___ftadd@f1,f,c
  5900  001FBE  364A               	rlcf	___ftadd@f1+1,f,c
  5901  001FC0  364B               	rlcf	___ftadd@f1+2,f,c
  5902  001FC2  0654               	decf	___ftadd@exp1,f,c
  5903  001FC4  5054               	movf	___ftadd@exp1,w,c
  5904  001FC6  1853               	xorwf	___ftadd@exp2,w,c
  5905  001FC8  B4D8               	btfsc	status,2,c
  5906  001FCA  D00D               	goto	l2071
  5907  001FCC  0652               	decf	___ftadd@sign,f,c
  5908  001FCE  C052  F04F         	movff	___ftadd@sign,??___ftadd
  5909  001FD2  0E07               	movlw	7
  5910  001FD4  164F               	andwf	??___ftadd,f,c
  5911  001FD6  B4D8               	btfsc	status,2,c
  5912  001FD8  D006               	goto	l2071
  5913  001FDA  D7EF               	goto	l2063
  5914  001FDC                     l2069:
  5915  001FDC  90D8               	bcf	status,0,c
  5916  001FDE  324E               	rrcf	___ftadd@f2+2,f,c
  5917  001FE0  324D               	rrcf	___ftadd@f2+1,f,c
  5918  001FE2  324C               	rrcf	___ftadd@f2,f,c
  5919  001FE4  2A53               	incf	___ftadd@exp2,f,c
  5920  001FE6                     l2071:
  5921  001FE6  5053               	movf	___ftadd@exp2,w,c
  5922  001FE8  1854               	xorwf	___ftadd@exp1,w,c
  5923  001FEA  A4D8               	btfss	status,2,c
  5924  001FEC  D7F7               	goto	l2069
  5925  001FEE                     l482:
  5926  001FEE  AE52               	btfss	___ftadd@sign,7,c
  5927  001FF0  D00C               	goto	l491
  5928  001FF2  0EFF               	movlw	255
  5929  001FF4  1A49               	xorwf	___ftadd@f1,f,c
  5930  001FF6  0EFF               	movlw	255
  5931  001FF8  1A4A               	xorwf	___ftadd@f1+1,f,c
  5932  001FFA  0EFF               	movlw	255
  5933  001FFC  1A4B               	xorwf	___ftadd@f1+2,f,c
  5934  001FFE  0E01               	movlw	1
  5935  002000  2649               	addwf	___ftadd@f1,f,c
  5936  002002  0E00               	movlw	0
  5937  002004  224A               	addwfc	___ftadd@f1+1,f,c
  5938  002006  0E00               	movlw	0
  5939  002008  224B               	addwfc	___ftadd@f1+2,f,c
  5940  00200A                     l491:
  5941  00200A  AC52               	btfss	___ftadd@sign,6,c
  5942  00200C  D00C               	goto	l2077
  5943  00200E  0EFF               	movlw	255
  5944  002010  1A4C               	xorwf	___ftadd@f2,f,c
  5945  002012  0EFF               	movlw	255
  5946  002014  1A4D               	xorwf	___ftadd@f2+1,f,c
  5947  002016  0EFF               	movlw	255
  5948  002018  1A4E               	xorwf	___ftadd@f2+2,f,c
  5949  00201A  0E01               	movlw	1
  5950  00201C  264C               	addwf	___ftadd@f2,f,c
  5951  00201E  0E00               	movlw	0
  5952  002020  224D               	addwfc	___ftadd@f2+1,f,c
  5953  002022  0E00               	movlw	0
  5954  002024  224E               	addwfc	___ftadd@f2+2,f,c
  5955  002026                     l2077:
  5956  002026  0E00               	movlw	0
  5957  002028  6E52               	movwf	___ftadd@sign,c
  5958  00202A  5049               	movf	___ftadd@f1,w,c
  5959  00202C  264C               	addwf	___ftadd@f2,f,c
  5960  00202E  504A               	movf	___ftadd@f1+1,w,c
  5961  002030  224D               	addwfc	___ftadd@f2+1,f,c
  5962  002032  504B               	movf	___ftadd@f1+2,w,c
  5963  002034  224E               	addwfc	___ftadd@f2+2,f,c
  5964  002036  AE4E               	btfss	___ftadd@f2+2,7,c
  5965  002038  D00E               	goto	l2087
  5966  00203A  0EFF               	movlw	255
  5967  00203C  1A4C               	xorwf	___ftadd@f2,f,c
  5968  00203E  0EFF               	movlw	255
  5969  002040  1A4D               	xorwf	___ftadd@f2+1,f,c
  5970  002042  0EFF               	movlw	255
  5971  002044  1A4E               	xorwf	___ftadd@f2+2,f,c
  5972  002046  0E01               	movlw	1
  5973  002048  264C               	addwf	___ftadd@f2,f,c
  5974  00204A  0E00               	movlw	0
  5975  00204C  224D               	addwfc	___ftadd@f2+1,f,c
  5976  00204E  0E00               	movlw	0
  5977  002050  224E               	addwfc	___ftadd@f2+2,f,c
  5978  002052  0E01               	movlw	1
  5979  002054  6E52               	movwf	___ftadd@sign,c
  5980  002056                     l2087:
  5981  002056  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  5982  00205A  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5983  00205E  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5984  002062  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  5985  002066  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  5986  00206A  ECD2  F012         	call	___ftpack	;wreg free
  5987  00206E  C001  F049         	movff	?___ftpack,?___ftadd
  5988  002072  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  5989  002076  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  5990  00207A  0012               	return	
  5991  00207C                     __end_of___ftadd:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           wreg	equ	0xFE8
  6000                           indf2	equ	0xFDF
  6001                           postinc2	equ	0xFDE
  6002                           postdec2	equ	0xFDD
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function ___ftneg *****************
  6008 ;; Defined at:
  6009 ;;		line 15 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftneg.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  f1              3   44[COMRAM] float 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  3   44[COMRAM] float 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6023 ;;      Params:         3       0       0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0
  6026 ;;      Totals:         3       0       0       0       0       0       0
  6027 ;;Total ram usage:        3 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_sprintf
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text17
  6037  002A3A                     __ptext17:
  6038                           	opt stack 0
  6039  002A3A                     ___ftneg:
  6040                           	opt stack 29
  6041                           
  6042                           ;incstack = 0
  6043  002A3A  502D               	movf	___ftneg@f1,w,c
  6044  002A3C  102E               	iorwf	___ftneg@f1+1,w,c
  6045  002A3E  102F               	iorwf	___ftneg@f1+2,w,c
  6046  002A40  B4D8               	btfsc	status,2,c
  6047  002A42  D006               	goto	l541
  6048  002A44  0E00               	movlw	0
  6049  002A46  1A2D               	xorwf	___ftneg@f1,f,c
  6050  002A48  0E00               	movlw	0
  6051  002A4A  1A2E               	xorwf	___ftneg@f1+1,f,c
  6052  002A4C  0E80               	movlw	128
  6053  002A4E  1A2F               	xorwf	___ftneg@f1+2,f,c
  6054  002A50                     l541:
  6055  002A50  C02D  F02D         	movff	___ftneg@f1,?___ftneg
  6056  002A54  C02E  F02E         	movff	___ftneg@f1+1,?___ftneg+1
  6057  002A58  C02F  F02F         	movff	___ftneg@f1+2,?___ftneg+2
  6058  002A5C  0012               	return		;funcret
  6059  002A5E                     __end_of___ftneg:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           wreg	equ	0xFE8
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function ___ftge *****************
  6076 ;; Defined at:
  6077 ;;		line 4 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftge.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  ff1             3   84[COMRAM] float 
  6080 ;;  ff2             3   87[COMRAM] float 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;		None               void
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6092 ;;      Params:         6       0       0       0       0       0       0
  6093 ;;      Locals:         0       0       0       0       0       0       0
  6094 ;;      Temps:          3       0       0       0       0       0       0
  6095 ;;      Totals:         9       0       0       0       0       0       0
  6096 ;;Total ram usage:        9 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_sprintf
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text18
  6106  002652                     __ptext18:
  6107                           	opt stack 0
  6108  002652                     ___ftge:
  6109                           	opt stack 29
  6110                           
  6111                           ;incstack = 0
  6112  002652  AE57               	btfss	___ftge@ff1+2,7,c
  6113  002654  D016               	goto	l2507
  6114  002656  C055  F05B         	movff	___ftge@ff1,??___ftge
  6115  00265A  C056  F05C         	movff	___ftge@ff1+1,??___ftge+1
  6116  00265E  C057  F05D         	movff	___ftge@ff1+2,??___ftge+2
  6117  002662  1E5B               	comf	??___ftge,f,c
  6118  002664  1E5C               	comf	??___ftge+1,f,c
  6119  002666  1E5D               	comf	??___ftge+2,f,c
  6120  002668  2A5B               	incf	??___ftge,f,c
  6121  00266A  0E00               	movlw	0
  6122  00266C  225C               	addwfc	??___ftge+1,f,c
  6123  00266E  225D               	addwfc	??___ftge+2,f,c
  6124  002670  0E00               	movlw	0
  6125  002672  245B               	addwf	??___ftge,w,c
  6126  002674  6E55               	movwf	___ftge@ff1,c
  6127  002676  0E00               	movlw	0
  6128  002678  205C               	addwfc	??___ftge+1,w,c
  6129  00267A  6E56               	movwf	___ftge@ff1+1,c
  6130  00267C  0E80               	movlw	128
  6131  00267E  205D               	addwfc	??___ftge+2,w,c
  6132  002680  6E57               	movwf	___ftge@ff1+2,c
  6133  002682                     l2507:
  6134  002682  AE5A               	btfss	___ftge@ff2+2,7,c
  6135  002684  D016               	goto	l2511
  6136  002686  C058  F05B         	movff	___ftge@ff2,??___ftge
  6137  00268A  C059  F05C         	movff	___ftge@ff2+1,??___ftge+1
  6138  00268E  C05A  F05D         	movff	___ftge@ff2+2,??___ftge+2
  6139  002692  1E5B               	comf	??___ftge,f,c
  6140  002694  1E5C               	comf	??___ftge+1,f,c
  6141  002696  1E5D               	comf	??___ftge+2,f,c
  6142  002698  2A5B               	incf	??___ftge,f,c
  6143  00269A  0E00               	movlw	0
  6144  00269C  225C               	addwfc	??___ftge+1,f,c
  6145  00269E  225D               	addwfc	??___ftge+2,f,c
  6146  0026A0  0E00               	movlw	0
  6147  0026A2  245B               	addwf	??___ftge,w,c
  6148  0026A4  6E58               	movwf	___ftge@ff2,c
  6149  0026A6  0E00               	movlw	0
  6150  0026A8  205C               	addwfc	??___ftge+1,w,c
  6151  0026AA  6E59               	movwf	___ftge@ff2+1,c
  6152  0026AC  0E80               	movlw	128
  6153  0026AE  205D               	addwfc	??___ftge+2,w,c
  6154  0026B0  6E5A               	movwf	___ftge@ff2+2,c
  6155  0026B2                     l2511:
  6156  0026B2  0E00               	movlw	0
  6157  0026B4  1A55               	xorwf	___ftge@ff1,f,c
  6158  0026B6  0E00               	movlw	0
  6159  0026B8  1A56               	xorwf	___ftge@ff1+1,f,c
  6160  0026BA  0E80               	movlw	128
  6161  0026BC  1A57               	xorwf	___ftge@ff1+2,f,c
  6162  0026BE  0E00               	movlw	0
  6163  0026C0  1A58               	xorwf	___ftge@ff2,f,c
  6164  0026C2  0E00               	movlw	0
  6165  0026C4  1A59               	xorwf	___ftge@ff2+1,f,c
  6166  0026C6  0E80               	movlw	128
  6167  0026C8  1A5A               	xorwf	___ftge@ff2+2,f,c
  6168  0026CA  5058               	movf	___ftge@ff2,w,c
  6169  0026CC  5C55               	subwf	___ftge@ff1,w,c
  6170  0026CE  5059               	movf	___ftge@ff2+1,w,c
  6171  0026D0  5856               	subwfb	___ftge@ff1+1,w,c
  6172  0026D2  505A               	movf	___ftge@ff2+2,w,c
  6173  0026D4  5857               	subwfb	___ftge@ff1+2,w,c
  6174  0026D6  B0D8               	btfsc	status,0,c
  6175  0026D8  D002               	goto	l2517
  6176  0026DA  90D8               	bcf	status,0,c
  6177  0026DC  0012               	return	
  6178  0026DE                     l2517:
  6179  0026DE  80D8               	bsf	status,0,c
  6180  0026E0  0012               	return	
  6181  0026E2                     __end_of___ftge:
  6182                           	opt stack 0
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           wreg	equ	0xFE8
  6190                           indf2	equ	0xFDF
  6191                           postinc2	equ	0xFDE
  6192                           postdec2	equ	0xFDD
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function ___ftdiv *****************
  6198 ;; Defined at:
  6199 ;;		line 54 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  f1              3   69[COMRAM] float 
  6202 ;;  f2              3   72[COMRAM] float 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  f3              3   79[COMRAM] float 
  6205 ;;  sign            1   83[COMRAM] unsigned char 
  6206 ;;  exp             1   82[COMRAM] unsigned char 
  6207 ;;  cntr            1   78[COMRAM] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  3   69[COMRAM] float 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6217 ;;      Params:         6       0       0       0       0       0       0
  6218 ;;      Locals:         6       0       0       0       0       0       0
  6219 ;;      Temps:          3       0       0       0       0       0       0
  6220 ;;      Totals:        15       0       0       0       0       0       0
  6221 ;;Total ram usage:       15 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    1
  6224 ;; This function calls:
  6225 ;;		___ftpack
  6226 ;; This function is called by:
  6227 ;;		_sprintf
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text19
  6232  0024BE                     __ptext19:
  6233                           	opt stack 0
  6234  0024BE                     ___ftdiv:
  6235                           	opt stack 28
  6236                           
  6237                           ;incstack = 0
  6238  0024BE  C048  F04C         	movff	___ftdiv@f1+2,??___ftdiv
  6239  0024C2  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  6240  0024C4  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  6241  0024C6  3447               	rlcf	___ftdiv@f1+1,w,c
  6242  0024C8  364C               	rlcf	??___ftdiv& (0+255),f,c
  6243  0024CA  E301               	bnc	u2411
  6244  0024CC  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6245  0024CE                     u2411:
  6246  0024CE  504C               	movf	??___ftdiv,w,c
  6247  0024D0  6E53               	movwf	___ftdiv@exp,c
  6248  0024D2  5053               	movf	___ftdiv@exp,w,c
  6249  0024D4  A4D8               	btfss	status,2,c
  6250  0024D6  D007               	goto	l2455
  6251  0024D8  0E00               	movlw	0
  6252  0024DA  6E46               	movwf	?___ftdiv,c
  6253  0024DC  0E00               	movlw	0
  6254  0024DE  6E47               	movwf	?___ftdiv+1,c
  6255  0024E0  0E00               	movlw	0
  6256  0024E2  6E48               	movwf	?___ftdiv+2,c
  6257  0024E4  0012               	return	
  6258  0024E6                     l2455:
  6259  0024E6  C04B  F04C         	movff	___ftdiv@f2+2,??___ftdiv
  6260  0024EA  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  6261  0024EC  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  6262  0024EE  344A               	rlcf	___ftdiv@f2+1,w,c
  6263  0024F0  364C               	rlcf	??___ftdiv& (0+255),f,c
  6264  0024F2  E301               	bnc	u2431
  6265  0024F4  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6266  0024F6                     u2431:
  6267  0024F6  504C               	movf	??___ftdiv,w,c
  6268  0024F8  6E54               	movwf	___ftdiv@sign,c
  6269  0024FA  5054               	movf	___ftdiv@sign,w,c
  6270  0024FC  A4D8               	btfss	status,2,c
  6271  0024FE  D007               	goto	l2461
  6272  002500  0E00               	movlw	0
  6273  002502  6E46               	movwf	?___ftdiv,c
  6274  002504  0E00               	movlw	0
  6275  002506  6E47               	movwf	?___ftdiv+1,c
  6276  002508  0E00               	movlw	0
  6277  00250A  6E48               	movwf	?___ftdiv+2,c
  6278  00250C  0012               	return	
  6279  00250E                     l2461:
  6280  00250E  0E00               	movlw	0
  6281  002510  6E50               	movwf	___ftdiv@f3,c
  6282  002512  0E00               	movlw	0
  6283  002514  6E51               	movwf	___ftdiv@f3+1,c
  6284  002516  0E00               	movlw	0
  6285  002518  6E52               	movwf	___ftdiv@f3+2,c
  6286  00251A  5054               	movf	___ftdiv@sign,w,c
  6287  00251C  0F89               	addlw	137
  6288  00251E  5E53               	subwf	___ftdiv@exp,f,c
  6289  002520  C048  F054         	movff	___ftdiv@f1+2,___ftdiv@sign
  6290  002524  504B               	movf	___ftdiv@f2+2,w,c
  6291  002526  1A54               	xorwf	___ftdiv@sign,f,c
  6292  002528  0E80               	movlw	128
  6293  00252A  1654               	andwf	___ftdiv@sign,f,c
  6294  00252C  8E47               	bsf	___ftdiv@f1+1,7,c
  6295  00252E  0EFF               	movlw	255
  6296  002530  1646               	andwf	___ftdiv@f1,f,c
  6297  002532  0EFF               	movlw	255
  6298  002534  1647               	andwf	___ftdiv@f1+1,f,c
  6299  002536  0E00               	movlw	0
  6300  002538  1648               	andwf	___ftdiv@f1+2,f,c
  6301  00253A  8E4A               	bsf	___ftdiv@f2+1,7,c
  6302  00253C  0EFF               	movlw	255
  6303  00253E  1649               	andwf	___ftdiv@f2,f,c
  6304  002540  0EFF               	movlw	255
  6305  002542  164A               	andwf	___ftdiv@f2+1,f,c
  6306  002544  0E00               	movlw	0
  6307  002546  164B               	andwf	___ftdiv@f2+2,f,c
  6308  002548  0E18               	movlw	24
  6309  00254A  6E4F               	movwf	___ftdiv@cntr,c
  6310  00254C                     l2481:
  6311  00254C  90D8               	bcf	status,0,c
  6312  00254E  3650               	rlcf	___ftdiv@f3,f,c
  6313  002550  3651               	rlcf	___ftdiv@f3+1,f,c
  6314  002552  3652               	rlcf	___ftdiv@f3+2,f,c
  6315  002554  5049               	movf	___ftdiv@f2,w,c
  6316  002556  5C46               	subwf	___ftdiv@f1,w,c
  6317  002558  504A               	movf	___ftdiv@f2+1,w,c
  6318  00255A  5847               	subwfb	___ftdiv@f1+1,w,c
  6319  00255C  504B               	movf	___ftdiv@f2+2,w,c
  6320  00255E  5848               	subwfb	___ftdiv@f1+2,w,c
  6321  002560  A0D8               	btfss	status,0,c
  6322  002562  D007               	goto	l502
  6323  002564  5049               	movf	___ftdiv@f2,w,c
  6324  002566  5E46               	subwf	___ftdiv@f1,f,c
  6325  002568  504A               	movf	___ftdiv@f2+1,w,c
  6326  00256A  5A47               	subwfb	___ftdiv@f1+1,f,c
  6327  00256C  504B               	movf	___ftdiv@f2+2,w,c
  6328  00256E  5A48               	subwfb	___ftdiv@f1+2,f,c
  6329  002570  8050               	bsf	___ftdiv@f3,0,c
  6330  002572                     l502:
  6331  002572  90D8               	bcf	status,0,c
  6332  002574  3646               	rlcf	___ftdiv@f1,f,c
  6333  002576  3647               	rlcf	___ftdiv@f1+1,f,c
  6334  002578  3648               	rlcf	___ftdiv@f1+2,f,c
  6335  00257A  2E4F               	decfsz	___ftdiv@cntr,f,c
  6336  00257C  D7E7               	goto	l2481
  6337  00257E  C050  F001         	movff	___ftdiv@f3,___ftpack@arg
  6338  002582  C051  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6339  002586  C052  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6340  00258A  C053  F004         	movff	___ftdiv@exp,___ftpack@exp
  6341  00258E  C054  F005         	movff	___ftdiv@sign,___ftpack@sign
  6342  002592  ECD2  F012         	call	___ftpack	;wreg free
  6343  002596  C001  F046         	movff	?___ftpack,?___ftdiv
  6344  00259A  C002  F047         	movff	?___ftpack+1,?___ftdiv+1
  6345  00259E  C003  F048         	movff	?___ftpack+2,?___ftdiv+2
  6346  0025A2  0012               	return	
  6347  0025A4                     __end_of___ftdiv:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           wreg	equ	0xFE8
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function ___lwtoft *****************
  6364 ;; Defined at:
  6365 ;;		line 28 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  c               2    8[COMRAM] unsigned int 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  3    8[COMRAM] float 
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6379 ;;      Params:         3       0       0       0       0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0
  6382 ;;      Totals:         3       0       0       0       0       0       0
  6383 ;;Total ram usage:        3 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    1
  6386 ;; This function calls:
  6387 ;;		___ftpack
  6388 ;; This function is called by:
  6389 ;;		_main
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text20
  6394  002A5E                     __ptext20:
  6395                           	opt stack 0
  6396  002A5E                     ___lwtoft:
  6397                           	opt stack 29
  6398                           
  6399                           ;incstack = 0
  6400  002A5E  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6401  002A62  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6402  002A66  6A03               	clrf	___ftpack@arg+2,c
  6403  002A68  0E8E               	movlw	142
  6404  002A6A  6E04               	movwf	___ftpack@exp,c
  6405  002A6C  0E00               	movlw	0
  6406  002A6E  6E05               	movwf	___ftpack@sign,c
  6407  002A70  ECD2  F012         	call	___ftpack	;wreg free
  6408  002A74  C001  F009         	movff	?___ftpack,?___lwtoft
  6409  002A78  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6410  002A7C  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6411  002A80  0012               	return	
  6412  002A82                     __end_of___lwtoft:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           wreg	equ	0xFE8
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function ___ftpack *****************
  6429 ;; Defined at:
  6430 ;;		line 62 in file "E:\Jogos\Microchip\xc8\v1.41\sources\common\float.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  arg             3    0[COMRAM] unsigned um
  6433 ;;  exp             1    3[COMRAM] unsigned char 
  6434 ;;  sign            1    4[COMRAM] unsigned char 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  3    0[COMRAM] float 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6446 ;;      Params:         5       0       0       0       0       0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0
  6448 ;;      Temps:          3       0       0       0       0       0       0
  6449 ;;      Totals:         8       0       0       0       0       0       0
  6450 ;;Total ram usage:        8 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		___ftadd
  6456 ;;		___ftdiv
  6457 ;;		___ftmul
  6458 ;;		___lltoft
  6459 ;;		___lwtoft
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text21
  6464  0025A4                     __ptext21:
  6465                           	opt stack 0
  6466  0025A4                     ___ftpack:
  6467                           	opt stack 27
  6468                           
  6469                           ;incstack = 0
  6470  0025A4  5004               	movf	___ftpack@exp,w,c
  6471  0025A6  B4D8               	btfsc	status,2,c
  6472  0025A8  D005               	goto	l1973
  6473  0025AA  5001               	movf	___ftpack@arg,w,c
  6474  0025AC  1002               	iorwf	___ftpack@arg+1,w,c
  6475  0025AE  1003               	iorwf	___ftpack@arg+2,w,c
  6476  0025B0  A4D8               	btfss	status,2,c
  6477  0025B2  D00C               	goto	l1979
  6478  0025B4                     l1973:
  6479  0025B4  0E00               	movlw	0
  6480  0025B6  6E01               	movwf	?___ftpack,c
  6481  0025B8  0E00               	movlw	0
  6482  0025BA  6E02               	movwf	?___ftpack+1,c
  6483  0025BC  0E00               	movlw	0
  6484  0025BE  6E03               	movwf	?___ftpack+2,c
  6485  0025C0  0012               	return	
  6486  0025C2                     l1977:
  6487  0025C2  2A04               	incf	___ftpack@exp,f,c
  6488  0025C4  90D8               	bcf	status,0,c
  6489  0025C6  3203               	rrcf	___ftpack@arg+2,f,c
  6490  0025C8  3202               	rrcf	___ftpack@arg+1,f,c
  6491  0025CA  3201               	rrcf	___ftpack@arg,f,c
  6492  0025CC                     l1979:
  6493  0025CC  0E00               	movlw	0
  6494  0025CE  1401               	andwf	___ftpack@arg,w,c
  6495  0025D0  6E06               	movwf	??___ftpack& (0+255),c
  6496  0025D2  0E00               	movlw	0
  6497  0025D4  1402               	andwf	___ftpack@arg+1,w,c
  6498  0025D6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6499  0025D8  0EFE               	movlw	254
  6500  0025DA  1403               	andwf	___ftpack@arg+2,w,c
  6501  0025DC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6502  0025DE  5006               	movf	??___ftpack,w,c
  6503  0025E0  1007               	iorwf	??___ftpack+1,w,c
  6504  0025E2  1008               	iorwf	??___ftpack+2,w,c
  6505  0025E4  B4D8               	btfsc	status,2,c
  6506  0025E6  D00C               	goto	l1985
  6507  0025E8  D7EC               	goto	l1977
  6508  0025EA                     l1981:
  6509  0025EA  2A04               	incf	___ftpack@exp,f,c
  6510  0025EC  0E01               	movlw	1
  6511  0025EE  2601               	addwf	___ftpack@arg,f,c
  6512  0025F0  0E00               	movlw	0
  6513  0025F2  2202               	addwfc	___ftpack@arg+1,f,c
  6514  0025F4  0E00               	movlw	0
  6515  0025F6  2203               	addwfc	___ftpack@arg+2,f,c
  6516  0025F8  90D8               	bcf	status,0,c
  6517  0025FA  3203               	rrcf	___ftpack@arg+2,f,c
  6518  0025FC  3202               	rrcf	___ftpack@arg+1,f,c
  6519  0025FE  3201               	rrcf	___ftpack@arg,f,c
  6520  002600                     l1985:
  6521  002600  0E00               	movlw	0
  6522  002602  1401               	andwf	___ftpack@arg,w,c
  6523  002604  6E06               	movwf	??___ftpack& (0+255),c
  6524  002606  0E00               	movlw	0
  6525  002608  1402               	andwf	___ftpack@arg+1,w,c
  6526  00260A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6527  00260C  0EFF               	movlw	255
  6528  00260E  1403               	andwf	___ftpack@arg+2,w,c
  6529  002610  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6530  002612  5006               	movf	??___ftpack,w,c
  6531  002614  1007               	iorwf	??___ftpack+1,w,c
  6532  002616  1008               	iorwf	??___ftpack+2,w,c
  6533  002618  B4D8               	btfsc	status,2,c
  6534  00261A  D006               	goto	l1989
  6535  00261C  D7E6               	goto	l1981
  6536  00261E                     l1987:
  6537  00261E  0604               	decf	___ftpack@exp,f,c
  6538  002620  90D8               	bcf	status,0,c
  6539  002622  3601               	rlcf	___ftpack@arg,f,c
  6540  002624  3602               	rlcf	___ftpack@arg+1,f,c
  6541  002626  3603               	rlcf	___ftpack@arg+2,f,c
  6542  002628                     l1989:
  6543  002628  BE02               	btfsc	___ftpack@arg+1,7,c
  6544  00262A  D003               	goto	l444
  6545  00262C  0E02               	movlw	2
  6546  00262E  6004               	cpfslt	___ftpack@exp,c
  6547  002630  D7F6               	goto	l1987
  6548  002632                     l444:
  6549  002632  A004               	btfss	___ftpack@exp,0,c
  6550  002634  9E02               	bcf	___ftpack@arg+1,7,c
  6551  002636  90D8               	bcf	status,0,c
  6552  002638  3204               	rrcf	___ftpack@exp,f,c
  6553  00263A  5004               	movf	___ftpack@exp,w,c
  6554  00263C  1203               	iorwf	___ftpack@arg+2,f,c
  6555  00263E  5005               	movf	___ftpack@sign,w,c
  6556  002640  A4D8               	btfss	status,2,c
  6557  002642  8E03               	bsf	___ftpack@arg+2,7,c
  6558  002644  C001  F001         	movff	___ftpack@arg,?___ftpack
  6559  002648  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6560  00264C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6561  002650  0012               	return	
  6562  002652                     __end_of___ftpack:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           wreg	equ	0xFE8
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _Print_Mensagem_Lcd *****************
  6579 ;; Defined at:
  6580 ;;		line 74 in file "main.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  mensagem        2    3[COMRAM] PTR unsigned char 
  6583 ;;		 -> STR_8(12), STR_6(12), STR_4(12), STR_2(12), 
  6584 ;;		 -> main@buf(16), 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  i               2    7[COMRAM] int 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  1    wreg      void 
  6589 ;; Registers used:
  6590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6596 ;;      Params:         2       0       0       0       0       0       0
  6597 ;;      Locals:         2       0       0       0       0       0       0
  6598 ;;      Temps:          2       0       0       0       0       0       0
  6599 ;;      Totals:         6       0       0       0       0       0       0
  6600 ;;Total ram usage:        6 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    2
  6603 ;; This function calls:
  6604 ;;		_Envia_Dado_Lcd
  6605 ;; This function is called by:
  6606 ;;		_main
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text22
  6611  0027E8                     __ptext22:
  6612                           	opt stack 0
  6613  0027E8                     _Print_Mensagem_Lcd:
  6614                           	opt stack 28
  6615                           
  6616                           ;main.c: 76: int i=0;
  6617                           
  6618                           ;incstack = 0
  6619  0027E8  0E00               	movlw	0
  6620  0027EA  6E09               	movwf	Print_Mensagem_Lcd@i+1,c
  6621  0027EC  0E00               	movlw	0
  6622  0027EE  6E08               	movwf	Print_Mensagem_Lcd@i,c
  6623                           
  6624                           ;main.c: 77: while (mensagem[i]) {
  6625  0027F0  D01A               	goto	l2627
  6626  0027F2                     l2623:
  6627                           
  6628                           ;main.c: 78: Envia_Dado_Lcd (mensagem[i]);
  6629  0027F2  5008               	movf	Print_Mensagem_Lcd@i,w,c
  6630  0027F4  2404               	addwf	Print_Mensagem_Lcd@mensagem,w,c
  6631  0027F6  6E06               	movwf	??_Print_Mensagem_Lcd& (0+255),c
  6632  0027F8  5009               	movf	Print_Mensagem_Lcd@i+1,w,c
  6633  0027FA  2005               	addwfc	Print_Mensagem_Lcd@mensagem+1,w,c
  6634  0027FC  6E07               	movwf	(??_Print_Mensagem_Lcd+1)& (0+255),c
  6635  0027FE  C006  FFF6         	movff	??_Print_Mensagem_Lcd,tblptrl
  6636  002802  C007  FFF7         	movff	??_Print_Mensagem_Lcd+1,tblptrh
  6637  002806  6AF8               	clrf	tblptru,c
  6638  002808  0E05               	movlw	(high __ramtop+-1)
  6639  00280A  64F7               	cpfsgt	tblptrh,c
  6640  00280C  D003               	bra	u2667
  6641  00280E  0008               	tblrd		*
  6642  002810  50F5               	movf	tablat,w,c
  6643  002812  D005               	bra	u2660
  6644  002814                     u2667:
  6645  002814  CFF6 FFE9          	movff	tblptrl,fsr0l
  6646  002818  CFF7 FFEA          	movff	tblptrh,fsr0h
  6647  00281C  50EF               	movf	indf0,w,c
  6648  00281E                     u2660:
  6649  00281E  EC41  F015         	call	_Envia_Dado_Lcd
  6650                           
  6651                           ;main.c: 79: i++;
  6652  002822  4A08               	infsnz	Print_Mensagem_Lcd@i,f,c
  6653  002824  2A09               	incf	Print_Mensagem_Lcd@i+1,f,c
  6654  002826                     l2627:
  6655  002826  5008               	movf	Print_Mensagem_Lcd@i,w,c
  6656  002828  2404               	addwf	Print_Mensagem_Lcd@mensagem,w,c
  6657  00282A  6E06               	movwf	??_Print_Mensagem_Lcd& (0+255),c
  6658  00282C  5009               	movf	Print_Mensagem_Lcd@i+1,w,c
  6659  00282E  2005               	addwfc	Print_Mensagem_Lcd@mensagem+1,w,c
  6660  002830  6E07               	movwf	(??_Print_Mensagem_Lcd+1)& (0+255),c
  6661  002832  C006  FFF6         	movff	??_Print_Mensagem_Lcd,tblptrl
  6662  002836  C007  FFF7         	movff	??_Print_Mensagem_Lcd+1,tblptrh
  6663  00283A  6AF8               	clrf	tblptru,c
  6664  00283C  0E05               	movlw	(high __ramtop+-1)
  6665  00283E  64F7               	cpfsgt	tblptrh,c
  6666  002840  D003               	bra	u2677
  6667  002842  0008               	tblrd		*
  6668  002844  50F5               	movf	tablat,w,c
  6669  002846  D005               	bra	u2670
  6670  002848                     u2677:
  6671  002848  CFF6 FFE9          	movff	tblptrl,fsr0l
  6672  00284C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6673  002850  50EF               	movf	indf0,w,c
  6674  002852                     u2670:
  6675  002852  0900               	iorlw	0
  6676  002854  B4D8               	btfsc	status,2,c
  6677  002856  0012               	return	
  6678  002858  D7CC               	goto	l2623
  6679  00285A                     __end_of_Print_Mensagem_Lcd:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           indf0	equ	0xFEF
  6688                           fsr0h	equ	0xFEA
  6689                           fsr0l	equ	0xFE9
  6690                           wreg	equ	0xFE8
  6691                           indf2	equ	0xFDF
  6692                           postinc2	equ	0xFDE
  6693                           postdec2	equ	0xFDD
  6694                           fsr2h	equ	0xFDA
  6695                           fsr2l	equ	0xFD9
  6696                           status	equ	0xFD8
  6697                           
  6698 ;; *************** function _Envia_Dado_Lcd *****************
  6699 ;; Defined at:
  6700 ;;		line 45 in file "main.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  dado            1    wreg     unsigned char 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  dado            1    2[COMRAM] unsigned char 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6714 ;;      Params:         0       0       0       0       0       0       0
  6715 ;;      Locals:         1       0       0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0
  6717 ;;      Totals:         1       0       0       0       0       0       0
  6718 ;;Total ram usage:        1 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    1
  6721 ;; This function calls:
  6722 ;;		_Delay_LCD
  6723 ;; This function is called by:
  6724 ;;		_Print_Mensagem_Lcd
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text23
  6729  002A82                     __ptext23:
  6730                           	opt stack 0
  6731  002A82                     _Envia_Dado_Lcd:
  6732                           	opt stack 28
  6733                           
  6734                           ;incstack = 0
  6735                           ;Envia_Dado_Lcd@dado stored from wreg
  6736  002A82  6E03               	movwf	Envia_Dado_Lcd@dado,c
  6737                           
  6738                           ;main.c: 47: PORTCbits.RC1=0;
  6739  002A84  9282               	bcf	3970,1,c	;volatile
  6740                           
  6741                           ;main.c: 48: PORTCbits.RC0=1;
  6742  002A86  8082               	bsf	3970,0,c	;volatile
  6743                           
  6744                           ;main.c: 50: PORTCbits.RC1=1;
  6745  002A88  8282               	bsf	3970,1,c	;volatile
  6746                           
  6747                           ;main.c: 51: PORTD=dado;
  6748  002A8A  C003  FF83         	movff	Envia_Dado_Lcd@dado,3971	;volatile
  6749                           
  6750                           ;main.c: 52: PORTCbits.RC1=0;
  6751  002A8E  9282               	bcf	3970,1,c	;volatile
  6752                           
  6753                           ;main.c: 54: PORTCbits.RC1=1;
  6754  002A90  8282               	bsf	3970,1,c	;volatile
  6755                           
  6756                           ;main.c: 55: dado=dado<<4;
  6757  002A92  3803               	swapf	Envia_Dado_Lcd@dado,w,c
  6758  002A94  0BF0               	andlw	240
  6759  002A96  6E03               	movwf	Envia_Dado_Lcd@dado,c
  6760                           
  6761                           ;main.c: 56: PORTD=dado;
  6762  002A98  C003  FF83         	movff	Envia_Dado_Lcd@dado,3971	;volatile
  6763                           
  6764                           ;main.c: 57: PORTCbits.RC1=0;
  6765  002A9C  9282               	bcf	3970,1,c	;volatile
  6766                           
  6767                           ;main.c: 59: Delay_LCD();
  6768  002A9E  EC81  F015         	call	_Delay_LCD	;wreg free
  6769  002AA2  0012               	return		;funcret
  6770  002AA4                     __end_of_Envia_Dado_Lcd:
  6771                           	opt stack 0
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           indf0	equ	0xFEF
  6779                           fsr0h	equ	0xFEA
  6780                           fsr0l	equ	0xFE9
  6781                           wreg	equ	0xFE8
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _Inicializa_Lcd *****************
  6790 ;; Defined at:
  6791 ;;		line 62 in file "main.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6805 ;;      Params:         0       0       0       0       0       0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0
  6808 ;;      Totals:         0       0       0       0       0       0       0
  6809 ;;Total ram usage:        0 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    2
  6812 ;; This function calls:
  6813 ;;		_Delay_inicializacao_LCD
  6814 ;;		_Envia_Comando_Lcd
  6815 ;; This function is called by:
  6816 ;;		_main
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text24
  6821  002AE4                     __ptext24:
  6822                           	opt stack 0
  6823  002AE4                     _Inicializa_Lcd:
  6824                           	opt stack 28
  6825                           
  6826                           ;main.c: 64: Delay_inicializacao_LCD ();
  6827                           
  6828                           ;incstack = 0
  6829  002AE4  EC90  F015         	call	_Delay_inicializacao_LCD	;wreg free
  6830                           
  6831                           ;main.c: 65: Envia_Comando_Lcd (0b000000010);
  6832  002AE8  0E02               	movlw	2
  6833  002AEA  EC52  F015         	call	_Envia_Comando_Lcd
  6834                           
  6835                           ;main.c: 66: Envia_Comando_Lcd (0b001001000);
  6836  002AEE  0E48               	movlw	72
  6837  002AF0  EC52  F015         	call	_Envia_Comando_Lcd
  6838                           
  6839                           ;main.c: 67: Envia_Comando_Lcd (0b000001110);
  6840  002AF4  0E0E               	movlw	14
  6841  002AF6  EC52  F015         	call	_Envia_Comando_Lcd
  6842                           
  6843                           ;main.c: 68: Envia_Comando_Lcd (0b000000001);
  6844  002AFA  0E01               	movlw	1
  6845  002AFC  EC52  F015         	call	_Envia_Comando_Lcd
  6846  002B00  0012               	return		;funcret
  6847  002B02                     __end_of_Inicializa_Lcd:
  6848                           	opt stack 0
  6849                           tblptru	equ	0xFF8
  6850                           tblptrh	equ	0xFF7
  6851                           tblptrl	equ	0xFF6
  6852                           tablat	equ	0xFF5
  6853                           prodh	equ	0xFF4
  6854                           prodl	equ	0xFF3
  6855                           indf0	equ	0xFEF
  6856                           fsr0h	equ	0xFEA
  6857                           fsr0l	equ	0xFE9
  6858                           wreg	equ	0xFE8
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function _Envia_Comando_Lcd *****************
  6867 ;; Defined at:
  6868 ;;		line 28 in file "main.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  comando         1    wreg     unsigned char 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  comando         1    2[COMRAM] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6882 ;;      Params:         0       0       0       0       0       0       0
  6883 ;;      Locals:         1       0       0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0
  6885 ;;      Totals:         1       0       0       0       0       0       0
  6886 ;;Total ram usage:        1 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    1
  6889 ;; This function calls:
  6890 ;;		_Delay_LCD
  6891 ;; This function is called by:
  6892 ;;		_Inicializa_Lcd
  6893 ;;		_main
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text25
  6898  002AA4                     __ptext25:
  6899                           	opt stack 0
  6900  002AA4                     _Envia_Comando_Lcd:
  6901                           	opt stack 28
  6902                           
  6903                           ;incstack = 0
  6904                           ;Envia_Comando_Lcd@comando stored from wreg
  6905  002AA4  6E03               	movwf	Envia_Comando_Lcd@comando,c
  6906                           
  6907                           ;main.c: 30: PORTCbits.RC1=0;
  6908  002AA6  9282               	bcf	3970,1,c	;volatile
  6909                           
  6910                           ;main.c: 31: PORTCbits.RC0=0;
  6911  002AA8  9082               	bcf	3970,0,c	;volatile
  6912                           
  6913                           ;main.c: 33: PORTCbits.RC1=1;
  6914  002AAA  8282               	bsf	3970,1,c	;volatile
  6915                           
  6916                           ;main.c: 34: PORTD=comando;
  6917  002AAC  C003  FF83         	movff	Envia_Comando_Lcd@comando,3971	;volatile
  6918                           
  6919                           ;main.c: 35: PORTCbits.RC1=0;
  6920  002AB0  9282               	bcf	3970,1,c	;volatile
  6921                           
  6922                           ;main.c: 37: PORTCbits.RC1=1;
  6923  002AB2  8282               	bsf	3970,1,c	;volatile
  6924                           
  6925                           ;main.c: 38: comando = comando<<4;
  6926  002AB4  3803               	swapf	Envia_Comando_Lcd@comando,w,c
  6927  002AB6  0BF0               	andlw	240
  6928  002AB8  6E03               	movwf	Envia_Comando_Lcd@comando,c
  6929                           
  6930                           ;main.c: 39: PORTD = comando;
  6931  002ABA  C003  FF83         	movff	Envia_Comando_Lcd@comando,3971	;volatile
  6932                           
  6933                           ;main.c: 40: PORTCbits.RC1=0;
  6934  002ABE  9282               	bcf	3970,1,c	;volatile
  6935                           
  6936                           ;main.c: 42: Delay_LCD();
  6937  002AC0  EC81  F015         	call	_Delay_LCD	;wreg free
  6938  002AC4  0012               	return		;funcret
  6939  002AC6                     __end_of_Envia_Comando_Lcd:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           indf0	equ	0xFEF
  6948                           fsr0h	equ	0xFEA
  6949                           fsr0l	equ	0xFE9
  6950                           wreg	equ	0xFE8
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _Delay_LCD *****************
  6959 ;; Defined at:
  6960 ;;		line 22 in file "main.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  i               2    0[COMRAM] int 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2, status,0
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6974 ;;      Params:         0       0       0       0       0       0       0
  6975 ;;      Locals:         2       0       0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0
  6977 ;;      Totals:         2       0       0       0       0       0       0
  6978 ;;Total ram usage:        2 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_Envia_Comando_Lcd
  6984 ;;		_Envia_Dado_Lcd
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text26
  6989  002B02                     __ptext26:
  6990                           	opt stack 0
  6991  002B02                     _Delay_LCD:
  6992                           	opt stack 28
  6993                           
  6994                           ;main.c: 24: int i;
  6995                           ;main.c: 25: for (i=0;i<400;i++){}
  6996                           
  6997                           ;incstack = 0
  6998  002B02  0E00               	movlw	0
  6999  002B04  6E02               	movwf	Delay_LCD@i+1,c
  7000  002B06  0E00               	movlw	0
  7001  002B08  6E01               	movwf	Delay_LCD@i,c
  7002  002B0A                     l2007:
  7003  002B0A  BE02               	btfsc	Delay_LCD@i+1,7,c
  7004  002B0C  D006               	goto	l2011
  7005  002B0E  0E90               	movlw	144
  7006  002B10  5C01               	subwf	Delay_LCD@i,w,c
  7007  002B12  0E01               	movlw	1
  7008  002B14  5802               	subwfb	Delay_LCD@i+1,w,c
  7009  002B16  B0D8               	btfsc	status,0,c
  7010  002B18  0012               	return	
  7011  002B1A                     l2011:
  7012  002B1A  4A01               	infsnz	Delay_LCD@i,f,c
  7013  002B1C  2A02               	incf	Delay_LCD@i+1,f,c
  7014  002B1E  D7F5               	goto	l2007
  7015  002B20                     __end_of_Delay_LCD:
  7016                           	opt stack 0
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           indf0	equ	0xFEF
  7024                           fsr0h	equ	0xFEA
  7025                           fsr0l	equ	0xFE9
  7026                           wreg	equ	0xFE8
  7027                           indf2	equ	0xFDF
  7028                           postinc2	equ	0xFDE
  7029                           postdec2	equ	0xFDD
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _Delay_inicializacao_LCD *****************
  7035 ;; Defined at:
  7036 ;;		line 83 in file "main.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  i               2    0[COMRAM] int 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg, status,2, status,0
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7050 ;;      Params:         0       0       0       0       0       0       0
  7051 ;;      Locals:         2       0       0       0       0       0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0
  7053 ;;      Totals:         2       0       0       0       0       0       0
  7054 ;;Total ram usage:        2 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; This function calls:
  7057 ;;		Nothing
  7058 ;; This function is called by:
  7059 ;;		_Inicializa_Lcd
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text27
  7064  002B20                     __ptext27:
  7065                           	opt stack 0
  7066  002B20                     _Delay_inicializacao_LCD:
  7067                           	opt stack 29
  7068                           
  7069                           ;main.c: 85: int i;
  7070                           ;main.c: 86: for (i=0;i<4000;i++) {}
  7071                           
  7072                           ;incstack = 0
  7073  002B20  0E00               	movlw	0
  7074  002B22  6E02               	movwf	Delay_inicializacao_LCD@i+1,c
  7075  002B24  0E00               	movlw	0
  7076  002B26  6E01               	movwf	Delay_inicializacao_LCD@i,c
  7077  002B28                     l2253:
  7078  002B28  BE02               	btfsc	Delay_inicializacao_LCD@i+1,7,c
  7079  002B2A  D006               	goto	l2257
  7080  002B2C  0EA0               	movlw	160
  7081  002B2E  5C01               	subwf	Delay_inicializacao_LCD@i,w,c
  7082  002B30  0E0F               	movlw	15
  7083  002B32  5802               	subwfb	Delay_inicializacao_LCD@i+1,w,c
  7084  002B34  B0D8               	btfsc	status,0,c
  7085  002B36  0012               	return	
  7086  002B38                     l2257:
  7087  002B38  4A01               	infsnz	Delay_inicializacao_LCD@i,f,c
  7088  002B3A  2A02               	incf	Delay_inicializacao_LCD@i+1,f,c
  7089  002B3C  D7F5               	goto	l2253
  7090  002B3E                     __end_of_Delay_inicializacao_LCD:
  7091                           	opt stack 0
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           indf0	equ	0xFEF
  7099                           fsr0h	equ	0xFEA
  7100                           fsr0l	equ	0xFE9
  7101                           wreg	equ	0xFE8
  7102                           indf2	equ	0xFDF
  7103                           postinc2	equ	0xFDE
  7104                           postdec2	equ	0xFDD
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _ADC_read *****************
  7110 ;; Defined at:
  7111 ;;		line 143 in file "main.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  channel         2    0[COMRAM] int 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;  adval           2    4[COMRAM] unsigned int 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  2    0[COMRAM] unsigned int 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7125 ;;      Params:         2       0       0       0       0       0       0
  7126 ;;      Locals:         2       0       0       0       0       0       0
  7127 ;;      Temps:          2       0       0       0       0       0       0
  7128 ;;      Totals:         6       0       0       0       0       0       0
  7129 ;;Total ram usage:        6 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text28
  7139  00298C                     __ptext28:
  7140                           	opt stack 0
  7141  00298C                     _ADC_read:
  7142                           	opt stack 30
  7143                           
  7144                           ;main.c: 144: ADFM = 1;
  7145                           
  7146                           ;incstack = 0
  7147  00298C  8EC0               	bsf	4032,7,c	;volatile
  7148                           
  7149                           ;main.c: 145: ADCS0 = 0;
  7150  00298E  90C0               	bcf	4032,0,c	;volatile
  7151                           
  7152                           ;main.c: 146: ADCS1 = 0;
  7153  002990  92C0               	bcf	4032,1,c	;volatile
  7154                           
  7155                           ;main.c: 147: ADCS2 = 1;
  7156  002992  84C0               	bsf	4032,2,c	;volatile
  7157                           
  7158                           ;main.c: 148: ADCON0bits.CHS = channel;
  7159  002994  C001  F003         	movff	ADC_read@channel,??_ADC_read
  7160  002998  4603               	rlncf	??_ADC_read,f,c
  7161  00299A  4603               	rlncf	??_ADC_read,f,c
  7162  00299C  50C2               	movf	4034,w,c	;volatile
  7163  00299E  1803               	xorwf	??_ADC_read,w,c
  7164  0029A0  0BC3               	andlw	-61
  7165  0029A2  1803               	xorwf	??_ADC_read,w,c
  7166  0029A4  6EC2               	movwf	4034,c	;volatile
  7167                           
  7168                           ;main.c: 149: ADON = 1;
  7169  0029A6  80C2               	bsf	4034,0,c	;volatile
  7170                           
  7171                           ;main.c: 150: _delay((unsigned long)((1)*(4000000/4000.0)));
  7172  0029A8  0EC8               	movlw	200
  7173  0029AA                     u3337:
  7174  0029AA  F000 F000          	nop2	
  7175  0029AE  2EE8               	decfsz	wreg,f,c
  7176  0029B0  D7FC               	bra	u3337
  7177                           
  7178                           ;main.c: 151: GO_DONE = 1;
  7179  0029B2  82C2               	bsf	4034,1,c	;volatile
  7180  0029B4                     l70:
  7181  0029B4  B2C2               	btfsc	4034,1,c	;volatile
  7182  0029B6  D7FE               	goto	l70
  7183                           
  7184                           ;main.c: 153: unsigned int adval = (ADRESH << 8) + ADRESL;
  7185  0029B8  50C4               	movf	4036,w,c	;volatile
  7186  0029BA  6E04               	movwf	(??_ADC_read+1)& (0+255),c
  7187  0029BC  6A03               	clrf	??_ADC_read& (0+255),c
  7188  0029BE  50C3               	movf	4035,w,c	;volatile
  7189  0029C0  2403               	addwf	??_ADC_read,w,c
  7190  0029C2  6E05               	movwf	ADC_read@adval,c
  7191  0029C4  0E00               	movlw	0
  7192  0029C6  2004               	addwfc	??_ADC_read+1,w,c
  7193  0029C8  6E06               	movwf	ADC_read@adval+1,c
  7194                           
  7195                           ;main.c: 154: return adval;
  7196  0029CA  C005  F001         	movff	ADC_read@adval,?_ADC_read
  7197  0029CE  C006  F002         	movff	ADC_read@adval+1,?_ADC_read+1
  7198  0029D2  0012               	return	
  7199  0029D4                     __end_of_ADC_read:
  7200                           	opt stack 0
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           indf0	equ	0xFEF
  7208                           fsr0h	equ	0xFEA
  7209                           fsr0l	equ	0xFE9
  7210                           wreg	equ	0xFE8
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           tblptru	equ	0xFF8
  7218                           tblptrh	equ	0xFF7
  7219                           tblptrl	equ	0xFF6
  7220                           tablat	equ	0xFF5
  7221                           prodh	equ	0xFF4
  7222                           prodl	equ	0xFF3
  7223                           indf0	equ	0xFEF
  7224                           fsr0h	equ	0xFEA
  7225                           fsr0l	equ	0xFE9
  7226                           wreg	equ	0xFE8
  7227                           indf2	equ	0xFDF
  7228                           postinc2	equ	0xFDE
  7229                           postdec2	equ	0xFDD
  7230                           fsr2h	equ	0xFDA
  7231                           fsr2l	equ	0xFD9
  7232                           status	equ	0xFD8
  7233                           
  7234                           	psect	rparam
  7235  0000                     tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           indf0	equ	0xFEF
  7242                           fsr0h	equ	0xFEA
  7243                           fsr0l	equ	0xFE9
  7244                           wreg	equ	0xFE8
  7245                           indf2	equ	0xFDF
  7246                           postinc2	equ	0xFDE
  7247                           postdec2	equ	0xFDD
  7248                           fsr2h	equ	0xFDA
  7249                           fsr2l	equ	0xFD9
  7250                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     67      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_5(CODE[5]), STR_3(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Print_Mensagem_Lcd@mensagem	PTR unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[12]), STR_6(CODE[12]), STR_4(CODE[12]), STR_2(CODE[12]), 
		 -> main@buf(BANK0[16]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___fttol->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    ___lwtoft->___ftpack
    _Print_Mensagem_Lcd->_Envia_Dado_Lcd
    _Envia_Dado_Lcd->_Delay_LCD
    _Inicializa_Lcd->_Envia_Comando_Lcd
    _Envia_Comando_Lcd->_Delay_LCD

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   64098
                                             93 COMRAM     2     2      0
                                             39 BANK0     28    28      0
                           _ADC_read
                  _Envia_Comando_Lcd
                     _Inicializa_Lcd
                 _Print_Mensagem_Lcd
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    40      7   54798
                                              0 BANK0     39    32      7
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11333
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11135
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5225
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1708
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2370
                                             35 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     927
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     828
                                             20 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4116
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3819
                                             72 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             44 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                             84 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2619
                                             69 COMRAM    15     9      6
                           ___ftpack
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2387
                                              8 COMRAM     3     0      3
                           _ADC_read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Print_Mensagem_Lcd                                   6     4      2     715
                                              3 COMRAM     6     4      2
                     _Envia_Dado_Lcd
 ---------------------------------------------------------------------------------
 (2) _Envia_Dado_Lcd                                       1     1      0     113
                                              2 COMRAM     1     1      0
                          _Delay_LCD
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Lcd                                       0     0      0     159
            _Delay_inicializacao_LCD
                  _Envia_Comando_Lcd
 ---------------------------------------------------------------------------------
 (2) _Envia_Comando_Lcd                                    1     1      0     113
                                              2 COMRAM     1     1      0
                          _Delay_LCD
 ---------------------------------------------------------------------------------
 (3) _Delay_LCD                                            2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Delay_inicializacao_LCD                              2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             6     4      2     301
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_read
   _Envia_Comando_Lcd
     _Delay_LCD
   _Inicializa_Lcd
     _Delay_inicializacao_LCD
     _Envia_Comando_Lcd
       _Delay_LCD
   _Print_Mensagem_Lcd
     _Envia_Dado_Lcd
       _Delay_LCD
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     _ADC_read (ARG)
     ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     43      43       5       41.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Aug 31 19:33:06 2020

                              l70 29B4                      ___awdiv@sign 000C  
             ___wmul@multiplicand 0011                      ___ftadd@exp1 0054  
                    ___ftadd@exp2 0053                      ___ftadd@sign 0052  
                             l130 0954                               l131 0958  
                             l132 0E66                               l136 09C6  
                             l146 0CCC                               l412 22C4  
                             l502 2572                               l510 2136  
                             l159 0F5C                               l601 291E  
                             l187 136A                               l444 2632  
                             l516 219C                               l541 2A50  
                             l509 210E                               l471 1F3E  
                             l482 1FEE                               l491 200A  
                             l467 1F14                               l591 27D6  
                    ___awmod@sign 0006                               wreg 000FE8  
                     _sprintf$905 006D                      ___ftdiv@cntr 004F  
                    ___ftdiv@sign 0054                              l2011 2B1A  
                            l2007 2B0A                              l2103 2326  
                            l2201 2890                              l2121 2368  
                            l2051 1F7C                              l2035 1F4C  
                            l2203 2894                              l2211 28B2  
                            l2131 2390                              l2061 1FB2  
                            l2029 1F22                              l2117 2358  
                            l2071 1FE6                              l2063 1FBA  
                            l2215 28C0                              l2207 28A8  
                            l2127 2380                              l2311 190C  
                            l2303 17E0                              l3007 19E8  
                            l2057 1F9E                              l2401 21EA  
                            l2161 2724                              l2153 2706  
                            l2059 1FA8                              l2171 2744  
                            l2163 2728                              l2147 26F6  
                            l2253 2B28                              l2077 2026  
                            l2069 1FDC                              l2317 19B0  
                            l2511 26B2                              l2087 2056  
                            l2423 225C                              l2415 222C  
                            l2159 271C                              l2175 274E  
                            l2191 286E                              l2271 1DD0  
                            l2257 2B38                              l2601 28EC  
                            l2345 20D4                              l2097 22FE  
                            l2329 2ADC                              l2507 2682  
                            l2531 23F6                              l2611 2936  
                            l2435 228A                              l2339 20A8  
                            l2179 275C                              l2195 287A  
                            l2461 250E                              l2517 26DE  
                            l2605 2910                              l2613 2942  
                            l2445 22B2                              l2293 1718  
                            l2623 27F2                              l2455 24E6  
                            l2447 22BE                              l2439 229A  
                            l2375 2162                              l2199 2888  
                            l2279 1E90                              l2481 254C  
                            l2561 2490                              l2553 246C  
                            l2385 218A                              l2801 0DD0  
                            l2721 0938                              l2627 2826  
                            l2563 2496                              l2395 21CC  
                            l2387 2196                              l2379 2172  
                            l2299 17BC                              l2811 0DFE  
                            l2723 094C                              l2549 245C  
                            l2581 2798                              l2813 0E06  
                            l2717 0912                              l2709 08AA  
                            l2661 0708                              l2653 06D6  
                            l2567 24AC                              l2559 2484  
                            l2911 127C                              l2823 0E5E  
                            l2735 09AE                              l2727 0974  
                            l2671 076A                              l2647 06BE  
                            l2577 2788                              l2921 131E  
                            l2905 1248                              l2833 0EBC  
                            l2817 0E14                              l2753 0B38  
                            l2729 0994                              l2665 0744  
                            l2499 29EA                              l2579 2794  
                            l2747 0AA8                              l2739 09CA  
                            l2683 07B6                              l2675 0770  
                            l2667 075A                              l1981 25EA  
                            l1973 25B4                              l2589 27C8  
                            l2597 28DC                              l2941 139E  
                            l2933 136E                              l2909 1274  
                            l2853 0FFA                              l2845 0F02  
                            l2829 0E96                              l2861 1074  
                            l2765 0BD8                              l2693 07FC  
                            l2677 079A                              l2599 28E8  
                            l2927 1338                              l2919 1310  
                            l2863 108A                              l2847 0F2C  
                            l2791 0D9C                              l2759 0BA6  
                            l1985 2600                              l1977 25C2  
                            l2945 13F0                              l2929 134C  
                            l2873 1112                              l2865 10BA  
                            l2857 1036                              l2793 0DAA  
                            l2785 0CFC                              l1987 261E  
                            l1979 25CC                              l2971 1532  
                            l2963 14FE                              l2955 14D6  
                            l2891 11FC                              l2867 10D0  
                            l1989 2628                              l2957 14E4  
                            l2893 1202                              l2877 1138  
                            l2965 150C                              l2975 155A  
                            l2887 1196                              l2799 0DC4  
                            l2985 15B8                              l2979 158A  
                            l2987 15D6                              _ADFM 007E07  
                            _ADON 007E10                              STR_1 06A7  
                            STR_2 0677                              STR_3 06A7  
                            STR_4 0683                              STR_5 06A7  
                            STR_6 068F                              STR_7 06A7  
                            STR_8 069B                              u2411 24CE  
                            u2251 208C                              u2431 24F6  
                            u2511 23DA                              u2271 20B8  
                            u2530 2414                              u3307 1BBE  
                            u3317 1C1A                              u3190 1362  
                            u1751 1EE0                              u2535 240C  
                            u3327 1C76                              u3337 29AA  
                            u1761 1EF4                              u2660 281E  
                            u2670 2852                              u1961 22E6  
                            u3297 1B62                              u2770 0842  
                            u2667 2814                              u2677 2848  
                            u1981 230E                              u2870 09BE  
                            u2775 0836                    _Inicializa_Lcd 2AE4  
                            _main 19D4                      ___ftpack@arg 0001  
                    ___ftpack@exp 0004                              fsr0h 000FEA  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr2l 000FD9                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                __end_of_ADC_read 29D4                      ___ftmul@cntr 003D  
                    ___param_bank 000000                      ___ftmul@sign 003E  
                   ADC_read@adval 0005                      ___fttol@exp1 0023  
                    ___fttol@lval 001F                             _ADCS0 007E00  
                           _ADCS1 007E01                             _ADCS2 007E02  
                           ?_main 0001                   __end_of___awdiv 2766  
                 __end_of___ftadd 207C                   __end_of___awmod 28CA  
                 __end_of___ftdiv 25A4                   __end_of___ftneg 2A5E  
                 __end_of___lldiv 27E8                   __end_of___ftmul 23CA  
                 ___awdiv@divisor 0009                   __end_of___llmod 2930  
                 __end_of___ftsub 2A14                   __end_of___fttol 24BE  
                 ___awdiv@counter 000B                             _PORTD 000F83  
                           _TRISC 000F94                             _TRISD 000F95  
                    ___lltoft@exp 002C                 _Envia_Comando_Lcd 2AA4  
                 __end_of_dpowers 0629            __end_of_Inicializa_Lcd 2B02  
                           _scale 15E4                   __end_of_isdigit 2AE4  
                   ___ftpack@sign 0005                ?_Envia_Comando_Lcd 0001  
                           tablat 000FF5           _Delay_inicializacao_LCD 2B20  
                           status 000FD8                   __end_of_sprintf 15E4  
             ??_Envia_Comando_Lcd 0003                   __initialization 2B3E  
                    __end_of_main 1C8A                __size_of_Delay_LCD 001E  
                          ??_main 005E                     ___fttol@sign1 001E  
                   __activetblptr 000002              __size_of__tdiv_to_l_ 0132  
       __end_of_Envia_Comando_Lcd 2AC6                   ?_Inicializa_Lcd 0001  
                ___llmod@dividend 0001                            ?_scale 003F  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                ___awdiv@dividend 0007                  __end_of___ftpack 2652  
                __end_of___lltoft 298C                  __end_of___lwtoft 2A82  
      __end_of_Print_Mensagem_Lcd 285A                  __end_of__powers_ 0650  
                          ___ftge 2652          Envia_Comando_Lcd@comando 0003  
                          ___wmul 2A14                         ??___awdiv 000B  
                       ??___ftadd 004F                         ??___awmod 0005  
                       ??___ftdiv 004C                         ??___ftneg 0030  
                       ??___lldiv 0009                         ??___ftmul 0036  
                       ??___llmod 0009                         ??___ftsub 005B  
                       ??___fttol 0019                            _fround 1C8A  
                ___awdiv@quotient 000D                   ___awmod@divisor 0003  
                 ___awmod@counter 0005             ___ftmul@f3_as_product 003A  
                       ??_isdigit 0001               Print_Mensagem_Lcd@i 0008  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ?_ADC_read 0001         ??_Delay_inicializacao_LCD 0001  
                       ??_sprintf 0067                 __end_of_Delay_LCD 2B20  
                ??_Envia_Dado_Lcd 0003                        __accesstop 0060  
         __end_of__initialization 2B3E                        ___ftadd@f1 0049  
                      ___ftadd@f2 004C                        ___ftge@ff1 0055  
                      ___ftge@ff2 0058                     ___rparam_used 000001  
                      ___ftdiv@f1 0046                        ___ftdiv@f2 0049  
                      ___ftdiv@f3 0050                        ___ftneg@f1 002D  
                      ___ftmul@f1 0030                        ___ftmul@f2 0033  
                      ___ftsub@f1 0055                        ___ftsub@f2 0058  
                      ___fttol@f1 0015                    __pcstackCOMRAM 0001  
                      ___lltoft@c 0024                     __end_of_scale 19D4  
                      ___lwtoft@c 0009                        __div_to_l_ 21AE  
      __size_of_Envia_Comando_Lcd 0022                   ADC_read@channel 0001  
                      ??_ADC_read 0003                   __div_to_l_@exp1 000C  
                 __div_to_l_@cntr 000B                           ??_scale 0042  
                 __div_to_l_@quot 0007                     __div_to_l_@f1 0001  
                   __div_to_l_@f2 0004                           ?___ftge 0055  
                         ?___wmul 000F                           ?_fround 003F  
                       ?___ftpack 0001                         ?___lltoft 0024  
                       ?___lwtoft 0009                           _GO_DONE 007E11  
               __end_of__npowers_ 0677                           __Hparam 0000  
                         __Lparam 0000                   __size_of___ftge 0090  
                         ___awdiv 26E2                           ___ftadd 1ED0  
                         ___awmod 285A                           ___ftdiv 24BE  
                         ___ftneg 2A3A                           ___lldiv 2766  
                 __size_of___wmul 0026                           ___ftmul 22D6  
                         ___llmod 28CA                           ___ftsub 29D4  
                         ___fttol 23CA                        _fround$902 0045  
                      _fround$903 0042                      __psmallconst 0600  
                         __pcinit 2B3E                        ??___ftpack 0006  
                 __size_of_fround 0246                           __ramtop 0600  
                      ??___lltoft 0028                           __ptext0 19D4  
                         __ptext1 06AE                           __ptext2 15E4  
                         __ptext3 2AC6                           __ptext4 1C8A  
                         __ptext5 2A14                           __ptext6 22D6  
                         __ptext7 285A                           __ptext8 26E2  
                         __ptext9 207C        Print_Mensagem_Lcd@mensagem 0004  
                      ??___lwtoft 000C                       ?__div_to_l_ 0001  
                         _dpowers 0601                  ??_Inicializa_Lcd 0004  
                         _isdigit 2AC6                  ___awmod@dividend 0001  
                         main@buf 0087                           _sprintf 06AE  
            end_of_initialization 2B3E                     __Lmediumconst 0000  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000D  
                         postdec2 000FDD                           postinc2 000FDE  
                  __tdiv_to_l_@f1 0001                    __tdiv_to_l_@f2 0004  
                   ??__tdiv_to_l_ 0007                Envia_Dado_Lcd@dado 0003  
                      main@AD0val 0097                        main@AD1val 009A  
                      main@AD2val 009D                        main@AD3val 00A0  
                       _PORTCbits 000F82                _Print_Mensagem_Lcd 27E8  
                       _TRISAbits 000F92               ?_Print_Mensagem_Lcd 0004  
               __size_of_ADC_read 0048                       ___ftdiv@exp 0053  
                       _Delay_LCD 2B02               __size_of__div_to_l_ 0128  
                     ___ftmul@exp 0039              ??_Print_Mensagem_Lcd 0006  
                  __end_of___ftge 26E2                    __end_of___wmul 2A3A  
                  __end_of_fround 1ED0               start_initialization 2B3E  
             __end_of__tdiv_to_l_ 21AE                   ___llmod@divisor 0005  
        Delay_inicializacao_LCD@i 0001                   ___llmod@counter 0009  
                      ?_Delay_LCD 0001                          ??___ftge 005B  
                        ??___wmul 0013                          ??_fround 0042  
                   sprintf@tmpval 0077                        fround@prec 0048  
               __size_of___ftpack 00AE          ?_Delay_inicializacao_LCD 0001  
               __size_of___lltoft 005C                 __size_of___lwtoft 0024  
                   __pcstackBANK0 0060                       sprintf@flag 0075  
                     sprintf@fval 0083                       sprintf@prec 0081  
                     sprintf@temp 0072           __size_of_Envia_Dado_Lcd 0022  
                        ?___awdiv 0007                          ?___ftadd 0049  
                        ?___awmod 0001                          ?___ftdiv 0046  
                        ?___ftneg 002D                          ?___lldiv 0001  
                        ?___ftmul 0030                          ?___llmod 0001  
                        ?___ftsub 0055                         __npowers_ 0650  
                        ?___fttol 0015                       __tdiv_to_l_ 207C  
                    ??__div_to_l_ 0007                       __smallconst 0600  
                        ?_isdigit 0001                         _scale$904 0042  
                        _ADC_read 298C                          ?_sprintf 0060  
                  __size_of_scale 03F0                    ___wmul@product 0013  
                     ??_Delay_LCD 0001                __end_of__div_to_l_ 22D6  
 __end_of_Delay_inicializacao_LCD 2B3E                        _ADCON0bits 000FC2  
               ___wmul@multiplier 000F                          __Hrparam 0000  
                        __Lrparam 0000                  __size_of___awdiv 0084  
                __size_of___ftadd 01AC                  __size_of___awmod 0070  
                __size_of___ftdiv 00E6                  __size_of___ftneg 0024  
                __size_of___lldiv 0082                  __size_of___ftmul 00F4  
                __size_of___llmod 0066                  __size_of___ftsub 0040  
                __size_of___fttol 00F4                          ___ftpack 25A4  
                        ___lltoft 2930                       _isdigit$575 0002  
                        ___lwtoft 2A5E                        sprintf@exp 007F  
                      sprintf@val 007B                  __size_of_isdigit 001E  
                        __ptext10 21AE                          __ptext11 2930  
                        __ptext20 2A5E                          __ptext12 28CA  
                        __ptext21 25A4                          __ptext13 2766  
                        __ptext22 27E8                          __ptext14 23CA  
                        __ptext23 2A82                          __ptext15 29D4  
                        __ptext24 2AE4                          __ptext16 1ED0  
                        __ptext25 2AA4                          __ptext17 2A3A  
                        __ptext26 2B02                          __ptext18 2652  
                        __ptext27 2B20                          __ptext19 24BE  
                        __ptext28 298C                          __powers_ 0629  
                __size_of_sprintf 0F36           __size_of_Inicializa_Lcd 001E  
                   __size_of_main 02B6       __size_of_Print_Mensagem_Lcd 0072  
                  _Envia_Dado_Lcd 2A82                        Delay_LCD@i 0001  
                        isdigit@c 0003                          scale@scl 0045  
                       sprintf@ap 0070                  __tdiv_to_l_@exp1 000F  
                __tdiv_to_l_@cntr 000E                         sprintf@sp 0060  
                __tdiv_to_l_@quot 000A                  ___lldiv@dividend 0001  
__size_of_Delay_inicializacao_LCD 001E            __end_of_Envia_Dado_Lcd 2AA4  
                    ?__tdiv_to_l_ 0001                          sprintf@c 0086  
                        sprintf@f 0062                  ___lldiv@quotient 0009  
                 ?_Envia_Dado_Lcd 0001  
